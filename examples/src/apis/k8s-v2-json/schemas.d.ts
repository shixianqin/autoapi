declare namespace API {
  namespace K8sV2Json {
    namespace $schemas {
      /**
       * AuditAnnotation describes how to produce an audit annotation for an API request.
       */
      interface IoK8sApiAdmissionregistrationV1AuditAnnotation {
        /**
         * key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
         *
         * The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: "{ValidatingAdmissionPolicy name}/{key}".
         *
         * If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.
         *
         * Required.
         */
        key: string;
        /**
         * valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.
         *
         * If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.
         *
         * Required.
         */
        valueExpression: string;
      }

      /**
       * ExpressionWarning is a warning information that targets a specific expression.
       */
      interface IoK8sApiAdmissionregistrationV1ExpressionWarning {
        /**
         * The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is "spec.validations[0].expression"
         */
        fieldRef: string;
        /**
         * The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.
         */
        warning: string;
      }

      /**
       * MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.
       */
      interface IoK8sApiAdmissionregistrationV1MatchCondition {
        /**
         * Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:
         *
         * 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
         *   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
         * 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
         *   request resource.
         * Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
         *
         * Required.
         */
        expression: string;
        /**
         * Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')
         *
         * Required.
         */
        name: string;
      }

      /**
       * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
       */
      interface IoK8sApiAdmissionregistrationV1MatchResources {
        /**
         * ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
         */
        excludeResourceRules?: $schemas.IoK8sApiAdmissionregistrationV1NamedRuleWithOperations[];
        /**
         * matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
         *
         * - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
         *
         * - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
         *
         * Defaults to "Equivalent"
         */
        matchPolicy?: string;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        namespaceSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        objectSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
         */
        resourceRules?: $schemas.IoK8sApiAdmissionregistrationV1NamedRuleWithOperations[];
      }

      /**
       * MutatingWebhook describes an admission webhook and the resources and operations it applies to.
       */
      interface IoK8sApiAdmissionregistrationV1MutatingWebhook {
        /**
         * AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
         */
        admissionReviewVersions: string[];
        /**
         * WebhookClientConfig contains the information to make a TLS connection with the webhook
         */
        clientConfig: $schemas.IoK8sApiAdmissionregistrationV1WebhookClientConfig;
        /**
         * FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
         */
        failurePolicy?: string;
        /**
         * MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
         *
         * The exact matching logic is (in order):
         *   1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
         *   2. If ALL matchConditions evaluate to TRUE, the webhook is called.
         *   3. If any matchCondition evaluates to an error (but none are FALSE):
         *      - If failurePolicy=Fail, reject the request
         *      - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
         */
        matchConditions?: $schemas.IoK8sApiAdmissionregistrationV1MatchCondition[];
        /**
         * matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
         *
         * - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
         *
         * - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
         *
         * Defaults to "Equivalent"
         */
        matchPolicy?: string;
        /**
         * The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
         */
        name: string;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        namespaceSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        objectSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".
         *
         * Never: the webhook will not be called more than once in a single admission evaluation.
         *
         * IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.
         *
         * Defaults to "Never".
         */
        reinvocationPolicy?: string;
        /**
         * Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
         */
        rules?: $schemas.IoK8sApiAdmissionregistrationV1RuleWithOperations[];
        /**
         * SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
         */
        sideEffects: string;
        /**
         * TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
         * @format int32
         */
        timeoutSeconds?: number;
      }

      /**
       * MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.
       */
      interface IoK8sApiAdmissionregistrationV1MutatingWebhookConfiguration {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * Webhooks is a list of webhooks and the affected resources and operations.
         */
        webhooks?: $schemas.IoK8sApiAdmissionregistrationV1MutatingWebhook[];
      }

      /**
       * MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
       */
      interface IoK8sApiAdmissionregistrationV1MutatingWebhookConfigurationList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of MutatingWebhookConfiguration.
         */
        items: $schemas.IoK8sApiAdmissionregistrationV1MutatingWebhookConfiguration[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
       */
      interface IoK8sApiAdmissionregistrationV1NamedRuleWithOperations {
        /**
         * APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
         */
        apiGroups?: string[];
        /**
         * APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
         */
        apiVersions?: string[];
        /**
         * Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
         */
        operations?: string[];
        /**
         * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
         */
        resourceNames?: string[];
        /**
         * Resources is a list of resources this rule applies to.
         *
         * For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*\/scale' means all scale subresources. '*\/*' means all resources and their subresources.
         *
         * If wildcard is present, the validation rule will ensure resources do not overlap with each other.
         *
         * Depending on the enclosing object, subresources might not be allowed. Required.
         */
        resources?: string[];
        /**
         * scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
         */
        scope?: string;
      }

      /**
       * ParamKind is a tuple of Group Kind and Version.
       */
      interface IoK8sApiAdmissionregistrationV1ParamKind {
        /**
         * APIVersion is the API group version the resources belong to. In format of "group/version". Required.
         */
        apiVersion?: string;
        /**
         * Kind is the API kind the resources belong to. Required.
         */
        kind?: string;
      }

      /**
       * ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.
       */
      interface IoK8sApiAdmissionregistrationV1ParamRef {
        /**
         * name is the name of the resource being referenced.
         *
         * One of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.
         *
         * A single parameter used for all admission requests can be configured by setting the `name` field, leaving `selector` blank, and setting namespace if `paramKind` is namespace-scoped.
         */
        name?: string;
        /**
         * namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.
         *
         * A per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.
         *
         * - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.
         *
         * - If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.
         */
        namespace?: string;
        /**
         * `parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.
         *
         * Allowed values are `Allow` or `Deny`
         *
         * Required
         */
        parameterNotFoundAction?: string;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
      }

      /**
       * RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.
       */
      interface IoK8sApiAdmissionregistrationV1RuleWithOperations {
        /**
         * APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
         */
        apiGroups?: string[];
        /**
         * APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
         */
        apiVersions?: string[];
        /**
         * Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
         */
        operations?: string[];
        /**
         * Resources is a list of resources this rule applies to.
         *
         * For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*\/scale' means all scale subresources. '*\/*' means all resources and their subresources.
         *
         * If wildcard is present, the validation rule will ensure resources do not overlap with each other.
         *
         * Depending on the enclosing object, subresources might not be allowed. Required.
         */
        resources?: string[];
        /**
         * scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
         */
        scope?: string;
      }

      /**
       * ServiceReference holds a reference to Service.legacy.k8s.io
       */
      interface IoK8sApiAdmissionregistrationV1ServiceReference {
        /**
         * `name` is the name of the service. Required
         */
        name: string;
        /**
         * `namespace` is the namespace of the service. Required
         */
        namespace: string;
        /**
         * `path` is an optional URL path which will be sent in any request to this service.
         */
        path?: string;
        /**
         * If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
         * @format int32
         */
        port?: number;
      }

      /**
       * TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
       */
      interface IoK8sApiAdmissionregistrationV1TypeChecking {
        /**
         * The type checking warnings for each expression.
         */
        expressionWarnings?: $schemas.IoK8sApiAdmissionregistrationV1ExpressionWarning[];
      }

      /**
       * ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
       */
      interface IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicy {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
         */
        spec?: $schemas.IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicySpec;
        /**
         * ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.
         */
        status?: $schemas.IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicyStatus;
      }

      /**
       * ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
       *
       * For a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding.
       *
       * The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget. Each evaluation of the policy is given an independent CEL cost budget. Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.
       */
      interface IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicyBinding {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
         */
        spec?: $schemas.IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicyBindingSpec;
      }

      /**
       * ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.
       */
      interface IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicyBindingList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of PolicyBinding.
         */
        items: $schemas.IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicyBinding[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
       */
      interface IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicyBindingSpec {
        /**
         * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
         */
        matchResources?: $schemas.IoK8sApiAdmissionregistrationV1MatchResources;
        /**
         * ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.
         */
        paramRef?: $schemas.IoK8sApiAdmissionregistrationV1ParamRef;
        /**
         * PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
         */
        policyName?: string;
        /**
         * validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.
         *
         * Failures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.
         *
         * validationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.
         *
         * The supported actions values are:
         *
         * "Deny" specifies that a validation failure results in a denied request.
         *
         * "Warn" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.
         *
         * "Audit" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `"validation.policy.admission.k8s.io/validation_failure": "[{\"message\": \"Invalid value\", {\"policy\": \"policy.example.com\", {\"binding\": \"policybinding.example.com\", {\"expressionIndex\": \"1\", {\"validationActions\": [\"Audit\"]}]"`
         *
         * Clients should expect to handle additional values by ignoring any values not recognized.
         *
         * "Deny" and "Warn" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.
         *
         * Required.
         */
        validationActions?: string[];
      }

      /**
       * ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
       */
      interface IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicyList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of ValidatingAdmissionPolicy.
         */
        items: $schemas.IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicy[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
       */
      interface IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicySpec {
        /**
         * auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.
         */
        auditAnnotations?: $schemas.IoK8sApiAdmissionregistrationV1AuditAnnotation[];
        /**
         * failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.
         *
         * A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.
         *
         * failurePolicy does not define how validations that evaluate to false are handled.
         *
         * When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.
         *
         * Allowed values are Ignore or Fail. Defaults to Fail.
         */
        failurePolicy?: string;
        /**
         * MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
         *
         * If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.
         *
         * The exact matching logic is (in order):
         *   1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
         *   2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
         *   3. If any matchCondition evaluates to an error (but none are FALSE):
         *      - If failurePolicy=Fail, reject the request
         *      - If failurePolicy=Ignore, the policy is skipped
         */
        matchConditions?: $schemas.IoK8sApiAdmissionregistrationV1MatchCondition[];
        /**
         * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
         */
        matchConstraints?: $schemas.IoK8sApiAdmissionregistrationV1MatchResources;
        /**
         * ParamKind is a tuple of Group Kind and Version.
         */
        paramKind?: $schemas.IoK8sApiAdmissionregistrationV1ParamKind;
        /**
         * Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.
         */
        validations?: $schemas.IoK8sApiAdmissionregistrationV1Validation[];
        /**
         * Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy.
         *
         * The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.
         */
        variables?: $schemas.IoK8sApiAdmissionregistrationV1Variable[];
      }

      /**
       * ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.
       */
      interface IoK8sApiAdmissionregistrationV1ValidatingAdmissionPolicyStatus {
        /**
         * The conditions represent the latest available observations of a policy's current state.
         */
        conditions?: $schemas.IoK8sApimachineryPkgApisMetaV1Condition[];
        /**
         * The generation observed by the controller.
         * @format int64
         */
        observedGeneration?: number | string;
        /**
         * TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
         */
        typeChecking?: $schemas.IoK8sApiAdmissionregistrationV1TypeChecking;
      }

      /**
       * ValidatingWebhook describes an admission webhook and the resources and operations it applies to.
       */
      interface IoK8sApiAdmissionregistrationV1ValidatingWebhook {
        /**
         * AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
         */
        admissionReviewVersions: string[];
        /**
         * WebhookClientConfig contains the information to make a TLS connection with the webhook
         */
        clientConfig: $schemas.IoK8sApiAdmissionregistrationV1WebhookClientConfig;
        /**
         * FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
         */
        failurePolicy?: string;
        /**
         * MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
         *
         * The exact matching logic is (in order):
         *   1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.
         *   2. If ALL matchConditions evaluate to TRUE, the webhook is called.
         *   3. If any matchCondition evaluates to an error (but none are FALSE):
         *      - If failurePolicy=Fail, reject the request
         *      - If failurePolicy=Ignore, the error is ignored and the webhook is skipped
         */
        matchConditions?: $schemas.IoK8sApiAdmissionregistrationV1MatchCondition[];
        /**
         * matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
         *
         * - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
         *
         * - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
         *
         * Defaults to "Equivalent"
         */
        matchPolicy?: string;
        /**
         * The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
         */
        name: string;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        namespaceSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        objectSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
         */
        rules?: $schemas.IoK8sApiAdmissionregistrationV1RuleWithOperations[];
        /**
         * SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
         */
        sideEffects: string;
        /**
         * TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
         * @format int32
         */
        timeoutSeconds?: number;
      }

      /**
       * ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.
       */
      interface IoK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * Webhooks is a list of webhooks and the affected resources and operations.
         */
        webhooks?: $schemas.IoK8sApiAdmissionregistrationV1ValidatingWebhook[];
      }

      /**
       * ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
       */
      interface IoK8sApiAdmissionregistrationV1ValidatingWebhookConfigurationList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of ValidatingWebhookConfiguration.
         */
        items: $schemas.IoK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * Validation specifies the CEL expression which is used to apply the validation.
       */
      interface IoK8sApiAdmissionregistrationV1Validation {
        /**
         * Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:
         *
         * - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
         *   For example, a variable named 'foo' can be accessed as 'variables.foo'.
         * - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
         *   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
         * - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
         *   request resource.
         *
         * The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
         *
         * Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
         * 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
         * 	  "import", "let", "loop", "package", "namespace", "return".
         * Examples:
         *   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
         *   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
         *   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
         *
         * Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
         *   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
         *     non-intersecting elements in `Y` are appended, retaining their partial order.
         *   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
         *     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
         *     non-intersecting keys are appended, retaining their partial order.
         * Required.
         */
        expression: string;
        /**
         * Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
         */
        message?: string;
        /**
         * messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: "object.x must be less than max ("+string(params.max)+")"
         */
        messageExpression?: string;
        /**
         * Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
         */
        reason?: string;
      }

      /**
       * Variable is the definition of a variable that is used for composition. A variable is defined as a named expression.
       */
      interface IoK8sApiAdmissionregistrationV1Variable {
        /**
         * Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.
         */
        expression: string;
        /**
         * Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is "foo", the variable will be available as `variables.foo`
         */
        name: string;
      }

      /**
       * WebhookClientConfig contains the information to make a TLS connection with the webhook
       */
      interface IoK8sApiAdmissionregistrationV1WebhookClientConfig {
        /**
         * `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
         * @format byte
         */
        caBundle?: string;
        /**
         * ServiceReference holds a reference to Service.legacy.k8s.io
         */
        service?: $schemas.IoK8sApiAdmissionregistrationV1ServiceReference;
        /**
         * `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
         *
         * The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
         *
         * Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
         *
         * The scheme must be "https"; the URL must begin with "https://".
         *
         * A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
         *
         * Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
         */
        url?: string;
      }

      /**
       * AuditAnnotation describes how to produce an audit annotation for an API request.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1AuditAnnotation {
        /**
         * key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
         *
         * The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: "{ValidatingAdmissionPolicy name}/{key}".
         *
         * If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.
         *
         * Required.
         */
        key: string;
        /**
         * valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.
         *
         * If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.
         *
         * Required.
         */
        valueExpression: string;
      }

      /**
       * ExpressionWarning is a warning information that targets a specific expression.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1ExpressionWarning {
        /**
         * The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is "spec.validations[0].expression"
         */
        fieldRef: string;
        /**
         * The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.
         */
        warning: string;
      }

      interface IoK8sApiAdmissionregistrationV1alpha1MatchCondition {
        /**
         * Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:
         *
         * 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
         *   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
         * 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
         *   request resource.
         * Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
         *
         * Required.
         */
        expression: string;
        /**
         * Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')
         *
         * Required.
         */
        name: string;
      }

      /**
       * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
       */
      interface IoK8sApiAdmissionregistrationV1alpha1MatchResources {
        /**
         * ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
         */
        excludeResourceRules?: $schemas.IoK8sApiAdmissionregistrationV1alpha1NamedRuleWithOperations[];
        /**
         * matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
         *
         * - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
         *
         * - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
         *
         * Defaults to "Equivalent"
         */
        matchPolicy?: string;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        namespaceSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        objectSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
         */
        resourceRules?: $schemas.IoK8sApiAdmissionregistrationV1alpha1NamedRuleWithOperations[];
      }

      /**
       * NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1NamedRuleWithOperations {
        /**
         * APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
         */
        apiGroups?: string[];
        /**
         * APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
         */
        apiVersions?: string[];
        /**
         * Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
         */
        operations?: string[];
        /**
         * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
         */
        resourceNames?: string[];
        /**
         * Resources is a list of resources this rule applies to.
         *
         * For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*\/scale' means all scale subresources. '*\/*' means all resources and their subresources.
         *
         * If wildcard is present, the validation rule will ensure resources do not overlap with each other.
         *
         * Depending on the enclosing object, subresources might not be allowed. Required.
         */
        resources?: string[];
        /**
         * scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
         */
        scope?: string;
      }

      /**
       * ParamKind is a tuple of Group Kind and Version.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1ParamKind {
        /**
         * APIVersion is the API group version the resources belong to. In format of "group/version". Required.
         */
        apiVersion?: string;
        /**
         * Kind is the API kind the resources belong to. Required.
         */
        kind?: string;
      }

      /**
       * ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1ParamRef {
        /**
         * `name` is the name of the resource being referenced.
         *
         * `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.
         */
        name?: string;
        /**
         * namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.
         *
         * A per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.
         *
         * - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.
         *
         * - If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.
         */
        namespace?: string;
        /**
         * `parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.
         *
         * Allowed values are `Allow` or `Deny` Default to `Deny`
         */
        parameterNotFoundAction?: string;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
      }

      /**
       * TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
       */
      interface IoK8sApiAdmissionregistrationV1alpha1TypeChecking {
        /**
         * The type checking warnings for each expression.
         */
        expressionWarnings?: $schemas.IoK8sApiAdmissionregistrationV1alpha1ExpressionWarning[];
      }

      /**
       * ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
         */
        spec?: $schemas.IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicySpec;
        /**
         * ValidatingAdmissionPolicyStatus represents the status of a ValidatingAdmissionPolicy.
         */
        status?: $schemas.IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus;
      }

      /**
       * ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
       *
       * For a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding.
       *
       * The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget. Each evaluation of the policy is given an independent CEL cost budget. Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
         */
        spec?: $schemas.IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingSpec;
      }

      /**
       * ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of PolicyBinding.
         */
        items: $schemas.IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBindingSpec {
        /**
         * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
         */
        matchResources?: $schemas.IoK8sApiAdmissionregistrationV1alpha1MatchResources;
        /**
         * ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.
         */
        paramRef?: $schemas.IoK8sApiAdmissionregistrationV1alpha1ParamRef;
        /**
         * PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
         */
        policyName?: string;
        /**
         * validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.
         *
         * Failures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.
         *
         * validationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.
         *
         * The supported actions values are:
         *
         * "Deny" specifies that a validation failure results in a denied request.
         *
         * "Warn" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.
         *
         * "Audit" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `"validation.policy.admission.k8s.io/validation_failure": "[{\"message\": \"Invalid value\", {\"policy\": \"policy.example.com\", {\"binding\": \"policybinding.example.com\", {\"expressionIndex\": \"1\", {\"validationActions\": [\"Audit\"]}]"`
         *
         * Clients should expect to handle additional values by ignoring any values not recognized.
         *
         * "Deny" and "Warn" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.
         *
         * Required.
         */
        validationActions?: string[];
      }

      /**
       * ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of ValidatingAdmissionPolicy.
         */
        items: $schemas.IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicy[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicySpec {
        /**
         * auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.
         */
        auditAnnotations?: $schemas.IoK8sApiAdmissionregistrationV1alpha1AuditAnnotation[];
        /**
         * failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.
         *
         * A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.
         *
         * failurePolicy does not define how validations that evaluate to false are handled.
         *
         * When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.
         *
         * Allowed values are Ignore or Fail. Defaults to Fail.
         */
        failurePolicy?: string;
        /**
         * MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
         *
         * If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.
         *
         * The exact matching logic is (in order):
         *   1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
         *   2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
         *   3. If any matchCondition evaluates to an error (but none are FALSE):
         *      - If failurePolicy=Fail, reject the request
         *      - If failurePolicy=Ignore, the policy is skipped
         */
        matchConditions?: $schemas.IoK8sApiAdmissionregistrationV1alpha1MatchCondition[];
        /**
         * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
         */
        matchConstraints?: $schemas.IoK8sApiAdmissionregistrationV1alpha1MatchResources;
        /**
         * ParamKind is a tuple of Group Kind and Version.
         */
        paramKind?: $schemas.IoK8sApiAdmissionregistrationV1alpha1ParamKind;
        /**
         * Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.
         */
        validations?: $schemas.IoK8sApiAdmissionregistrationV1alpha1Validation[];
        /**
         * Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy.
         *
         * The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.
         */
        variables?: $schemas.IoK8sApiAdmissionregistrationV1alpha1Variable[];
      }

      /**
       * ValidatingAdmissionPolicyStatus represents the status of a ValidatingAdmissionPolicy.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus {
        /**
         * The conditions represent the latest available observations of a policy's current state.
         */
        conditions?: $schemas.IoK8sApimachineryPkgApisMetaV1Condition[];
        /**
         * The generation observed by the controller.
         * @format int64
         */
        observedGeneration?: number | string;
        /**
         * TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
         */
        typeChecking?: $schemas.IoK8sApiAdmissionregistrationV1alpha1TypeChecking;
      }

      /**
       * Validation specifies the CEL expression which is used to apply the validation.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1Validation {
        /**
         * Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:
         *
         * - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
         *   For example, a variable named 'foo' can be accessed as 'variables.foo'.
         * - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
         *   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
         * - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
         *   request resource.
         *
         * The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
         *
         * Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
         * 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
         * 	  "import", "let", "loop", "package", "namespace", "return".
         * Examples:
         *   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
         *   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
         *   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
         *
         * Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
         *   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
         *     non-intersecting elements in `Y` are appended, retaining their partial order.
         *   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
         *     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
         *     non-intersecting keys are appended, retaining their partial order.
         * Required.
         */
        expression: string;
        /**
         * Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
         */
        message?: string;
        /**
         * messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: "object.x must be less than max ("+string(params.max)+")"
         */
        messageExpression?: string;
        /**
         * Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
         */
        reason?: string;
      }

      /**
       * Variable is the definition of a variable that is used for composition.
       */
      interface IoK8sApiAdmissionregistrationV1alpha1Variable {
        /**
         * Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.
         */
        expression: string;
        /**
         * Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is "foo", the variable will be available as `variables.foo`
         */
        name: string;
      }

      /**
       * AuditAnnotation describes how to produce an audit annotation for an API request.
       */
      interface IoK8sApiAdmissionregistrationV1beta1AuditAnnotation {
        /**
         * key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.
         *
         * The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: "{ValidatingAdmissionPolicy name}/{key}".
         *
         * If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.
         *
         * Required.
         */
        key: string;
        /**
         * valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.
         *
         * If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.
         *
         * Required.
         */
        valueExpression: string;
      }

      /**
       * ExpressionWarning is a warning information that targets a specific expression.
       */
      interface IoK8sApiAdmissionregistrationV1beta1ExpressionWarning {
        /**
         * The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is "spec.validations[0].expression"
         */
        fieldRef: string;
        /**
         * The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler.
         */
        warning: string;
      }

      /**
       * MatchCondition represents a condition which must be fulfilled for a request to be sent to a webhook.
       */
      interface IoK8sApiAdmissionregistrationV1beta1MatchCondition {
        /**
         * Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:
         *
         * 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
         *   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
         * 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
         *   request resource.
         * Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/
         *
         * Required.
         */
        expression: string;
        /**
         * Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')
         *
         * Required.
         */
        name: string;
      }

      /**
       * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
       */
      interface IoK8sApiAdmissionregistrationV1beta1MatchResources {
        /**
         * ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
         */
        excludeResourceRules?: $schemas.IoK8sApiAdmissionregistrationV1beta1NamedRuleWithOperations[];
        /**
         * matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
         *
         * - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.
         *
         * - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.
         *
         * Defaults to "Equivalent"
         */
        matchPolicy?: string;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        namespaceSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        objectSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.
         */
        resourceRules?: $schemas.IoK8sApiAdmissionregistrationV1beta1NamedRuleWithOperations[];
      }

      /**
       * NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.
       */
      interface IoK8sApiAdmissionregistrationV1beta1NamedRuleWithOperations {
        /**
         * APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
         */
        apiGroups?: string[];
        /**
         * APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
         */
        apiVersions?: string[];
        /**
         * Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
         */
        operations?: string[];
        /**
         * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
         */
        resourceNames?: string[];
        /**
         * Resources is a list of resources this rule applies to.
         *
         * For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*\/scale' means all scale subresources. '*\/*' means all resources and their subresources.
         *
         * If wildcard is present, the validation rule will ensure resources do not overlap with each other.
         *
         * Depending on the enclosing object, subresources might not be allowed. Required.
         */
        resources?: string[];
        /**
         * scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
         */
        scope?: string;
      }

      /**
       * ParamKind is a tuple of Group Kind and Version.
       */
      interface IoK8sApiAdmissionregistrationV1beta1ParamKind {
        /**
         * APIVersion is the API group version the resources belong to. In format of "group/version". Required.
         */
        apiVersion?: string;
        /**
         * Kind is the API kind the resources belong to. Required.
         */
        kind?: string;
      }

      /**
       * ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.
       */
      interface IoK8sApiAdmissionregistrationV1beta1ParamRef {
        /**
         * name is the name of the resource being referenced.
         *
         * One of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.
         *
         * A single parameter used for all admission requests can be configured by setting the `name` field, leaving `selector` blank, and setting namespace if `paramKind` is namespace-scoped.
         */
        name?: string;
        /**
         * namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.
         *
         * A per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.
         *
         * - If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.
         *
         * - If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.
         */
        namespace?: string;
        /**
         * `parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.
         *
         * Allowed values are `Allow` or `Deny`
         *
         * Required
         */
        parameterNotFoundAction?: string;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
      }

      /**
       * TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
       */
      interface IoK8sApiAdmissionregistrationV1beta1TypeChecking {
        /**
         * The type checking warnings for each expression.
         */
        expressionWarnings?: $schemas.IoK8sApiAdmissionregistrationV1beta1ExpressionWarning[];
      }

      /**
       * ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.
       */
      interface IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
         */
        spec?: $schemas.IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicySpec;
        /**
         * ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.
         */
        status?: $schemas.IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus;
      }

      /**
       * ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.
       *
       * For a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding.
       *
       * The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget. Each evaluation of the policy is given an independent CEL cost budget. Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.
       */
      interface IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
         */
        spec?: $schemas.IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingSpec;
      }

      /**
       * ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.
       */
      interface IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of PolicyBinding.
         */
        items: $schemas.IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.
       */
      interface IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingSpec {
        /**
         * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
         */
        matchResources?: $schemas.IoK8sApiAdmissionregistrationV1beta1MatchResources;
        /**
         * ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.
         */
        paramRef?: $schemas.IoK8sApiAdmissionregistrationV1beta1ParamRef;
        /**
         * PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.
         */
        policyName?: string;
        /**
         * validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.
         *
         * Failures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.
         *
         * validationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.
         *
         * The supported actions values are:
         *
         * "Deny" specifies that a validation failure results in a denied request.
         *
         * "Warn" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.
         *
         * "Audit" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `"validation.policy.admission.k8s.io/validation_failure": "[{\"message\": \"Invalid value\", {\"policy\": \"policy.example.com\", {\"binding\": \"policybinding.example.com\", {\"expressionIndex\": \"1\", {\"validationActions\": [\"Audit\"]}]"`
         *
         * Clients should expect to handle additional values by ignoring any values not recognized.
         *
         * "Deny" and "Warn" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.
         *
         * Required.
         */
        validationActions?: string[];
      }

      /**
       * ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
       */
      interface IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of ValidatingAdmissionPolicy.
         */
        items: $schemas.IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
       */
      interface IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicySpec {
        /**
         * auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.
         */
        auditAnnotations?: $schemas.IoK8sApiAdmissionregistrationV1beta1AuditAnnotation[];
        /**
         * failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.
         *
         * A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.
         *
         * failurePolicy does not define how validations that evaluate to false are handled.
         *
         * When failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.
         *
         * Allowed values are Ignore or Fail. Defaults to Fail.
         */
        failurePolicy?: string;
        /**
         * MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.
         *
         * If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.
         *
         * The exact matching logic is (in order):
         *   1. If ANY matchCondition evaluates to FALSE, the policy is skipped.
         *   2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.
         *   3. If any matchCondition evaluates to an error (but none are FALSE):
         *      - If failurePolicy=Fail, reject the request
         *      - If failurePolicy=Ignore, the policy is skipped
         */
        matchConditions?: $schemas.IoK8sApiAdmissionregistrationV1beta1MatchCondition[];
        /**
         * MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
         */
        matchConstraints?: $schemas.IoK8sApiAdmissionregistrationV1beta1MatchResources;
        /**
         * ParamKind is a tuple of Group Kind and Version.
         */
        paramKind?: $schemas.IoK8sApiAdmissionregistrationV1beta1ParamKind;
        /**
         * Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.
         */
        validations?: $schemas.IoK8sApiAdmissionregistrationV1beta1Validation[];
        /**
         * Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy.
         *
         * The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.
         */
        variables?: $schemas.IoK8sApiAdmissionregistrationV1beta1Variable[];
      }

      /**
       * ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.
       */
      interface IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus {
        /**
         * The conditions represent the latest available observations of a policy's current state.
         */
        conditions?: $schemas.IoK8sApimachineryPkgApisMetaV1Condition[];
        /**
         * The generation observed by the controller.
         * @format int64
         */
        observedGeneration?: number | string;
        /**
         * TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy
         */
        typeChecking?: $schemas.IoK8sApiAdmissionregistrationV1beta1TypeChecking;
      }

      /**
       * Validation specifies the CEL expression which is used to apply the validation.
       */
      interface IoK8sApiAdmissionregistrationV1beta1Validation {
        /**
         * Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:
         *
         * - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.
         *   For example, a variable named 'foo' can be accessed as 'variables.foo'.
         * - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.
         *   See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz
         * - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the
         *   request resource.
         *
         * The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.
         *
         * Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
         * 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
         * 	  "import", "let", "loop", "package", "namespace", "return".
         * Examples:
         *   - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}
         *   - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}
         *   - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}
         *
         * Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
         *   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
         *     non-intersecting elements in `Y` are appended, retaining their partial order.
         *   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
         *     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
         *     non-intersecting keys are appended, retaining their partial order.
         * Required.
         */
        expression: string;
        /**
         * Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is "failed Expression: {Expression}".
         */
        message?: string;
        /**
         * messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: "object.x must be less than max ("+string(params.max)+")"
         */
        messageExpression?: string;
        /**
         * Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge". If not set, StatusReasonInvalid is used in the response to the client.
         */
        reason?: string;
      }

      /**
       * Variable is the definition of a variable that is used for composition. A variable is defined as a named expression.
       */
      interface IoK8sApiAdmissionregistrationV1beta1Variable {
        /**
         * Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.
         */
        expression: string;
        /**
         * Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is "foo", the variable will be available as `variables.foo`
         */
        name: string;
      }

      /**
       * An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.
       */
      interface IoK8sApiApiserverinternalV1alpha1ServerStorageVersion {
        /**
         * The ID of the reporting API server.
         */
        apiServerID?: string;
        /**
         * The API server can decode objects encoded in these versions. The encodingVersion must be included in the decodableVersions.
         */
        decodableVersions?: string[];
        /**
         * The API server encodes the object to this version when persisting it in the backend (e.g., etcd).
         */
        encodingVersion?: string;
        /**
         * The API server can serve these versions. DecodableVersions must include all ServedVersions.
         */
        servedVersions?: string[];
      }

      /**
       * Storage version of a specific resource.
       */
      interface IoK8sApiApiserverinternalV1alpha1StorageVersion {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * StorageVersionSpec is an empty spec.
         */
        spec: $schemas.IoK8sApiApiserverinternalV1alpha1StorageVersionSpec;
        /**
         * API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
         */
        status: $schemas.IoK8sApiApiserverinternalV1alpha1StorageVersionStatus;
      }

      /**
       * Describes the state of the storageVersion at a certain point.
       */
      interface IoK8sApiApiserverinternalV1alpha1StorageVersionCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * A human readable message indicating details about the transition.
         */
        message: string;
        /**
         * If set, this represents the .metadata.generation that the condition was set based upon.
         * @format int64
         */
        observedGeneration?: number | string;
        /**
         * The reason for the condition's last transition.
         */
        reason: string;
        /**
         * Status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * Type of the condition.
         */
        type: string;
      }

      /**
       * A list of StorageVersions.
       */
      interface IoK8sApiApiserverinternalV1alpha1StorageVersionList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items holds a list of StorageVersion
         */
        items: $schemas.IoK8sApiApiserverinternalV1alpha1StorageVersion[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * StorageVersionSpec is an empty spec.
       */
      interface IoK8sApiApiserverinternalV1alpha1StorageVersionSpec {}

      /**
       * API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
       */
      interface IoK8sApiApiserverinternalV1alpha1StorageVersionStatus {
        /**
         * If all API server instances agree on the same encoding storage version, then this field is set to that version. Otherwise this field is left empty. API servers should finish updating its storageVersionStatus entry before serving write operations, so that this field will be in sync with the reality.
         */
        commonEncodingVersion?: string;
        /**
         * The latest available observations of the storageVersion's state.
         */
        conditions?: $schemas.IoK8sApiApiserverinternalV1alpha1StorageVersionCondition[];
        /**
         * The reported versions per API server instance.
         */
        storageVersions?: $schemas.IoK8sApiApiserverinternalV1alpha1ServerStorageVersion[];
      }

      /**
       * ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
       */
      interface IoK8sApiAppsV1ControllerRevision {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * RawExtension is used to hold extensions in external versions.
         *
         * To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
         *
         * // Internal package:
         *
         * 	type MyAPIObject struct {
         * 		runtime.TypeMeta `json:",inline"`
         * 		MyPlugin runtime.Object `json:"myPlugin"`
         * 	}
         *
         * 	type PluginA struct {
         * 		AOption string `json:"aOption"`
         * 	}
         *
         * // External package:
         *
         * 	type MyAPIObject struct {
         * 		runtime.TypeMeta `json:",inline"`
         * 		MyPlugin runtime.RawExtension `json:"myPlugin"`
         * 	}
         *
         * 	type PluginA struct {
         * 		AOption string `json:"aOption"`
         * 	}
         *
         * // On the wire, the JSON will look something like this:
         *
         * 	{
         * 		"kind":"MyAPIObject",
         * 		"apiVersion":"v1",
         * 		"myPlugin": {
         * 			"kind":"PluginA",
         * 			"aOption":"foo",
         * 		},
         * 	}
         *
         * So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
         */
        data?: $schemas.IoK8sApimachineryPkgRuntimeRawExtension;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * Revision indicates the revision of the state represented by Data.
         * @format int64
         */
        revision: number | string;
      }

      /**
       * ControllerRevisionList is a resource containing a list of ControllerRevision objects.
       */
      interface IoK8sApiAppsV1ControllerRevisionList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of ControllerRevisions
         */
        items: $schemas.IoK8sApiAppsV1ControllerRevision[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * DaemonSet represents the configuration of a daemon set.
       */
      interface IoK8sApiAppsV1DaemonSet {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * DaemonSetSpec is the specification of a daemon set.
         */
        spec?: $schemas.IoK8sApiAppsV1DaemonSetSpec;
        /**
         * DaemonSetStatus represents the current status of a daemon set.
         */
        status?: $schemas.IoK8sApiAppsV1DaemonSetStatus;
      }

      /**
       * DaemonSetCondition describes the state of a DaemonSet at a certain point.
       */
      interface IoK8sApiAppsV1DaemonSetCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * A human readable message indicating details about the transition.
         */
        message?: string;
        /**
         * The reason for the condition's last transition.
         */
        reason?: string;
        /**
         * Status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * Type of DaemonSet condition.
         */
        type: string;
      }

      /**
       * DaemonSetList is a collection of daemon sets.
       */
      interface IoK8sApiAppsV1DaemonSetList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * A list of daemon sets.
         */
        items: $schemas.IoK8sApiAppsV1DaemonSet[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * DaemonSetSpec is the specification of a daemon set.
       */
      interface IoK8sApiAppsV1DaemonSetSpec {
        /**
         * The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
         * @format int32
         */
        minReadySeconds?: number;
        /**
         * The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
         * @format int32
         */
        revisionHistoryLimit?: number;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        template: $schemas.IoK8sApiCoreV1PodTemplateSpec;
        /**
         * DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
         */
        updateStrategy?: $schemas.IoK8sApiAppsV1DaemonSetUpdateStrategy;
      }

      /**
       * DaemonSetStatus represents the current status of a daemon set.
       */
      interface IoK8sApiAppsV1DaemonSetStatus {
        /**
         * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
         * @format int32
         */
        collisionCount?: number;
        /**
         * Represents the latest available observations of a DaemonSet's current state.
         */
        conditions?: $schemas.IoK8sApiAppsV1DaemonSetCondition[];
        /**
         * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
         * @format int32
         */
        currentNumberScheduled: number;
        /**
         * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
         * @format int32
         */
        desiredNumberScheduled: number;
        /**
         * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
         * @format int32
         */
        numberAvailable?: number;
        /**
         * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
         * @format int32
         */
        numberMisscheduled: number;
        /**
         * numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.
         * @format int32
         */
        numberReady: number;
        /**
         * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
         * @format int32
         */
        numberUnavailable?: number;
        /**
         * The most recent generation observed by the daemon set controller.
         * @format int64
         */
        observedGeneration?: number | string;
        /**
         * The total number of nodes that are running updated daemon pod
         * @format int32
         */
        updatedNumberScheduled?: number;
      }

      /**
       * DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
       */
      interface IoK8sApiAppsV1DaemonSetUpdateStrategy {
        /**
         * Spec to control the desired behavior of daemon set rolling update.
         */
        rollingUpdate?: $schemas.IoK8sApiAppsV1RollingUpdateDaemonSet;
        /**
         * Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
         */
        type?: string;
      }

      /**
       * Deployment enables declarative updates for Pods and ReplicaSets.
       */
      interface IoK8sApiAppsV1Deployment {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * DeploymentSpec is the specification of the desired behavior of the Deployment.
         */
        spec?: $schemas.IoK8sApiAppsV1DeploymentSpec;
        /**
         * DeploymentStatus is the most recently observed status of the Deployment.
         */
        status?: $schemas.IoK8sApiAppsV1DeploymentStatus;
      }

      /**
       * DeploymentCondition describes the state of a deployment at a certain point.
       */
      interface IoK8sApiAppsV1DeploymentCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastUpdateTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * A human readable message indicating details about the transition.
         */
        message?: string;
        /**
         * The reason for the condition's last transition.
         */
        reason?: string;
        /**
         * Status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * Type of deployment condition.
         */
        type: string;
      }

      /**
       * DeploymentList is a list of Deployments.
       */
      interface IoK8sApiAppsV1DeploymentList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of Deployments.
         */
        items: $schemas.IoK8sApiAppsV1Deployment[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * DeploymentSpec is the specification of the desired behavior of the Deployment.
       */
      interface IoK8sApiAppsV1DeploymentSpec {
        /**
         * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
         * @format int32
         */
        minReadySeconds?: number;
        /**
         * Indicates that the deployment is paused.
         */
        paused?: boolean;
        /**
         * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
         * @format int32
         */
        progressDeadlineSeconds?: number;
        /**
         * Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
         * @format int32
         */
        replicas?: number;
        /**
         * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
         * @format int32
         */
        revisionHistoryLimit?: number;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * DeploymentStrategy describes how to replace existing pods with new ones.
         */
        strategy?: $schemas.IoK8sApiAppsV1DeploymentStrategy;
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        template: $schemas.IoK8sApiCoreV1PodTemplateSpec;
      }

      /**
       * DeploymentStatus is the most recently observed status of the Deployment.
       */
      interface IoK8sApiAppsV1DeploymentStatus {
        /**
         * Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
         * @format int32
         */
        availableReplicas?: number;
        /**
         * Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
         * @format int32
         */
        collisionCount?: number;
        /**
         * Represents the latest available observations of a deployment's current state.
         */
        conditions?: $schemas.IoK8sApiAppsV1DeploymentCondition[];
        /**
         * The generation observed by the deployment controller.
         * @format int64
         */
        observedGeneration?: number | string;
        /**
         * readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
         * @format int32
         */
        readyReplicas?: number;
        /**
         * Total number of non-terminated pods targeted by this deployment (their labels match the selector).
         * @format int32
         */
        replicas?: number;
        /**
         * Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
         * @format int32
         */
        unavailableReplicas?: number;
        /**
         * Total number of non-terminated pods targeted by this deployment that have the desired template spec.
         * @format int32
         */
        updatedReplicas?: number;
      }

      /**
       * DeploymentStrategy describes how to replace existing pods with new ones.
       */
      interface IoK8sApiAppsV1DeploymentStrategy {
        /**
         * Spec to control the desired behavior of rolling update.
         */
        rollingUpdate?: $schemas.IoK8sApiAppsV1RollingUpdateDeployment;
        /**
         * Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
         */
        type?: string;
      }

      /**
       * ReplicaSet ensures that a specified number of pod replicas are running at any given time.
       */
      interface IoK8sApiAppsV1ReplicaSet {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ReplicaSetSpec is the specification of a ReplicaSet.
         */
        spec?: $schemas.IoK8sApiAppsV1ReplicaSetSpec;
        /**
         * ReplicaSetStatus represents the current status of a ReplicaSet.
         */
        status?: $schemas.IoK8sApiAppsV1ReplicaSetStatus;
      }

      /**
       * ReplicaSetCondition describes the state of a replica set at a certain point.
       */
      interface IoK8sApiAppsV1ReplicaSetCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * A human readable message indicating details about the transition.
         */
        message?: string;
        /**
         * The reason for the condition's last transition.
         */
        reason?: string;
        /**
         * Status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * Type of replica set condition.
         */
        type: string;
      }

      /**
       * ReplicaSetList is a collection of ReplicaSets.
       */
      interface IoK8sApiAppsV1ReplicaSetList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
         */
        items: $schemas.IoK8sApiAppsV1ReplicaSet[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ReplicaSetSpec is the specification of a ReplicaSet.
       */
      interface IoK8sApiAppsV1ReplicaSetSpec {
        /**
         * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
         * @format int32
         */
        minReadySeconds?: number;
        /**
         * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
         * @format int32
         */
        replicas?: number;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        template?: $schemas.IoK8sApiCoreV1PodTemplateSpec;
      }

      /**
       * ReplicaSetStatus represents the current status of a ReplicaSet.
       */
      interface IoK8sApiAppsV1ReplicaSetStatus {
        /**
         * The number of available replicas (ready for at least minReadySeconds) for this replica set.
         * @format int32
         */
        availableReplicas?: number;
        /**
         * Represents the latest available observations of a replica set's current state.
         */
        conditions?: $schemas.IoK8sApiAppsV1ReplicaSetCondition[];
        /**
         * The number of pods that have labels matching the labels of the pod template of the replicaset.
         * @format int32
         */
        fullyLabeledReplicas?: number;
        /**
         * ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
         * @format int64
         */
        observedGeneration?: number | string;
        /**
         * readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.
         * @format int32
         */
        readyReplicas?: number;
        /**
         * Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
         * @format int32
         */
        replicas: number;
      }

      /**
       * Spec to control the desired behavior of daemon set rolling update.
       */
      interface IoK8sApiAppsV1RollingUpdateDaemonSet {
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        maxSurge?: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        maxUnavailable?: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
      }

      /**
       * Spec to control the desired behavior of rolling update.
       */
      interface IoK8sApiAppsV1RollingUpdateDeployment {
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        maxSurge?: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        maxUnavailable?: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
      }

      /**
       * RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
       */
      interface IoK8sApiAppsV1RollingUpdateStatefulSetStrategy {
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        maxUnavailable?: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
        /**
         * Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.
         * @format int32
         */
        partition?: number;
      }

      /**
       * StatefulSet represents a set of pods with consistent identities. Identities are defined as:
       *   - Network: A single stable DNS and hostname.
       *   - Storage: As many VolumeClaims as requested.
       *
       * The StatefulSet guarantees that a given network identity will always map to the same storage identity.
       */
      interface IoK8sApiAppsV1StatefulSet {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * A StatefulSetSpec is the specification of a StatefulSet.
         */
        spec?: $schemas.IoK8sApiAppsV1StatefulSetSpec;
        /**
         * StatefulSetStatus represents the current state of a StatefulSet.
         */
        status?: $schemas.IoK8sApiAppsV1StatefulSetStatus;
      }

      /**
       * StatefulSetCondition describes the state of a statefulset at a certain point.
       */
      interface IoK8sApiAppsV1StatefulSetCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * A human readable message indicating details about the transition.
         */
        message?: string;
        /**
         * The reason for the condition's last transition.
         */
        reason?: string;
        /**
         * Status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * Type of statefulset condition.
         */
        type: string;
      }

      /**
       * StatefulSetList is a collection of StatefulSets.
       */
      interface IoK8sApiAppsV1StatefulSetList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of stateful sets.
         */
        items: $schemas.IoK8sApiAppsV1StatefulSet[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.
       */
      interface IoK8sApiAppsV1StatefulSetOrdinals {
        /**
         * start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:
         *   [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).
         * If unset, defaults to 0. Replica indices will be in the range:
         *   [0, .spec.replicas).
         * @format int32
         */
        start?: number;
      }

      /**
       * StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.
       */
      interface IoK8sApiAppsV1StatefulSetPersistentVolumeClaimRetentionPolicy {
        /**
         * WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.
         */
        whenDeleted?: string;
        /**
         * WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.
         */
        whenScaled?: string;
      }

      /**
       * A StatefulSetSpec is the specification of a StatefulSet.
       */
      interface IoK8sApiAppsV1StatefulSetSpec {
        /**
         * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
         * @format int32
         */
        minReadySeconds?: number;
        /**
         * StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.
         */
        ordinals?: $schemas.IoK8sApiAppsV1StatefulSetOrdinals;
        /**
         * StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.
         */
        persistentVolumeClaimRetentionPolicy?: $schemas.IoK8sApiAppsV1StatefulSetPersistentVolumeClaimRetentionPolicy;
        /**
         * podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
         */
        podManagementPolicy?: string;
        /**
         * replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
         * @format int32
         */
        replicas?: number;
        /**
         * revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
         * @format int32
         */
        revisionHistoryLimit?: number;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
         */
        serviceName: string;
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        template: $schemas.IoK8sApiCoreV1PodTemplateSpec;
        /**
         * StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
         */
        updateStrategy?: $schemas.IoK8sApiAppsV1StatefulSetUpdateStrategy;
        /**
         * volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
         */
        volumeClaimTemplates?: $schemas.IoK8sApiCoreV1PersistentVolumeClaim[];
      }

      /**
       * StatefulSetStatus represents the current state of a StatefulSet.
       */
      interface IoK8sApiAppsV1StatefulSetStatus {
        /**
         * Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.
         * @format int32
         */
        availableReplicas?: number;
        /**
         * collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
         * @format int32
         */
        collisionCount?: number;
        /**
         * Represents the latest available observations of a statefulset's current state.
         */
        conditions?: $schemas.IoK8sApiAppsV1StatefulSetCondition[];
        /**
         * currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
         * @format int32
         */
        currentReplicas?: number;
        /**
         * currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
         */
        currentRevision?: string;
        /**
         * observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
         * @format int64
         */
        observedGeneration?: number | string;
        /**
         * readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
         * @format int32
         */
        readyReplicas?: number;
        /**
         * replicas is the number of Pods created by the StatefulSet controller.
         * @format int32
         */
        replicas: number;
        /**
         * updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
         */
        updateRevision?: string;
        /**
         * updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
         * @format int32
         */
        updatedReplicas?: number;
      }

      /**
       * StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
       */
      interface IoK8sApiAppsV1StatefulSetUpdateStrategy {
        /**
         * RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
         */
        rollingUpdate?: $schemas.IoK8sApiAppsV1RollingUpdateStatefulSetStrategy;
        /**
         * Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
         */
        type?: string;
      }

      /**
       * BoundObjectReference is a reference to an object that a token is bound to.
       */
      interface IoK8sApiAuthenticationV1BoundObjectReference {
        /**
         * API version of the referent.
         */
        apiVersion?: string;
        /**
         * Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
         */
        kind?: string;
        /**
         * Name of the referent.
         */
        name?: string;
        /**
         * UID of the referent.
         */
        uid?: string;
      }

      /**
       * SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
       */
      interface IoK8sApiAuthenticationV1SelfSubjectReview {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
         */
        status?: $schemas.IoK8sApiAuthenticationV1SelfSubjectReviewStatus;
      }

      /**
       * SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
       */
      interface IoK8sApiAuthenticationV1SelfSubjectReviewStatus {
        /**
         * UserInfo holds the information about the user needed to implement the user.Info interface.
         */
        userInfo?: $schemas.IoK8sApiAuthenticationV1UserInfo;
      }

      /**
       * TokenRequest requests a token for a given service account.
       */
      interface IoK8sApiAuthenticationV1TokenRequest {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * TokenRequestSpec contains client provided parameters of a token request.
         */
        spec: $schemas.IoK8sApiAuthenticationV1TokenRequestSpec;
        /**
         * TokenRequestStatus is the result of a token request.
         */
        status?: $schemas.IoK8sApiAuthenticationV1TokenRequestStatus;
      }

      /**
       * TokenRequestSpec contains client provided parameters of a token request.
       */
      interface IoK8sApiAuthenticationV1TokenRequestSpec {
        /**
         * Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
         */
        audiences: string[];
        /**
         * BoundObjectReference is a reference to an object that a token is bound to.
         */
        boundObjectRef?: $schemas.IoK8sApiAuthenticationV1BoundObjectReference;
        /**
         * ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
         * @format int64
         */
        expirationSeconds?: number | string;
      }

      /**
       * TokenRequestStatus is the result of a token request.
       */
      interface IoK8sApiAuthenticationV1TokenRequestStatus {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        expirationTimestamp: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Token is the opaque bearer token.
         */
        token: string;
      }

      /**
       * TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
       */
      interface IoK8sApiAuthenticationV1TokenReview {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * TokenReviewSpec is a description of the token authentication request.
         */
        spec: $schemas.IoK8sApiAuthenticationV1TokenReviewSpec;
        /**
         * TokenReviewStatus is the result of the token authentication request.
         */
        status?: $schemas.IoK8sApiAuthenticationV1TokenReviewStatus;
      }

      /**
       * TokenReviewSpec is a description of the token authentication request.
       */
      interface IoK8sApiAuthenticationV1TokenReviewSpec {
        /**
         * Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
         */
        audiences?: string[];
        /**
         * Token is the opaque bearer token.
         */
        token?: string;
      }

      /**
       * TokenReviewStatus is the result of the token authentication request.
       */
      interface IoK8sApiAuthenticationV1TokenReviewStatus {
        /**
         * Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
         */
        audiences?: string[];
        /**
         * Authenticated indicates that the token was associated with a known user.
         */
        authenticated?: boolean;
        /**
         * Error indicates that the token couldn't be checked
         */
        error?: string;
        /**
         * UserInfo holds the information about the user needed to implement the user.Info interface.
         */
        user?: $schemas.IoK8sApiAuthenticationV1UserInfo;
      }

      /**
       * UserInfo holds the information about the user needed to implement the user.Info interface.
       */
      interface IoK8sApiAuthenticationV1UserInfo {
        /**
         * Any additional information provided by the authenticator.
         */
        extra?: {
          [P: string]: string[];
        };
        /**
         * The names of groups this user is a part of.
         */
        groups?: string[];
        /**
         * A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
         */
        uid?: string;
        /**
         * The name that uniquely identifies this user among all active users.
         */
        username?: string;
      }

      /**
       * SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
       */
      interface IoK8sApiAuthenticationV1alpha1SelfSubjectReview {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
         */
        status?: $schemas.IoK8sApiAuthenticationV1alpha1SelfSubjectReviewStatus;
      }

      /**
       * SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
       */
      interface IoK8sApiAuthenticationV1alpha1SelfSubjectReviewStatus {
        /**
         * UserInfo holds the information about the user needed to implement the user.Info interface.
         */
        userInfo?: $schemas.IoK8sApiAuthenticationV1UserInfo;
      }

      /**
       * SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.
       */
      interface IoK8sApiAuthenticationV1beta1SelfSubjectReview {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
         */
        status?: $schemas.IoK8sApiAuthenticationV1beta1SelfSubjectReviewStatus;
      }

      /**
       * SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.
       */
      interface IoK8sApiAuthenticationV1beta1SelfSubjectReviewStatus {
        /**
         * UserInfo holds the information about the user needed to implement the user.Info interface.
         */
        userInfo?: $schemas.IoK8sApiAuthenticationV1UserInfo;
      }

      /**
       * FieldSelectorAttributes indicates a field limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.
       */
      interface IoK8sApiAuthorizationV1FieldSelectorAttributes {
        /**
         * rawSelector is the serialization of a field selector that would be included in a query parameter. Webhook implementations are encouraged to ignore rawSelector. The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present.
         */
        rawSelector?: string;
        /**
         * requirements is the parsed interpretation of a field selector. All requirements must be met for a resource instance to match the selector. Webhook implementations should handle requirements, but how to handle them is up to the webhook. Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements are not understood.
         */
        requirements?: $schemas.IoK8sApimachineryPkgApisMetaV1FieldSelectorRequirement[];
      }

      /**
       * LabelSelectorAttributes indicates a label limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.
       */
      interface IoK8sApiAuthorizationV1LabelSelectorAttributes {
        /**
         * rawSelector is the serialization of a field selector that would be included in a query parameter. Webhook implementations are encouraged to ignore rawSelector. The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present.
         */
        rawSelector?: string;
        /**
         * requirements is the parsed interpretation of a label selector. All requirements must be met for a resource instance to match the selector. Webhook implementations should handle requirements, but how to handle them is up to the webhook. Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements are not understood.
         */
        requirements?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement[];
      }

      /**
       * LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
       */
      interface IoK8sApiAuthorizationV1LocalSubjectAccessReview {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
         */
        spec: $schemas.IoK8sApiAuthorizationV1SubjectAccessReviewSpec;
        /**
         * SubjectAccessReviewStatus
         */
        status?: $schemas.IoK8sApiAuthorizationV1SubjectAccessReviewStatus;
      }

      /**
       * NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
       */
      interface IoK8sApiAuthorizationV1NonResourceAttributes {
        /**
         * Path is the URL path of the request
         */
        path?: string;
        /**
         * Verb is the standard HTTP verb
         */
        verb?: string;
      }

      /**
       * NonResourceRule holds information that describes a rule for the non-resource
       */
      interface IoK8sApiAuthorizationV1NonResourceRule {
        /**
         * NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
         */
        nonResourceURLs?: string[];
        /**
         * Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
         */
        verbs: string[];
      }

      /**
       * ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
       */
      interface IoK8sApiAuthorizationV1ResourceAttributes {
        /**
         * FieldSelectorAttributes indicates a field limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.
         */
        fieldSelector?: $schemas.IoK8sApiAuthorizationV1FieldSelectorAttributes;
        /**
         * Group is the API Group of the Resource.  "*" means all.
         */
        group?: string;
        /**
         * LabelSelectorAttributes indicates a label limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.
         */
        labelSelector?: $schemas.IoK8sApiAuthorizationV1LabelSelectorAttributes;
        /**
         * Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
         */
        name?: string;
        /**
         * Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
         */
        namespace?: string;
        /**
         * Resource is one of the existing resource types.  "*" means all.
         */
        resource?: string;
        /**
         * Subresource is one of the existing resource types.  "" means none.
         */
        subresource?: string;
        /**
         * Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
         */
        verb?: string;
        /**
         * Version is the API Version of the Resource.  "*" means all.
         */
        version?: string;
      }

      /**
       * ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
       */
      interface IoK8sApiAuthorizationV1ResourceRule {
        /**
         * APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
         */
        apiGroups?: string[];
        /**
         * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
         */
        resourceNames?: string[];
        /**
         * Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
         *  "*\/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
         */
        resources?: string[];
        /**
         * Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
         */
        verbs: string[];
      }

      /**
       * SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
       */
      interface IoK8sApiAuthorizationV1SelfSubjectAccessReview {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
         */
        spec: $schemas.IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec;
        /**
         * SubjectAccessReviewStatus
         */
        status?: $schemas.IoK8sApiAuthorizationV1SubjectAccessReviewStatus;
      }

      /**
       * SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
       */
      interface IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec {
        /**
         * NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
         */
        nonResourceAttributes?: $schemas.IoK8sApiAuthorizationV1NonResourceAttributes;
        /**
         * ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
         */
        resourceAttributes?: $schemas.IoK8sApiAuthorizationV1ResourceAttributes;
      }

      /**
       * SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
       */
      interface IoK8sApiAuthorizationV1SelfSubjectRulesReview {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
         */
        spec: $schemas.IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec;
        /**
         * SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
         */
        status?: $schemas.IoK8sApiAuthorizationV1SubjectRulesReviewStatus;
      }

      /**
       * SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
       */
      interface IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec {
        /**
         * Namespace to evaluate rules for. Required.
         */
        namespace?: string;
      }

      /**
       * SubjectAccessReview checks whether or not a user or group can perform an action.
       */
      interface IoK8sApiAuthorizationV1SubjectAccessReview {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
         */
        spec: $schemas.IoK8sApiAuthorizationV1SubjectAccessReviewSpec;
        /**
         * SubjectAccessReviewStatus
         */
        status?: $schemas.IoK8sApiAuthorizationV1SubjectAccessReviewStatus;
      }

      /**
       * SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
       */
      interface IoK8sApiAuthorizationV1SubjectAccessReviewSpec {
        /**
         * Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
         */
        extra?: {
          [P: string]: string[];
        };
        /**
         * Groups is the groups you're testing for.
         */
        groups?: string[];
        /**
         * NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
         */
        nonResourceAttributes?: $schemas.IoK8sApiAuthorizationV1NonResourceAttributes;
        /**
         * ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
         */
        resourceAttributes?: $schemas.IoK8sApiAuthorizationV1ResourceAttributes;
        /**
         * UID information about the requesting user.
         */
        uid?: string;
        /**
         * User is the user you're testing for. If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
         */
        user?: string;
      }

      /**
       * SubjectAccessReviewStatus
       */
      interface IoK8sApiAuthorizationV1SubjectAccessReviewStatus {
        /**
         * Allowed is required. True if the action would be allowed, false otherwise.
         */
        allowed: boolean;
        /**
         * Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
         */
        denied?: boolean;
        /**
         * EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
         */
        evaluationError?: string;
        /**
         * Reason is optional.  It indicates why a request was allowed or denied.
         */
        reason?: string;
      }

      /**
       * SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
       */
      interface IoK8sApiAuthorizationV1SubjectRulesReviewStatus {
        /**
         * EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
         */
        evaluationError?: string;
        /**
         * Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
         */
        incomplete: boolean;
        /**
         * NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
         */
        nonResourceRules: $schemas.IoK8sApiAuthorizationV1NonResourceRule[];
        /**
         * ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
         */
        resourceRules: $schemas.IoK8sApiAuthorizationV1ResourceRule[];
      }

      /**
       * CrossVersionObjectReference contains enough information to let you identify the referred resource.
       */
      interface IoK8sApiAutoscalingV1CrossVersionObjectReference {
        /**
         * apiVersion is the API version of the referent
         */
        apiVersion?: string;
        /**
         * kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind: string;
        /**
         * name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name: string;
      }

      /**
       * configuration of a horizontal pod autoscaler.
       */
      interface IoK8sApiAutoscalingV1HorizontalPodAutoscaler {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * specification of a horizontal pod autoscaler.
         */
        spec?: $schemas.IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec;
        /**
         * current status of a horizontal pod autoscaler
         */
        status?: $schemas.IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus;
      }

      /**
       * list of horizontal pod autoscaler objects.
       */
      interface IoK8sApiAutoscalingV1HorizontalPodAutoscalerList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of horizontal pod autoscaler objects.
         */
        items: $schemas.IoK8sApiAutoscalingV1HorizontalPodAutoscaler[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * specification of a horizontal pod autoscaler.
       */
      interface IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec {
        /**
         * maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
         * @format int32
         */
        maxReplicas: number;
        /**
         * minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
         * @format int32
         */
        minReplicas?: number;
        /**
         * CrossVersionObjectReference contains enough information to let you identify the referred resource.
         */
        scaleTargetRef: $schemas.IoK8sApiAutoscalingV1CrossVersionObjectReference;
        /**
         * targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
         * @format int32
         */
        targetCPUUtilizationPercentage?: number;
      }

      /**
       * current status of a horizontal pod autoscaler
       */
      interface IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus {
        /**
         * currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
         * @format int32
         */
        currentCPUUtilizationPercentage?: number;
        /**
         * currentReplicas is the current number of replicas of pods managed by this autoscaler.
         * @format int32
         */
        currentReplicas: number;
        /**
         * desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
         * @format int32
         */
        desiredReplicas: number;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastScaleTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * observedGeneration is the most recent generation observed by this autoscaler.
         * @format int64
         */
        observedGeneration?: number | string;
      }

      /**
       * Scale represents a scaling request for a resource.
       */
      interface IoK8sApiAutoscalingV1Scale {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ScaleSpec describes the attributes of a scale subresource.
         */
        spec?: $schemas.IoK8sApiAutoscalingV1ScaleSpec;
        /**
         * ScaleStatus represents the current status of a scale subresource.
         */
        status?: $schemas.IoK8sApiAutoscalingV1ScaleStatus;
      }

      /**
       * ScaleSpec describes the attributes of a scale subresource.
       */
      interface IoK8sApiAutoscalingV1ScaleSpec {
        /**
         * replicas is the desired number of instances for the scaled object.
         * @format int32
         */
        replicas?: number;
      }

      /**
       * ScaleStatus represents the current status of a scale subresource.
       */
      interface IoK8sApiAutoscalingV1ScaleStatus {
        /**
         * replicas is the actual number of observed instances of the scaled object.
         * @format int32
         */
        replicas: number;
        /**
         * selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
         */
        selector?: string;
      }

      /**
       * ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
       */
      interface IoK8sApiAutoscalingV2ContainerResourceMetricSource {
        /**
         * container is the name of the container in the pods of the scaling target
         */
        container: string;
        /**
         * name is the name of the resource in question.
         */
        name: string;
        /**
         * MetricTarget defines the target value, average value, or average utilization of a specific metric
         */
        target: $schemas.IoK8sApiAutoscalingV2MetricTarget;
      }

      /**
       * ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
       */
      interface IoK8sApiAutoscalingV2ContainerResourceMetricStatus {
        /**
         * container is the name of the container in the pods of the scaling target
         */
        container: string;
        /**
         * MetricValueStatus holds the current value for a metric
         */
        current: $schemas.IoK8sApiAutoscalingV2MetricValueStatus;
        /**
         * name is the name of the resource in question.
         */
        name: string;
      }

      /**
       * CrossVersionObjectReference contains enough information to let you identify the referred resource.
       */
      interface IoK8sApiAutoscalingV2CrossVersionObjectReference {
        /**
         * apiVersion is the API version of the referent
         */
        apiVersion?: string;
        /**
         * kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind: string;
        /**
         * name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name: string;
      }

      /**
       * ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
       */
      interface IoK8sApiAutoscalingV2ExternalMetricSource {
        /**
         * MetricIdentifier defines the name and optionally selector for a metric
         */
        metric: $schemas.IoK8sApiAutoscalingV2MetricIdentifier;
        /**
         * MetricTarget defines the target value, average value, or average utilization of a specific metric
         */
        target: $schemas.IoK8sApiAutoscalingV2MetricTarget;
      }

      /**
       * ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
       */
      interface IoK8sApiAutoscalingV2ExternalMetricStatus {
        /**
         * MetricValueStatus holds the current value for a metric
         */
        current: $schemas.IoK8sApiAutoscalingV2MetricValueStatus;
        /**
         * MetricIdentifier defines the name and optionally selector for a metric
         */
        metric: $schemas.IoK8sApiAutoscalingV2MetricIdentifier;
      }

      /**
       * HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
       */
      interface IoK8sApiAutoscalingV2HorizontalPodAutoscaler {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
         */
        spec?: $schemas.IoK8sApiAutoscalingV2HorizontalPodAutoscalerSpec;
        /**
         * HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
         */
        status?: $schemas.IoK8sApiAutoscalingV2HorizontalPodAutoscalerStatus;
      }

      /**
       * HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
       */
      interface IoK8sApiAutoscalingV2HorizontalPodAutoscalerBehavior {
        /**
         * HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
         */
        scaleDown?: $schemas.IoK8sApiAutoscalingV2HpaScalingRules;
        /**
         * HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
         */
        scaleUp?: $schemas.IoK8sApiAutoscalingV2HpaScalingRules;
      }

      /**
       * HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
       */
      interface IoK8sApiAutoscalingV2HorizontalPodAutoscalerCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * message is a human-readable explanation containing details about the transition
         */
        message?: string;
        /**
         * reason is the reason for the condition's last transition.
         */
        reason?: string;
        /**
         * status is the status of the condition (True, False, Unknown)
         */
        status: string;
        /**
         * type describes the current condition
         */
        type: string;
      }

      /**
       * HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.
       */
      interface IoK8sApiAutoscalingV2HorizontalPodAutoscalerList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of horizontal pod autoscaler objects.
         */
        items: $schemas.IoK8sApiAutoscalingV2HorizontalPodAutoscaler[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
       */
      interface IoK8sApiAutoscalingV2HorizontalPodAutoscalerSpec {
        /**
         * HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
         */
        behavior?: $schemas.IoK8sApiAutoscalingV2HorizontalPodAutoscalerBehavior;
        /**
         * maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
         * @format int32
         */
        maxReplicas: number;
        /**
         * metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
         */
        metrics?: $schemas.IoK8sApiAutoscalingV2MetricSpec[];
        /**
         * minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
         * @format int32
         */
        minReplicas?: number;
        /**
         * CrossVersionObjectReference contains enough information to let you identify the referred resource.
         */
        scaleTargetRef: $schemas.IoK8sApiAutoscalingV2CrossVersionObjectReference;
      }

      /**
       * HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
       */
      interface IoK8sApiAutoscalingV2HorizontalPodAutoscalerStatus {
        /**
         * conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
         */
        conditions?: $schemas.IoK8sApiAutoscalingV2HorizontalPodAutoscalerCondition[];
        /**
         * currentMetrics is the last read state of the metrics used by this autoscaler.
         */
        currentMetrics?: $schemas.IoK8sApiAutoscalingV2MetricStatus[];
        /**
         * currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
         * @format int32
         */
        currentReplicas?: number;
        /**
         * desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
         * @format int32
         */
        desiredReplicas: number;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastScaleTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * observedGeneration is the most recent generation observed by this autoscaler.
         * @format int64
         */
        observedGeneration?: number | string;
      }

      /**
       * HPAScalingPolicy is a single policy which must hold true for a specified past interval.
       */
      interface IoK8sApiAutoscalingV2HpaScalingPolicy {
        /**
         * periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
         * @format int32
         */
        periodSeconds: number;
        /**
         * type is used to specify the scaling policy.
         */
        type: string;
        /**
         * value contains the amount of change which is permitted by the policy. It must be greater than zero
         * @format int32
         */
        value: number;
      }

      /**
       * HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
       */
      interface IoK8sApiAutoscalingV2HpaScalingRules {
        /**
         * policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
         */
        policies?: $schemas.IoK8sApiAutoscalingV2HpaScalingPolicy[];
        /**
         * selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
         */
        selectPolicy?: string;
        /**
         * stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
         * @format int32
         */
        stabilizationWindowSeconds?: number;
      }

      /**
       * MetricIdentifier defines the name and optionally selector for a metric
       */
      interface IoK8sApiAutoscalingV2MetricIdentifier {
        /**
         * name is the name of the given metric
         */
        name: string;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
      }

      /**
       * MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
       */
      interface IoK8sApiAutoscalingV2MetricSpec {
        /**
         * ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
         */
        containerResource?: $schemas.IoK8sApiAutoscalingV2ContainerResourceMetricSource;
        /**
         * ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
         */
        external?: $schemas.IoK8sApiAutoscalingV2ExternalMetricSource;
        /**
         * ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
         */
        object?: $schemas.IoK8sApiAutoscalingV2ObjectMetricSource;
        /**
         * PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
         */
        pods?: $schemas.IoK8sApiAutoscalingV2PodsMetricSource;
        /**
         * ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
         */
        resource?: $schemas.IoK8sApiAutoscalingV2ResourceMetricSource;
        /**
         * type is the type of metric source.  It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
         */
        type: string;
      }

      /**
       * MetricStatus describes the last-read state of a single metric.
       */
      interface IoK8sApiAutoscalingV2MetricStatus {
        /**
         * ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
         */
        containerResource?: $schemas.IoK8sApiAutoscalingV2ContainerResourceMetricStatus;
        /**
         * ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
         */
        external?: $schemas.IoK8sApiAutoscalingV2ExternalMetricStatus;
        /**
         * ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
         */
        object?: $schemas.IoK8sApiAutoscalingV2ObjectMetricStatus;
        /**
         * PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
         */
        pods?: $schemas.IoK8sApiAutoscalingV2PodsMetricStatus;
        /**
         * ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
         */
        resource?: $schemas.IoK8sApiAutoscalingV2ResourceMetricStatus;
        /**
         * type is the type of metric source.  It will be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
         */
        type: string;
      }

      /**
       * MetricTarget defines the target value, average value, or average utilization of a specific metric
       */
      interface IoK8sApiAutoscalingV2MetricTarget {
        /**
         * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
         * @format int32
         */
        averageUtilization?: number;
        /**
         * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
         *
         * The serialization format is:
         *
         * ``` <quantity>        ::= <signedNumber><suffix>
         *
         * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
         *
         * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
         *
         * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
         *
         * <decimalSI>       ::= m | "" | k | M | G | T | P | E
         *
         * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
         *
         * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
         *
         * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
         *
         * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
         *
         * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
         *
         * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
         *
         * The sign will be omitted unless the number is negative.
         *
         * Examples:
         *
         * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
         *
         * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
         *
         * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
         *
         * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
         */
        averageValue?: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        /**
         * type represents whether the metric type is Utilization, Value, or AverageValue
         */
        type: string;
        /**
         * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
         *
         * The serialization format is:
         *
         * ``` <quantity>        ::= <signedNumber><suffix>
         *
         * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
         *
         * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
         *
         * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
         *
         * <decimalSI>       ::= m | "" | k | M | G | T | P | E
         *
         * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
         *
         * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
         *
         * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
         *
         * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
         *
         * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
         *
         * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
         *
         * The sign will be omitted unless the number is negative.
         *
         * Examples:
         *
         * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
         *
         * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
         *
         * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
         *
         * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
         */
        value?: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
      }

      /**
       * MetricValueStatus holds the current value for a metric
       */
      interface IoK8sApiAutoscalingV2MetricValueStatus {
        /**
         * currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
         * @format int32
         */
        averageUtilization?: number;
        /**
         * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
         *
         * The serialization format is:
         *
         * ``` <quantity>        ::= <signedNumber><suffix>
         *
         * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
         *
         * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
         *
         * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
         *
         * <decimalSI>       ::= m | "" | k | M | G | T | P | E
         *
         * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
         *
         * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
         *
         * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
         *
         * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
         *
         * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
         *
         * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
         *
         * The sign will be omitted unless the number is negative.
         *
         * Examples:
         *
         * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
         *
         * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
         *
         * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
         *
         * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
         */
        averageValue?: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        /**
         * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
         *
         * The serialization format is:
         *
         * ``` <quantity>        ::= <signedNumber><suffix>
         *
         * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
         *
         * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
         *
         * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
         *
         * <decimalSI>       ::= m | "" | k | M | G | T | P | E
         *
         * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
         *
         * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
         *
         * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
         *
         * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
         *
         * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
         *
         * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
         *
         * The sign will be omitted unless the number is negative.
         *
         * Examples:
         *
         * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
         *
         * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
         *
         * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
         *
         * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
         */
        value?: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
      }

      /**
       * ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
       */
      interface IoK8sApiAutoscalingV2ObjectMetricSource {
        /**
         * CrossVersionObjectReference contains enough information to let you identify the referred resource.
         */
        describedObject: $schemas.IoK8sApiAutoscalingV2CrossVersionObjectReference;
        /**
         * MetricIdentifier defines the name and optionally selector for a metric
         */
        metric: $schemas.IoK8sApiAutoscalingV2MetricIdentifier;
        /**
         * MetricTarget defines the target value, average value, or average utilization of a specific metric
         */
        target: $schemas.IoK8sApiAutoscalingV2MetricTarget;
      }

      /**
       * ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
       */
      interface IoK8sApiAutoscalingV2ObjectMetricStatus {
        /**
         * MetricValueStatus holds the current value for a metric
         */
        current: $schemas.IoK8sApiAutoscalingV2MetricValueStatus;
        /**
         * CrossVersionObjectReference contains enough information to let you identify the referred resource.
         */
        describedObject: $schemas.IoK8sApiAutoscalingV2CrossVersionObjectReference;
        /**
         * MetricIdentifier defines the name and optionally selector for a metric
         */
        metric: $schemas.IoK8sApiAutoscalingV2MetricIdentifier;
      }

      /**
       * PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
       */
      interface IoK8sApiAutoscalingV2PodsMetricSource {
        /**
         * MetricIdentifier defines the name and optionally selector for a metric
         */
        metric: $schemas.IoK8sApiAutoscalingV2MetricIdentifier;
        /**
         * MetricTarget defines the target value, average value, or average utilization of a specific metric
         */
        target: $schemas.IoK8sApiAutoscalingV2MetricTarget;
      }

      /**
       * PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
       */
      interface IoK8sApiAutoscalingV2PodsMetricStatus {
        /**
         * MetricValueStatus holds the current value for a metric
         */
        current: $schemas.IoK8sApiAutoscalingV2MetricValueStatus;
        /**
         * MetricIdentifier defines the name and optionally selector for a metric
         */
        metric: $schemas.IoK8sApiAutoscalingV2MetricIdentifier;
      }

      /**
       * ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
       */
      interface IoK8sApiAutoscalingV2ResourceMetricSource {
        /**
         * name is the name of the resource in question.
         */
        name: string;
        /**
         * MetricTarget defines the target value, average value, or average utilization of a specific metric
         */
        target: $schemas.IoK8sApiAutoscalingV2MetricTarget;
      }

      /**
       * ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
       */
      interface IoK8sApiAutoscalingV2ResourceMetricStatus {
        /**
         * MetricValueStatus holds the current value for a metric
         */
        current: $schemas.IoK8sApiAutoscalingV2MetricValueStatus;
        /**
         * name is the name of the resource in question.
         */
        name: string;
      }

      /**
       * CronJob represents the configuration of a single cron job.
       */
      interface IoK8sApiBatchV1CronJob {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * CronJobSpec describes how the job execution will look like and when it will actually run.
         */
        spec?: $schemas.IoK8sApiBatchV1CronJobSpec;
        /**
         * CronJobStatus represents the current state of a cron job.
         */
        status?: $schemas.IoK8sApiBatchV1CronJobStatus;
      }

      /**
       * CronJobList is a collection of cron jobs.
       */
      interface IoK8sApiBatchV1CronJobList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of CronJobs.
         */
        items: $schemas.IoK8sApiBatchV1CronJob[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * CronJobSpec describes how the job execution will look like and when it will actually run.
       */
      interface IoK8sApiBatchV1CronJobSpec {
        /**
         * Specifies how to treat concurrent executions of a Job. Valid values are:
         *
         * - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
         */
        concurrencyPolicy?: string;
        /**
         * The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
         * @format int32
         */
        failedJobsHistoryLimit?: number;
        /**
         * JobTemplateSpec describes the data a Job should have when created from a template
         */
        jobTemplate: $schemas.IoK8sApiBatchV1JobTemplateSpec;
        /**
         * The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
         */
        schedule: string;
        /**
         * Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
         * @format int64
         */
        startingDeadlineSeconds?: number | string;
        /**
         * The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
         * @format int32
         */
        successfulJobsHistoryLimit?: number;
        /**
         * This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
         */
        suspend?: boolean;
        /**
         * The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
         */
        timeZone?: string;
      }

      /**
       * CronJobStatus represents the current state of a cron job.
       */
      interface IoK8sApiBatchV1CronJobStatus {
        /**
         * A list of pointers to currently running jobs.
         */
        active?: $schemas.IoK8sApiCoreV1ObjectReference[];
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastScheduleTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastSuccessfulTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
      }

      /**
       * Job represents the configuration of a single job.
       */
      interface IoK8sApiBatchV1Job {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * JobSpec describes how the job execution will look like.
         */
        spec?: $schemas.IoK8sApiBatchV1JobSpec;
        /**
         * JobStatus represents the current state of a Job.
         */
        status?: $schemas.IoK8sApiBatchV1JobStatus;
      }

      /**
       * JobCondition describes current state of a job.
       */
      interface IoK8sApiBatchV1JobCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastProbeTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Human readable message indicating details about last transition.
         */
        message?: string;
        /**
         * (brief) reason for the condition's last transition.
         */
        reason?: string;
        /**
         * Status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * Type of job condition, Complete or Failed.
         */
        type: string;
      }

      /**
       * JobList is a collection of jobs.
       */
      interface IoK8sApiBatchV1JobList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of Jobs.
         */
        items: $schemas.IoK8sApiBatchV1Job[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * JobSpec describes how the job execution will look like.
       */
      interface IoK8sApiBatchV1JobSpec {
        /**
         * Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.
         * @format int64
         */
        activeDeadlineSeconds?: number | string;
        /**
         * Specifies the number of retries before marking this job failed. Defaults to 6
         * @format int32
         */
        backoffLimit?: number;
        /**
         * Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
         * @format int32
         */
        backoffLimitPerIndex?: number;
        /**
         * completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
         *
         * `NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.
         *
         * `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.
         *
         * More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
         */
        completionMode?: string;
        /**
         * Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
         * @format int32
         */
        completions?: number;
        /**
         * ManagedBy field indicates the controller that manages a Job. The k8s Job controller reconciles jobs which don't have this field at all or the field value is the reserved string `kubernetes.io/job-controller`, but skips reconciling Jobs with a custom value for this field. The value must be a valid domain-prefixed path (e.g. acme.io/foo) - all characters before the first "/" must be a valid subdomain as defined by RFC 1123. All characters trailing the first "/" must be valid HTTP Path characters as defined by RFC 3986. The value cannot exceed 63 characters. This field is immutable.
         *
         * This field is alpha-level. The job controller accepts setting the field when the feature gate JobManagedBy is enabled (disabled by default).
         */
        managedBy?: string;
        /**
         * manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
         */
        manualSelector?: boolean;
        /**
         * Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
         * @format int32
         */
        maxFailedIndexes?: number;
        /**
         * Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
         * @format int32
         */
        parallelism?: number;
        /**
         * PodFailurePolicy describes how failed pods influence the backoffLimit.
         */
        podFailurePolicy?: $schemas.IoK8sApiBatchV1PodFailurePolicy;
        /**
         * podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods
         *   when they are terminating (has a metadata.deletionTimestamp) or failed.
         * - Failed means to wait until a previously created Pod is fully terminated (has phase
         *   Failed or Succeeded) before creating a replacement Pod.
         *
         * When using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.
         */
        podReplacementPolicy?: string;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.
         */
        successPolicy?: $schemas.IoK8sApiBatchV1SuccessPolicy;
        /**
         * suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.
         */
        suspend?: boolean;
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        template: $schemas.IoK8sApiCoreV1PodTemplateSpec;
        /**
         * ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
         * @format int32
         */
        ttlSecondsAfterFinished?: number;
      }

      /**
       * JobStatus represents the current state of a Job.
       */
      interface IoK8sApiBatchV1JobStatus {
        /**
         * The number of pending and running pods which are not terminating (without a deletionTimestamp). The value is zero for finished jobs.
         * @format int32
         */
        active?: number;
        /**
         * completedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
         */
        completedIndexes?: string;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        completionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true.
         *
         * A job is considered finished when it is in a terminal condition, either "Complete" or "Failed". A Job cannot have both the "Complete" and "Failed" conditions. Additionally, it cannot be in the "Complete" and "FailureTarget" conditions. The "Complete", "Failed" and "FailureTarget" conditions cannot be disabled.
         *
         * More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
         */
        conditions?: $schemas.IoK8sApiBatchV1JobCondition[];
        /**
         * The number of pods which reached phase Failed. The value increases monotonically.
         * @format int32
         */
        failed?: number;
        /**
         * FailedIndexes holds the failed indexes when spec.backoffLimitPerIndex is set. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7". The set of failed indexes cannot overlap with the set of completed indexes.
         *
         * This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
         */
        failedIndexes?: string;
        /**
         * The number of active pods which have a Ready condition and are not terminating (without a deletionTimestamp).
         * @format int32
         */
        ready?: number;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        startTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * The number of pods which reached phase Succeeded. The value increases monotonically for a given spec. However, it may decrease in reaction to scale down of elastic indexed jobs.
         * @format int32
         */
        succeeded?: number;
        /**
         * The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).
         *
         * This field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).
         * @format int32
         */
        terminating?: number;
        /**
         * UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
         */
        uncountedTerminatedPods?: $schemas.IoK8sApiBatchV1UncountedTerminatedPods;
      }

      /**
       * JobTemplateSpec describes the data a Job should have when created from a template
       */
      interface IoK8sApiBatchV1JobTemplateSpec {
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * JobSpec describes how the job execution will look like.
         */
        spec?: $schemas.IoK8sApiBatchV1JobSpec;
      }

      /**
       * PodFailurePolicy describes how failed pods influence the backoffLimit.
       */
      interface IoK8sApiBatchV1PodFailurePolicy {
        /**
         * A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
         */
        rules: $schemas.IoK8sApiBatchV1PodFailurePolicyRule[];
      }

      /**
       * PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
       */
      interface IoK8sApiBatchV1PodFailurePolicyOnExitCodesRequirement {
        /**
         * Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.
         */
        containerName?: string;
        /**
         * Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:
         *
         * - In: the requirement is satisfied if at least one container exit code
         *   (might be multiple if there are multiple containers not restricted
         *   by the 'containerName' field) is in the set of specified values.
         * - NotIn: the requirement is satisfied if at least one container exit code
         *   (might be multiple if there are multiple containers not restricted
         *   by the 'containerName' field) is not in the set of specified values.
         * Additional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.
         */
        operator: string;
        /**
         * Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.
         */
        values: number[];
      }

      /**
       * PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
       */
      interface IoK8sApiBatchV1PodFailurePolicyOnPodConditionsPattern {
        /**
         * Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.
         */
        status: string;
        /**
         * Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.
         */
        type: string;
      }

      /**
       * PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
       */
      interface IoK8sApiBatchV1PodFailurePolicyRule {
        /**
         * Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:
         *
         * - FailJob: indicates that the pod's job is marked as Failed and all
         *   running pods are terminated.
         * - FailIndex: indicates that the pod's index is marked as Failed and will
         *   not be restarted.
         *   This value is beta-level. It can be used when the
         *   `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
         * - Ignore: indicates that the counter towards the .backoffLimit is not
         *   incremented and a replacement pod is created.
         * - Count: indicates that the pod is handled in the default way - the
         *   counter towards the .backoffLimit is incremented.
         * Additional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.
         */
        action: string;
        /**
         * PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
         */
        onExitCodes?: $schemas.IoK8sApiBatchV1PodFailurePolicyOnExitCodesRequirement;
        /**
         * Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
         */
        onPodConditions?: $schemas.IoK8sApiBatchV1PodFailurePolicyOnPodConditionsPattern[];
      }

      /**
       * SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.
       */
      interface IoK8sApiBatchV1SuccessPolicy {
        /**
         * rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded >= .spec.completions`. Once any of the rules are met, the "SucceededCriteriaMet" condition is added, and the lingering pods are removed. The terminal state for such a Job has the "Complete" condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.
         */
        rules: $schemas.IoK8sApiBatchV1SuccessPolicyRule[];
      }

      /**
       * SuccessPolicyRule describes rule for declaring a Job as succeeded. Each rule must have at least one of the "succeededIndexes" or "succeededCount" specified.
       */
      interface IoK8sApiBatchV1SuccessPolicyRule {
        /**
         * succeededCount specifies the minimal required size of the actual set of the succeeded indexes for the Job. When succeededCount is used along with succeededIndexes, the check is constrained only to the set of indexes specified by succeededIndexes. For example, given that succeededIndexes is "1-4", succeededCount is "3", and completed indexes are "1", "3", and "5", the Job isn't declared as succeeded because only "1" and "3" indexes are considered in that rules. When this field is null, this doesn't default to any value and is never evaluated at any time. When specified it needs to be a positive integer.
         * @format int32
         */
        succeededCount?: number;
        /**
         * succeededIndexes specifies the set of indexes which need to be contained in the actual set of the succeeded indexes for the Job. The list of indexes must be within 0 to ".spec.completions-1" and must not contain duplicates. At least one element is required. The indexes are represented as intervals separated by commas. The intervals can be a decimal integer or a pair of decimal integers separated by a hyphen. The number are listed in represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7". When this field is null, this field doesn't default to any value and is never evaluated at any time.
         */
        succeededIndexes?: string;
      }

      /**
       * UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
       */
      interface IoK8sApiBatchV1UncountedTerminatedPods {
        /**
         * failed holds UIDs of failed Pods.
         */
        failed?: string[];
        /**
         * succeeded holds UIDs of succeeded Pods.
         */
        succeeded?: string[];
      }

      /**
       * CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.
       *
       * Kubelets use this API to obtain:
       *  1. client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client-kubelet" signerName).
       *  2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the "kubernetes.io/kubelet-serving" signerName).
       *
       * This API can be used to request client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom non-Kubernetes signers.
       */
      interface IoK8sApiCertificatesV1CertificateSigningRequest {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * CertificateSigningRequestSpec contains the certificate request.
         */
        spec: $schemas.IoK8sApiCertificatesV1CertificateSigningRequestSpec;
        /**
         * CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.
         */
        status?: $schemas.IoK8sApiCertificatesV1CertificateSigningRequestStatus;
      }

      /**
       * CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
       */
      interface IoK8sApiCertificatesV1CertificateSigningRequestCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastUpdateTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * message contains a human readable message with details about the request state
         */
        message?: string;
        /**
         * reason indicates a brief reason for the request state
         */
        reason?: string;
        /**
         * status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown".
         */
        status: string;
        /**
         * type of the condition. Known conditions are "Approved", "Denied", and "Failed".
         *
         * An "Approved" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.
         *
         * A "Denied" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.
         *
         * A "Failed" condition is added via the /status subresource, indicating the signer failed to issue the certificate.
         *
         * Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.
         *
         * Only one condition of a given type is allowed.
         */
        type: string;
      }

      /**
       * CertificateSigningRequestList is a collection of CertificateSigningRequest objects
       */
      interface IoK8sApiCertificatesV1CertificateSigningRequestList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is a collection of CertificateSigningRequest objects
         */
        items: $schemas.IoK8sApiCertificatesV1CertificateSigningRequest[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * CertificateSigningRequestSpec contains the certificate request.
       */
      interface IoK8sApiCertificatesV1CertificateSigningRequestSpec {
        /**
         * expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.
         *
         * The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.
         *
         * Certificate signers may not honor this field for various reasons:
         *
         *   1. Old signer that is unaware of the field (such as the in-tree
         *      implementations prior to v1.22)
         *   2. Signer whose configured maximum is shorter than the requested duration
         *   3. Signer whose configured minimum is longer than the requested duration
         *
         * The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.
         * @format int32
         */
        expirationSeconds?: number;
        /**
         * extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
         */
        extra?: {
          [P: string]: string[];
        };
        /**
         * groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
         */
        groups?: string[];
        /**
         * request contains an x509 certificate signing request encoded in a "CERTIFICATE REQUEST" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.
         * @format byte
         */
        request: string;
        /**
         * signerName indicates the requested signer, and is a qualified name.
         *
         * List/watch requests for CertificateSigningRequests can filter on this field using a "spec.signerName=NAME" fieldSelector.
         *
         * Well-known Kubernetes signers are:
         *  1. "kubernetes.io/kube-apiserver-client": issues client certificates that can be used to authenticate to kube-apiserver.
         *   Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the "csrsigning" controller in kube-controller-manager.
         *  2. "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates that kubelets use to authenticate to kube-apiserver.
         *   Requests for this signer can be auto-approved by the "csrapproving" controller in kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
         *  3. "kubernetes.io/kubelet-serving" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.
         *   Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
         *
         * More details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
         *
         * Custom signerNames can also be specified. The signer defines:
         *  1. Trust distribution: how trust (CA bundles) are distributed.
         *  2. Permitted subjects: and behavior when a disallowed subject is requested.
         *  3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.
         *  4. Required, permitted, or forbidden key usages / extended key usages.
         *  5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.
         *  6. Whether or not requests for CA certificates are allowed.
         */
        signerName: string;
        /**
         * uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
         */
        uid?: string;
        /**
         * usages specifies a set of key usages requested in the issued certificate.
         *
         * Requests for TLS client certificates typically request: "digital signature", "key encipherment", "client auth".
         *
         * Requests for TLS serving certificates typically request: "key encipherment", "digital signature", "server auth".
         *
         * Valid values are:
         *  "signing", "digital signature", "content commitment",
         *  "key encipherment", "key agreement", "data encipherment",
         *  "cert sign", "crl sign", "encipher only", "decipher only", "any",
         *  "server auth", "client auth",
         *  "code signing", "email protection", "s/mime",
         *  "ipsec end system", "ipsec tunnel", "ipsec user",
         *  "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
         */
        usages?: string[];
        /**
         * username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
         */
        username?: string;
      }

      /**
       * CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.
       */
      interface IoK8sApiCertificatesV1CertificateSigningRequestStatus {
        /**
         * certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.
         *
         * If the certificate signing request is denied, a condition of type "Denied" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type "Failed" is added and this field remains empty.
         *
         * Validation requirements:
         *  1. certificate must contain one or more PEM blocks.
         *  2. All PEM blocks must have the "CERTIFICATE" label, contain no headers, and the encoded data
         *   must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.
         *  3. Non-PEM content may appear before or after the "CERTIFICATE" PEM blocks and is unvalidated,
         *   to allow for explanatory text as described in section 5.2 of RFC7468.
         *
         * If more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.
         *
         * The certificate is encoded in PEM format.
         *
         * When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:
         *
         *     base64(
         *     -----BEGIN CERTIFICATE-----
         *     ...
         *     -----END CERTIFICATE-----
         *     )
         * @format byte
         */
        certificate?: string;
        /**
         * conditions applied to the request. Known conditions are "Approved", "Denied", and "Failed".
         */
        conditions?: $schemas.IoK8sApiCertificatesV1CertificateSigningRequestCondition[];
      }

      /**
       * ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
       *
       * ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
       *
       * It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
       */
      interface IoK8sApiCertificatesV1alpha1ClusterTrustBundle {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ClusterTrustBundleSpec contains the signer and trust anchors.
         */
        spec: $schemas.IoK8sApiCertificatesV1alpha1ClusterTrustBundleSpec;
      }

      /**
       * ClusterTrustBundleList is a collection of ClusterTrustBundle objects
       */
      interface IoK8sApiCertificatesV1alpha1ClusterTrustBundleList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is a collection of ClusterTrustBundle objects
         */
        items: $schemas.IoK8sApiCertificatesV1alpha1ClusterTrustBundle[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ClusterTrustBundleSpec contains the signer and trust anchors.
       */
      interface IoK8sApiCertificatesV1alpha1ClusterTrustBundleSpec {
        /**
         * signerName indicates the associated signer, if any.
         *
         * In order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.
         *
         * If signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.
         *
         * If signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.
         *
         * List/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.
         */
        signerName?: string;
        /**
         * trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
         *
         * The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.
         *
         * Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.
         */
        trustBundle: string;
      }

      /**
       * Lease defines a lease concept.
       */
      interface IoK8sApiCoordinationV1Lease {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * LeaseSpec is a specification of a Lease.
         */
        spec?: $schemas.IoK8sApiCoordinationV1LeaseSpec;
      }

      /**
       * LeaseList is a list of Lease objects.
       */
      interface IoK8sApiCoordinationV1LeaseList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is a list of schema objects.
         */
        items: $schemas.IoK8sApiCoordinationV1Lease[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * LeaseSpec is a specification of a Lease.
       */
      interface IoK8sApiCoordinationV1LeaseSpec {
        /**
         * MicroTime is version of Time with microsecond level precision.
         * @format date-time
         */
        acquireTime?: $schemas.IoK8sApimachineryPkgApisMetaV1MicroTime;
        /**
         * holderIdentity contains the identity of the holder of a current lease. If Coordinated Leader Election is used, the holder identity must be equal to the elected LeaseCandidate.metadata.name field.
         */
        holderIdentity?: string;
        /**
         * leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measured against the time of last observed renewTime.
         * @format int32
         */
        leaseDurationSeconds?: number;
        /**
         * leaseTransitions is the number of transitions of a lease between holders.
         * @format int32
         */
        leaseTransitions?: number;
        /**
         * PreferredHolder signals to a lease holder that the lease has a more optimal holder and should be given up. This field can only be set if Strategy is also set.
         */
        preferredHolder?: string;
        /**
         * MicroTime is version of Time with microsecond level precision.
         * @format date-time
         */
        renewTime?: $schemas.IoK8sApimachineryPkgApisMetaV1MicroTime;
        /**
         * Strategy indicates the strategy for picking the leader for coordinated leader election. If the field is not specified, there is no active coordination for this lease. (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
         */
        strategy?: string;
      }

      /**
       * LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
       */
      interface IoK8sApiCoordinationV1alpha1LeaseCandidate {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * LeaseCandidateSpec is a specification of a Lease.
         */
        spec?: $schemas.IoK8sApiCoordinationV1alpha1LeaseCandidateSpec;
      }

      /**
       * LeaseCandidateList is a list of Lease objects.
       */
      interface IoK8sApiCoordinationV1alpha1LeaseCandidateList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is a list of schema objects.
         */
        items: $schemas.IoK8sApiCoordinationV1alpha1LeaseCandidate[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * LeaseCandidateSpec is a specification of a Lease.
       */
      interface IoK8sApiCoordinationV1alpha1LeaseCandidateSpec {
        /**
         * BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required when strategy is "OldestEmulationVersion"
         */
        binaryVersion?: string;
        /**
         * EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
         */
        emulationVersion?: string;
        /**
         * LeaseName is the name of the lease for which this candidate is contending. This field is immutable.
         */
        leaseName: string;
        /**
         * MicroTime is version of Time with microsecond level precision.
         * @format date-time
         */
        pingTime?: $schemas.IoK8sApimachineryPkgApisMetaV1MicroTime;
        /**
         * PreferredStrategies indicates the list of strategies for picking the leader for coordinated leader election. The list is ordered, and the first strategy supersedes all other strategies. The list is used by coordinated leader election to make a decision about the final election strategy. This follows as - If all clients have strategy X as the first element in this list, strategy X will be used. - If a candidate has strategy [X] and another candidate has strategy [Y, X], Y supersedes X and strategy Y
         *   will be used.
         * - If a candidate has strategy [X, Y] and another candidate has strategy [Y, X], this is a user error and leader
         *   election will not operate the Lease until resolved.
         * (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
         */
        preferredStrategies: string[];
        /**
         * MicroTime is version of Time with microsecond level precision.
         * @format date-time
         */
        renewTime?: $schemas.IoK8sApimachineryPkgApisMetaV1MicroTime;
      }

      /**
       * Affinity is a group of affinity scheduling rules.
       */
      interface IoK8sApiCoreV1Affinity {
        /**
         * Node affinity is a group of node affinity scheduling rules.
         */
        nodeAffinity?: $schemas.IoK8sApiCoreV1NodeAffinity;
        /**
         * Pod affinity is a group of inter pod affinity scheduling rules.
         */
        podAffinity?: $schemas.IoK8sApiCoreV1PodAffinity;
        /**
         * Pod anti affinity is a group of inter pod anti affinity scheduling rules.
         */
        podAntiAffinity?: $schemas.IoK8sApiCoreV1PodAntiAffinity;
      }

      /**
       * AppArmorProfile defines a pod or container's AppArmor settings.
       */
      interface IoK8sApiCoreV1AppArmorProfile {
        /**
         * localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is "Localhost".
         */
        localhostProfile?: string;
        /**
         * type indicates which kind of AppArmor profile will be applied. Valid options are:
         *   Localhost - a profile pre-loaded on the node.
         *   RuntimeDefault - the container runtime's default profile.
         *   Unconfined - no AppArmor enforcement.
         */
        type: string;
      }

      /**
       * AttachedVolume describes a volume attached to a node
       */
      interface IoK8sApiCoreV1AttachedVolume {
        /**
         * DevicePath represents the device path where the volume should be available
         */
        devicePath: string;
        /**
         * Name of the attached volume
         */
        name: string;
      }

      /**
       * Represents a Persistent Disk resource in AWS.
       *
       * An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1AwsElasticBlockStoreVolumeSource {
        /**
         * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        fsType?: string;
        /**
         * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
         * @format int32
         */
        partition?: number;
        /**
         * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        readOnly?: boolean;
        /**
         * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        volumeID: string;
      }

      /**
       * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
       */
      interface IoK8sApiCoreV1AzureDiskVolumeSource {
        /**
         * cachingMode is the Host Caching mode: None, Read Only, Read Write.
         */
        cachingMode?: string;
        /**
         * diskName is the Name of the data disk in the blob storage
         */
        diskName: string;
        /**
         * diskURI is the URI of data disk in the blob storage
         */
        diskURI: string;
        /**
         * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
         */
        fsType?: string;
        /**
         * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
         */
        kind?: string;
        /**
         * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
      }

      /**
       * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
       */
      interface IoK8sApiCoreV1AzureFilePersistentVolumeSource {
        /**
         * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
        /**
         * secretName is the name of secret that contains Azure Storage Account Name and Key
         */
        secretName: string;
        /**
         * secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
         */
        secretNamespace?: string;
        /**
         * shareName is the azure Share Name
         */
        shareName: string;
      }

      /**
       * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
       */
      interface IoK8sApiCoreV1AzureFileVolumeSource {
        /**
         * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
        /**
         * secretName is the  name of secret that contains Azure Storage Account Name and Key
         */
        secretName: string;
        /**
         * shareName is the azure share Name
         */
        shareName: string;
      }

      /**
       * Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
       */
      interface IoK8sApiCoreV1Binding {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        target: $schemas.IoK8sApiCoreV1ObjectReference;
      }

      /**
       * Adds and removes POSIX capabilities from running containers.
       */
      interface IoK8sApiCoreV1Capabilities {
        /**
         * Added capabilities
         */
        add?: string[];
        /**
         * Removed capabilities
         */
        drop?: string[];
      }

      /**
       * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
       */
      interface IoK8sApiCoreV1CephFsPersistentVolumeSource {
        /**
         * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        monitors: string[];
        /**
         * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
         */
        path?: string;
        /**
         * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        readOnly?: boolean;
        /**
         * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        secretFile?: string;
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        secretRef?: $schemas.IoK8sApiCoreV1SecretReference;
        /**
         * user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        user?: string;
      }

      /**
       * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
       */
      interface IoK8sApiCoreV1CephFsVolumeSource {
        /**
         * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        monitors: string[];
        /**
         * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
         */
        path?: string;
        /**
         * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        readOnly?: boolean;
        /**
         * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        secretFile?: string;
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        secretRef?: $schemas.IoK8sApiCoreV1LocalObjectReference;
        /**
         * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        user?: string;
      }

      /**
       * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1CinderPersistentVolumeSource {
        /**
         * fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        fsType?: string;
        /**
         * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        readOnly?: boolean;
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        secretRef?: $schemas.IoK8sApiCoreV1SecretReference;
        /**
         * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        volumeID: string;
      }

      /**
       * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1CinderVolumeSource {
        /**
         * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        fsType?: string;
        /**
         * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        readOnly?: boolean;
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        secretRef?: $schemas.IoK8sApiCoreV1LocalObjectReference;
        /**
         * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        volumeID: string;
      }

      /**
       * ClientIPConfig represents the configurations of Client IP based session affinity.
       */
      interface IoK8sApiCoreV1ClientIpConfig {
        /**
         * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
         * @format int32
         */
        timeoutSeconds?: number;
      }

      /**
       * ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
       */
      interface IoK8sApiCoreV1ClusterTrustBundleProjection {
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        labelSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.
         */
        name?: string;
        /**
         * If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
         */
        optional?: boolean;
        /**
         * Relative path from the volume root to write the bundle.
         */
        path: string;
        /**
         * Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.
         */
        signerName?: string;
      }

      /**
       * Information about the condition of a component.
       */
      interface IoK8sApiCoreV1ComponentCondition {
        /**
         * Condition error code for a component. For example, a health check error code.
         */
        error?: string;
        /**
         * Message about the condition for a component. For example, information about a health check.
         */
        message?: string;
        /**
         * Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
         */
        status: string;
        /**
         * Type of condition for a component. Valid value: "Healthy"
         */
        type: string;
      }

      /**
       * ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
       */
      interface IoK8sApiCoreV1ComponentStatus {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of component conditions observed
         */
        conditions?: $schemas.IoK8sApiCoreV1ComponentCondition[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
      }

      /**
       * Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+
       */
      interface IoK8sApiCoreV1ComponentStatusList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of ComponentStatus objects.
         */
        items: $schemas.IoK8sApiCoreV1ComponentStatus[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ConfigMap holds configuration data for pods to consume.
       */
      interface IoK8sApiCoreV1ConfigMap {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
         */
        binaryData?: {
          [P: string]: string;
        };
        /**
         * Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
         */
        data?: {
          [P: string]: string;
        };
        /**
         * Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
         */
        immutable?: boolean;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
      }

      /**
       * ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
       *
       * The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
       */
      interface IoK8sApiCoreV1ConfigMapEnvSource {
        /**
         * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name?: string;
        /**
         * Specify whether the ConfigMap must be defined
         */
        optional?: boolean;
      }

      /**
       * Selects a key from a ConfigMap.
       */
      interface IoK8sApiCoreV1ConfigMapKeySelector {
        /**
         * The key to select.
         */
        key: string;
        /**
         * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name?: string;
        /**
         * Specify whether the ConfigMap or its key must be defined
         */
        optional?: boolean;
      }

      /**
       * ConfigMapList is a resource containing a list of ConfigMap objects.
       */
      interface IoK8sApiCoreV1ConfigMapList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of ConfigMaps.
         */
        items: $schemas.IoK8sApiCoreV1ConfigMap[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
       */
      interface IoK8sApiCoreV1ConfigMapNodeConfigSource {
        /**
         * KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
         */
        kubeletConfigKey: string;
        /**
         * Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
         */
        name: string;
        /**
         * Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
         */
        namespace: string;
        /**
         * ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
         */
        resourceVersion?: string;
        /**
         * UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
         */
        uid?: string;
      }

      /**
       * Adapts a ConfigMap into a projected volume.
       *
       * The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
       */
      interface IoK8sApiCoreV1ConfigMapProjection {
        /**
         * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
         */
        items?: $schemas.IoK8sApiCoreV1KeyToPath[];
        /**
         * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name?: string;
        /**
         * optional specify whether the ConfigMap or its keys must be defined
         */
        optional?: boolean;
      }

      /**
       * Adapts a ConfigMap into a volume.
       *
       * The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1ConfigMapVolumeSource {
        /**
         * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
         * @format int32
         */
        defaultMode?: number;
        /**
         * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
         */
        items?: $schemas.IoK8sApiCoreV1KeyToPath[];
        /**
         * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name?: string;
        /**
         * optional specify whether the ConfigMap or its keys must be defined
         */
        optional?: boolean;
      }

      /**
       * A single application container that you want to run within a pod.
       */
      interface IoK8sApiCoreV1Container {
        /**
         * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
         */
        args?: string[];
        /**
         * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
         */
        command?: string[];
        /**
         * List of environment variables to set in the container. Cannot be updated.
         */
        env?: $schemas.IoK8sApiCoreV1EnvVar[];
        /**
         * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
         */
        envFrom?: $schemas.IoK8sApiCoreV1EnvFromSource[];
        /**
         * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
         */
        image?: string;
        /**
         * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
         */
        imagePullPolicy?: string;
        /**
         * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
         */
        lifecycle?: $schemas.IoK8sApiCoreV1Lifecycle;
        /**
         * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
         */
        livenessProbe?: $schemas.IoK8sApiCoreV1Probe;
        /**
         * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
         */
        name: string;
        /**
         * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
         */
        ports?: $schemas.IoK8sApiCoreV1ContainerPort[];
        /**
         * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
         */
        readinessProbe?: $schemas.IoK8sApiCoreV1Probe;
        /**
         * Resources resize policy for the container.
         */
        resizePolicy?: $schemas.IoK8sApiCoreV1ContainerResizePolicy[];
        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        resources?: $schemas.IoK8sApiCoreV1ResourceRequirements;
        /**
         * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
         */
        restartPolicy?: string;
        /**
         * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
         */
        securityContext?: $schemas.IoK8sApiCoreV1SecurityContext;
        /**
         * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
         */
        startupProbe?: $schemas.IoK8sApiCoreV1Probe;
        /**
         * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
         */
        stdin?: boolean;
        /**
         * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
         */
        stdinOnce?: boolean;
        /**
         * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
         */
        terminationMessagePath?: string;
        /**
         * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
         */
        terminationMessagePolicy?: string;
        /**
         * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
         */
        tty?: boolean;
        /**
         * volumeDevices is the list of block devices to be used by the container.
         */
        volumeDevices?: $schemas.IoK8sApiCoreV1VolumeDevice[];
        /**
         * Pod volumes to mount into the container's filesystem. Cannot be updated.
         */
        volumeMounts?: $schemas.IoK8sApiCoreV1VolumeMount[];
        /**
         * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
         */
        workingDir?: string;
      }

      /**
       * Describe a container image
       */
      interface IoK8sApiCoreV1ContainerImage {
        /**
         * Names by which this image is known. e.g. ["kubernetes.example/hyperkube:v1.0.7", "cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7"]
         */
        names?: string[];
        /**
         * The size of the image in bytes.
         * @format int64
         */
        sizeBytes?: number | string;
      }

      /**
       * ContainerPort represents a network port in a single container.
       */
      interface IoK8sApiCoreV1ContainerPort {
        /**
         * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
         * @format int32
         */
        containerPort: number;
        /**
         * What host IP to bind the external port to.
         */
        hostIP?: string;
        /**
         * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
         * @format int32
         */
        hostPort?: number;
        /**
         * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
         */
        name?: string;
        /**
         * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
         */
        protocol?: string;
      }

      /**
       * ContainerResizePolicy represents resource resize policy for the container.
       */
      interface IoK8sApiCoreV1ContainerResizePolicy {
        /**
         * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
         */
        resourceName: string;
        /**
         * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
         */
        restartPolicy: string;
      }

      /**
       * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
       */
      interface IoK8sApiCoreV1ContainerState {
        /**
         * ContainerStateRunning is a running state of a container.
         */
        running?: $schemas.IoK8sApiCoreV1ContainerStateRunning;
        /**
         * ContainerStateTerminated is a terminated state of a container.
         */
        terminated?: $schemas.IoK8sApiCoreV1ContainerStateTerminated;
        /**
         * ContainerStateWaiting is a waiting state of a container.
         */
        waiting?: $schemas.IoK8sApiCoreV1ContainerStateWaiting;
      }

      /**
       * ContainerStateRunning is a running state of a container.
       */
      interface IoK8sApiCoreV1ContainerStateRunning {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        startedAt?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
      }

      /**
       * ContainerStateTerminated is a terminated state of a container.
       */
      interface IoK8sApiCoreV1ContainerStateTerminated {
        /**
         * Container's ID in the format '<type>://<container_id>'
         */
        containerID?: string;
        /**
         * Exit status from the last termination of the container
         * @format int32
         */
        exitCode: number;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        finishedAt?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Message regarding the last termination of the container
         */
        message?: string;
        /**
         * (brief) reason from the last termination of the container
         */
        reason?: string;
        /**
         * Signal from the last termination of the container
         * @format int32
         */
        signal?: number;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        startedAt?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
      }

      /**
       * ContainerStateWaiting is a waiting state of a container.
       */
      interface IoK8sApiCoreV1ContainerStateWaiting {
        /**
         * Message regarding why the container is not yet running.
         */
        message?: string;
        /**
         * (brief) reason the container is not yet running.
         */
        reason?: string;
      }

      /**
       * ContainerStatus contains details for the current status of this container.
       */
      interface IoK8sApiCoreV1ContainerStatus {
        /**
         * AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
         */
        allocatedResources?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * AllocatedResourcesStatus represents the status of various resources allocated for this Pod.
         */
        allocatedResourcesStatus?: $schemas.IoK8sApiCoreV1ResourceStatus[];
        /**
         * ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
         */
        containerID?: string;
        /**
         * Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
         */
        image: string;
        /**
         * ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
         */
        imageID: string;
        /**
         * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
         */
        lastState?: $schemas.IoK8sApiCoreV1ContainerState;
        /**
         * Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
         */
        name: string;
        /**
         * Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
         *
         * The value is typically used to determine whether a container is ready to accept traffic.
         */
        ready: boolean;
        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        resources?: $schemas.IoK8sApiCoreV1ResourceRequirements;
        /**
         * RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
         * @format int32
         */
        restartCount: number;
        /**
         * Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
         */
        started?: boolean;
        /**
         * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
         */
        state?: $schemas.IoK8sApiCoreV1ContainerState;
        /**
         * ContainerUser represents user identity information
         */
        user?: $schemas.IoK8sApiCoreV1ContainerUser;
        /**
         * Status of volume mounts.
         */
        volumeMounts?: $schemas.IoK8sApiCoreV1VolumeMountStatus[];
      }

      /**
       * ContainerUser represents user identity information
       */
      interface IoK8sApiCoreV1ContainerUser {
        /**
         * LinuxContainerUser represents user identity information in Linux containers
         */
        linux?: $schemas.IoK8sApiCoreV1LinuxContainerUser;
      }

      /**
       * Represents storage that is managed by an external CSI volume driver (Beta feature)
       */
      interface IoK8sApiCoreV1CsiPersistentVolumeSource {
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        controllerExpandSecretRef?: $schemas.IoK8sApiCoreV1SecretReference;
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        controllerPublishSecretRef?: $schemas.IoK8sApiCoreV1SecretReference;
        /**
         * driver is the name of the driver to use for this volume. Required.
         */
        driver: string;
        /**
         * fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
         */
        fsType?: string;
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        nodeExpandSecretRef?: $schemas.IoK8sApiCoreV1SecretReference;
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        nodePublishSecretRef?: $schemas.IoK8sApiCoreV1SecretReference;
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        nodeStageSecretRef?: $schemas.IoK8sApiCoreV1SecretReference;
        /**
         * readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
         */
        readOnly?: boolean;
        /**
         * volumeAttributes of the volume to publish.
         */
        volumeAttributes?: {
          [P: string]: string;
        };
        /**
         * volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
         */
        volumeHandle: string;
      }

      /**
       * Represents a source location of a volume to mount, managed by an external CSI driver
       */
      interface IoK8sApiCoreV1CsiVolumeSource {
        /**
         * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
         */
        driver: string;
        /**
         * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
         */
        fsType?: string;
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        nodePublishSecretRef?: $schemas.IoK8sApiCoreV1LocalObjectReference;
        /**
         * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
         */
        readOnly?: boolean;
        /**
         * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
         */
        volumeAttributes?: {
          [P: string]: string;
        };
      }

      /**
       * DaemonEndpoint contains information about a single Daemon endpoint.
       */
      interface IoK8sApiCoreV1DaemonEndpoint {
        /**
         * Port number of the given endpoint.
         * @format int32
         */
        Port: number;
      }

      /**
       * Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
       */
      interface IoK8sApiCoreV1DownwardApiProjection {
        /**
         * Items is a list of DownwardAPIVolume file
         */
        items?: $schemas.IoK8sApiCoreV1DownwardApiVolumeFile[];
      }

      /**
       * DownwardAPIVolumeFile represents information to create the file containing the pod field
       */
      interface IoK8sApiCoreV1DownwardApiVolumeFile {
        /**
         * ObjectFieldSelector selects an APIVersioned field of an object.
         */
        fieldRef?: $schemas.IoK8sApiCoreV1ObjectFieldSelector;
        /**
         * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
         * @format int32
         */
        mode?: number;
        /**
         * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
         */
        path: string;
        /**
         * ResourceFieldSelector represents container resources (cpu, memory) and their output format
         */
        resourceFieldRef?: $schemas.IoK8sApiCoreV1ResourceFieldSelector;
      }

      /**
       * DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1DownwardApiVolumeSource {
        /**
         * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
         * @format int32
         */
        defaultMode?: number;
        /**
         * Items is a list of downward API volume file
         */
        items?: $schemas.IoK8sApiCoreV1DownwardApiVolumeFile[];
      }

      /**
       * Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1EmptyDirVolumeSource {
        /**
         * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        medium?: string;
        /**
         * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
         *
         * The serialization format is:
         *
         * ``` <quantity>        ::= <signedNumber><suffix>
         *
         * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
         *
         * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
         *
         * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
         *
         * <decimalSI>       ::= m | "" | k | M | G | T | P | E
         *
         * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
         *
         * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
         *
         * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
         *
         * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
         *
         * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
         *
         * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
         *
         * The sign will be omitted unless the number is negative.
         *
         * Examples:
         *
         * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
         *
         * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
         *
         * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
         *
         * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
         */
        sizeLimit?: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
      }

      /**
       * EndpointAddress is a tuple that describes single IP address.
       */
      interface IoK8sApiCoreV1EndpointAddress {
        /**
         * The Hostname of this endpoint
         */
        hostname?: string;
        /**
         * The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).
         */
        ip: string;
        /**
         * Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
         */
        nodeName?: string;
        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        targetRef?: $schemas.IoK8sApiCoreV1ObjectReference;
      }

      /**
       * EndpointPort is a tuple that describes a single port.
       */
      interface IoK8sApiCoreV1EndpointPort {
        /**
         * The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
         * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
         * Kubernetes-defined prefixed names:
         * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
         * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
         * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
         * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
         */
        appProtocol?: string;
        /**
         * The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
         */
        name?: string;
        /**
         * The port number of the endpoint.
         * @format int32
         */
        port: number;
        /**
         * The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
         */
        protocol?: string;
      }

      /**
       * EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
       *
       * 	{
       * 	  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
       * 	  Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
       * 	}
       *
       * The resulting set of endpoints can be viewed as:
       *
       * 	a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
       * 	b: [ 10.10.1.1:309, 10.10.2.2:309 ]
       */
      interface IoK8sApiCoreV1EndpointSubset {
        /**
         * IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
         */
        addresses?: $schemas.IoK8sApiCoreV1EndpointAddress[];
        /**
         * IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
         */
        notReadyAddresses?: $schemas.IoK8sApiCoreV1EndpointAddress[];
        /**
         * Port numbers available on the related IP addresses.
         */
        ports?: $schemas.IoK8sApiCoreV1EndpointPort[];
      }

      /**
       * Endpoints is a collection of endpoints that implement the actual service. Example:
       *
       * 	 Name: "mysvc",
       * 	 Subsets: [
       * 	   {
       * 	     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
       * 	     Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
       * 	   },
       * 	   {
       * 	     Addresses: [{"ip": "10.10.3.3"}],
       * 	     Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
       * 	   },
       * 	]
       */
      interface IoK8sApiCoreV1Endpoints {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
         */
        subsets?: $schemas.IoK8sApiCoreV1EndpointSubset[];
      }

      /**
       * EndpointsList is a list of endpoints.
       */
      interface IoK8sApiCoreV1EndpointsList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of endpoints.
         */
        items: $schemas.IoK8sApiCoreV1Endpoints[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * EnvFromSource represents the source of a set of ConfigMaps
       */
      interface IoK8sApiCoreV1EnvFromSource {
        /**
         * ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
         *
         * The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
         */
        configMapRef?: $schemas.IoK8sApiCoreV1ConfigMapEnvSource;
        /**
         * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
         */
        prefix?: string;
        /**
         * SecretEnvSource selects a Secret to populate the environment variables with.
         *
         * The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
         */
        secretRef?: $schemas.IoK8sApiCoreV1SecretEnvSource;
      }

      /**
       * EnvVar represents an environment variable present in a Container.
       */
      interface IoK8sApiCoreV1EnvVar {
        /**
         * Name of the environment variable. Must be a C_IDENTIFIER.
         */
        name: string;
        /**
         * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
         */
        value?: string;
        /**
         * EnvVarSource represents a source for the value of an EnvVar.
         */
        valueFrom?: $schemas.IoK8sApiCoreV1EnvVarSource;
      }

      /**
       * EnvVarSource represents a source for the value of an EnvVar.
       */
      interface IoK8sApiCoreV1EnvVarSource {
        /**
         * Selects a key from a ConfigMap.
         */
        configMapKeyRef?: $schemas.IoK8sApiCoreV1ConfigMapKeySelector;
        /**
         * ObjectFieldSelector selects an APIVersioned field of an object.
         */
        fieldRef?: $schemas.IoK8sApiCoreV1ObjectFieldSelector;
        /**
         * ResourceFieldSelector represents container resources (cpu, memory) and their output format
         */
        resourceFieldRef?: $schemas.IoK8sApiCoreV1ResourceFieldSelector;
        /**
         * SecretKeySelector selects a key of a Secret.
         */
        secretKeyRef?: $schemas.IoK8sApiCoreV1SecretKeySelector;
      }

      /**
       * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
       *
       * To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
       */
      interface IoK8sApiCoreV1EphemeralContainer {
        /**
         * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
         */
        args?: string[];
        /**
         * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
         */
        command?: string[];
        /**
         * List of environment variables to set in the container. Cannot be updated.
         */
        env?: $schemas.IoK8sApiCoreV1EnvVar[];
        /**
         * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
         */
        envFrom?: $schemas.IoK8sApiCoreV1EnvFromSource[];
        /**
         * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
         */
        image?: string;
        /**
         * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
         */
        imagePullPolicy?: string;
        /**
         * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
         */
        lifecycle?: $schemas.IoK8sApiCoreV1Lifecycle;
        /**
         * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
         */
        livenessProbe?: $schemas.IoK8sApiCoreV1Probe;
        /**
         * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
         */
        name: string;
        /**
         * Ports are not allowed for ephemeral containers.
         */
        ports?: $schemas.IoK8sApiCoreV1ContainerPort[];
        /**
         * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
         */
        readinessProbe?: $schemas.IoK8sApiCoreV1Probe;
        /**
         * Resources resize policy for the container.
         */
        resizePolicy?: $schemas.IoK8sApiCoreV1ContainerResizePolicy[];
        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        resources?: $schemas.IoK8sApiCoreV1ResourceRequirements;
        /**
         * Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.
         */
        restartPolicy?: string;
        /**
         * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
         */
        securityContext?: $schemas.IoK8sApiCoreV1SecurityContext;
        /**
         * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
         */
        startupProbe?: $schemas.IoK8sApiCoreV1Probe;
        /**
         * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
         */
        stdin?: boolean;
        /**
         * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
         */
        stdinOnce?: boolean;
        /**
         * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
         *
         * The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
         */
        targetContainerName?: string;
        /**
         * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
         */
        terminationMessagePath?: string;
        /**
         * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
         */
        terminationMessagePolicy?: string;
        /**
         * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
         */
        tty?: boolean;
        /**
         * volumeDevices is the list of block devices to be used by the container.
         */
        volumeDevices?: $schemas.IoK8sApiCoreV1VolumeDevice[];
        /**
         * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
         */
        volumeMounts?: $schemas.IoK8sApiCoreV1VolumeMount[];
        /**
         * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
         */
        workingDir?: string;
      }

      /**
       * Represents an ephemeral volume that is handled by a normal storage driver.
       */
      interface IoK8sApiCoreV1EphemeralVolumeSource {
        /**
         * PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
         */
        volumeClaimTemplate?: $schemas.IoK8sApiCoreV1PersistentVolumeClaimTemplate;
      }

      /**
       * Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
       */
      interface IoK8sApiCoreV1Event {
        /**
         * What action was taken/failed regarding to the Regarding object.
         */
        action?: string;
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * The number of times this event has occurred.
         * @format int32
         */
        count?: number;
        /**
         * MicroTime is version of Time with microsecond level precision.
         * @format date-time
         */
        eventTime?: $schemas.IoK8sApimachineryPkgApisMetaV1MicroTime;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        firstTimestamp?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        involvedObject: $schemas.IoK8sApiCoreV1ObjectReference;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTimestamp?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * A human-readable description of the status of this operation.
         */
        message?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
         */
        reason?: string;
        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        related?: $schemas.IoK8sApiCoreV1ObjectReference;
        /**
         * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
         */
        reportingComponent?: string;
        /**
         * ID of the controller instance, e.g. `kubelet-xyzf`.
         */
        reportingInstance?: string;
        /**
         * EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
         */
        series?: $schemas.IoK8sApiCoreV1EventSeries;
        /**
         * EventSource contains information for an event.
         */
        source?: $schemas.IoK8sApiCoreV1EventSource;
        /**
         * Type of this event (Normal, Warning), new types could be added in the future
         */
        type?: string;
      }

      /**
       * EventList is a list of events.
       */
      interface IoK8sApiCoreV1EventList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of events
         */
        items: $schemas.IoK8sApiCoreV1Event[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
       */
      interface IoK8sApiCoreV1EventSeries {
        /**
         * Number of occurrences in this series up to the last heartbeat time
         * @format int32
         */
        count?: number;
        /**
         * MicroTime is version of Time with microsecond level precision.
         * @format date-time
         */
        lastObservedTime?: $schemas.IoK8sApimachineryPkgApisMetaV1MicroTime;
      }

      /**
       * EventSource contains information for an event.
       */
      interface IoK8sApiCoreV1EventSource {
        /**
         * Component from which the event is generated.
         */
        component?: string;
        /**
         * Node name on which the event is generated.
         */
        host?: string;
      }

      /**
       * ExecAction describes a "run in container" action.
       */
      interface IoK8sApiCoreV1ExecAction {
        /**
         * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
         */
        command?: string[];
      }

      /**
       * Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1FcVolumeSource {
        /**
         * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
         */
        fsType?: string;
        /**
         * lun is Optional: FC target lun number
         * @format int32
         */
        lun?: number;
        /**
         * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
        /**
         * targetWWNs is Optional: FC target worldwide names (WWNs)
         */
        targetWWNs?: string[];
        /**
         * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
         */
        wwids?: string[];
      }

      /**
       * FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
       */
      interface IoK8sApiCoreV1FlexPersistentVolumeSource {
        /**
         * driver is the name of the driver to use for this volume.
         */
        driver: string;
        /**
         * fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
         */
        fsType?: string;
        /**
         * options is Optional: this field holds extra command options if any.
         */
        options?: {
          [P: string]: string;
        };
        /**
         * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        secretRef?: $schemas.IoK8sApiCoreV1SecretReference;
      }

      /**
       * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
       */
      interface IoK8sApiCoreV1FlexVolumeSource {
        /**
         * driver is the name of the driver to use for this volume.
         */
        driver: string;
        /**
         * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
         */
        fsType?: string;
        /**
         * options is Optional: this field holds extra command options if any.
         */
        options?: {
          [P: string]: string;
        };
        /**
         * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        secretRef?: $schemas.IoK8sApiCoreV1LocalObjectReference;
      }

      /**
       * Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
       */
      interface IoK8sApiCoreV1FlockerVolumeSource {
        /**
         * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
         */
        datasetName?: string;
        /**
         * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
         */
        datasetUUID?: string;
      }

      /**
       * Represents a Persistent Disk resource in Google Compute Engine.
       *
       * A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1GcePersistentDiskVolumeSource {
        /**
         * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        fsType?: string;
        /**
         * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         * @format int32
         */
        partition?: number;
        /**
         * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        pdName: string;
        /**
         * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        readOnly?: boolean;
      }

      /**
       * Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
       *
       * DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
       */
      interface IoK8sApiCoreV1GitRepoVolumeSource {
        /**
         * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
         */
        directory?: string;
        /**
         * repository is the URL
         */
        repository: string;
        /**
         * revision is the commit hash for the specified revision.
         */
        revision?: string;
      }

      /**
       * Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
       */
      interface IoK8sApiCoreV1GlusterfsPersistentVolumeSource {
        /**
         * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
         */
        endpoints: string;
        /**
         * endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
         */
        endpointsNamespace?: string;
        /**
         * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
         */
        path: string;
        /**
         * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
         */
        readOnly?: boolean;
      }

      /**
       * Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
       */
      interface IoK8sApiCoreV1GlusterfsVolumeSource {
        /**
         * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
         */
        endpoints: string;
        /**
         * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
         */
        path: string;
        /**
         * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
         */
        readOnly?: boolean;
      }

      interface IoK8sApiCoreV1GrpcAction {
        /**
         * Port number of the gRPC service. Number must be in the range 1 to 65535.
         * @format int32
         */
        port: number;
        /**
         * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
         *
         * If this is not specified, the default behavior is defined by gRPC.
         */
        service?: string;
      }

      /**
       * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
       */
      interface IoK8sApiCoreV1HostAlias {
        /**
         * Hostnames for the above IP address.
         */
        hostnames?: string[];
        /**
         * IP address of the host file entry.
         */
        ip: string;
      }

      /**
       * HostIP represents a single IP address allocated to the host.
       */
      interface IoK8sApiCoreV1HostIp {
        /**
         * IP is the IP address assigned to the host
         */
        ip: string;
      }

      /**
       * Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
       */
      interface IoK8sApiCoreV1HostPathVolumeSource {
        /**
         * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         */
        path: string;
        /**
         * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         */
        type?: string;
      }

      /**
       * HTTPGetAction describes an action based on HTTP Get requests.
       */
      interface IoK8sApiCoreV1HttpGetAction {
        /**
         * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
         */
        host?: string;
        /**
         * Custom headers to set in the request. HTTP allows repeated headers.
         */
        httpHeaders?: $schemas.IoK8sApiCoreV1HttpHeader[];
        /**
         * Path to access on the HTTP server.
         */
        path?: string;
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        port: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
        /**
         * Scheme to use for connecting to the host. Defaults to HTTP.
         */
        scheme?: string;
      }

      /**
       * HTTPHeader describes a custom header to be used in HTTP probes
       */
      interface IoK8sApiCoreV1HttpHeader {
        /**
         * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
         */
        name: string;
        /**
         * The header field value
         */
        value: string;
      }

      /**
       * ImageVolumeSource represents a image volume resource.
       */
      interface IoK8sApiCoreV1ImageVolumeSource {
        /**
         * Policy for pulling OCI objects. Possible values are: Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
         */
        pullPolicy?: string;
        /**
         * Required: Image or artifact reference to be used. Behaves in the same way as pod.spec.containers[*].image. Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
         */
        reference?: string;
      }

      /**
       * ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1IscsiPersistentVolumeSource {
        /**
         * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
         */
        chapAuthDiscovery?: boolean;
        /**
         * chapAuthSession defines whether support iSCSI Session CHAP authentication
         */
        chapAuthSession?: boolean;
        /**
         * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
         */
        fsType?: string;
        /**
         * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
         */
        initiatorName?: string;
        /**
         * iqn is Target iSCSI Qualified Name.
         */
        iqn: string;
        /**
         * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
         */
        iscsiInterface?: string;
        /**
         * lun is iSCSI Target Lun number.
         * @format int32
         */
        lun: number;
        /**
         * portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
         */
        portals?: string[];
        /**
         * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
         */
        readOnly?: boolean;
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        secretRef?: $schemas.IoK8sApiCoreV1SecretReference;
        /**
         * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
         */
        targetPortal: string;
      }

      /**
       * Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1IscsiVolumeSource {
        /**
         * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
         */
        chapAuthDiscovery?: boolean;
        /**
         * chapAuthSession defines whether support iSCSI Session CHAP authentication
         */
        chapAuthSession?: boolean;
        /**
         * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
         */
        fsType?: string;
        /**
         * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
         */
        initiatorName?: string;
        /**
         * iqn is the target iSCSI Qualified Name.
         */
        iqn: string;
        /**
         * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
         */
        iscsiInterface?: string;
        /**
         * lun represents iSCSI Target Lun number.
         * @format int32
         */
        lun: number;
        /**
         * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
         */
        portals?: string[];
        /**
         * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
         */
        readOnly?: boolean;
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        secretRef?: $schemas.IoK8sApiCoreV1LocalObjectReference;
        /**
         * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
         */
        targetPortal: string;
      }

      /**
       * Maps a string key to a path within a volume.
       */
      interface IoK8sApiCoreV1KeyToPath {
        /**
         * key is the key to project.
         */
        key: string;
        /**
         * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
         * @format int32
         */
        mode?: number;
        /**
         * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
         */
        path: string;
      }

      /**
       * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
       */
      interface IoK8sApiCoreV1Lifecycle {
        /**
         * LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
         */
        postStart?: $schemas.IoK8sApiCoreV1LifecycleHandler;
        /**
         * LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
         */
        preStop?: $schemas.IoK8sApiCoreV1LifecycleHandler;
      }

      /**
       * LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
       */
      interface IoK8sApiCoreV1LifecycleHandler {
        /**
         * ExecAction describes a "run in container" action.
         */
        exec?: $schemas.IoK8sApiCoreV1ExecAction;
        /**
         * HTTPGetAction describes an action based on HTTP Get requests.
         */
        httpGet?: $schemas.IoK8sApiCoreV1HttpGetAction;
        /**
         * SleepAction describes a "sleep" action.
         */
        sleep?: $schemas.IoK8sApiCoreV1SleepAction;
        /**
         * TCPSocketAction describes an action based on opening a socket
         */
        tcpSocket?: $schemas.IoK8sApiCoreV1TcpSocketAction;
      }

      /**
       * LimitRange sets resource usage limits for each kind of resource in a Namespace.
       */
      interface IoK8sApiCoreV1LimitRange {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * LimitRangeSpec defines a min/max usage limit for resources that match on kind.
         */
        spec?: $schemas.IoK8sApiCoreV1LimitRangeSpec;
      }

      /**
       * LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
       */
      interface IoK8sApiCoreV1LimitRangeItem {
        /**
         * Default resource requirement limit value by resource name if resource limit is omitted.
         */
        default?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
         */
        defaultRequest?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * Max usage constraints on this kind by resource name.
         */
        max?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
         */
        maxLimitRequestRatio?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * Min usage constraints on this kind by resource name.
         */
        min?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * Type of resource that this limit applies to.
         */
        type: string;
      }

      /**
       * LimitRangeList is a list of LimitRange items.
       */
      interface IoK8sApiCoreV1LimitRangeList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        items: $schemas.IoK8sApiCoreV1LimitRange[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * LimitRangeSpec defines a min/max usage limit for resources that match on kind.
       */
      interface IoK8sApiCoreV1LimitRangeSpec {
        /**
         * Limits is the list of LimitRangeItem objects that are enforced.
         */
        limits: $schemas.IoK8sApiCoreV1LimitRangeItem[];
      }

      /**
       * LinuxContainerUser represents user identity information in Linux containers
       */
      interface IoK8sApiCoreV1LinuxContainerUser {
        /**
         * GID is the primary gid initially attached to the first process in the container
         * @format int64
         */
        gid: number | string;
        /**
         * SupplementalGroups are the supplemental groups initially attached to the first process in the container
         */
        supplementalGroups?: Array<number | string>;
        /**
         * UID is the primary uid initially attached to the first process in the container
         * @format int64
         */
        uid: number | string;
      }

      /**
       * LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
       */
      interface IoK8sApiCoreV1LoadBalancerIngress {
        /**
         * Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
         */
        hostname?: string;
        /**
         * IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
         */
        ip?: string;
        /**
         * IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified. Setting this to "VIP" indicates that traffic is delivered to the node with the destination set to the load-balancer's IP and port. Setting this to "Proxy" indicates that traffic is delivered to the node or pod with the destination set to the node's IP and node port or the pod's IP and port. Service implementations may use this information to adjust traffic routing.
         */
        ipMode?: string;
        /**
         * Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
         */
        ports?: $schemas.IoK8sApiCoreV1PortStatus[];
      }

      /**
       * LoadBalancerStatus represents the status of a load-balancer.
       */
      interface IoK8sApiCoreV1LoadBalancerStatus {
        /**
         * Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
         */
        ingress?: $schemas.IoK8sApiCoreV1LoadBalancerIngress[];
      }

      /**
       * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
       */
      interface IoK8sApiCoreV1LocalObjectReference {
        /**
         * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name?: string;
      }

      /**
       * Local represents directly-attached storage with node affinity (Beta feature)
       */
      interface IoK8sApiCoreV1LocalVolumeSource {
        /**
         * fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
         */
        fsType?: string;
        /**
         * path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
         */
        path: string;
      }

      /**
       * ModifyVolumeStatus represents the status object of ControllerModifyVolume operation
       */
      interface IoK8sApiCoreV1ModifyVolumeStatus {
        /**
         * status is the status of the ControllerModifyVolume operation. It can be in any of following states:
         *  - Pending
         *    Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
         *    the specified VolumeAttributesClass not existing.
         *  - InProgress
         *    InProgress indicates that the volume is being modified.
         *  - Infeasible
         *   Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
         * 	  resolve the error, a valid VolumeAttributesClass needs to be specified.
         * Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
         */
        status: string;
        /**
         * targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
         */
        targetVolumeAttributesClassName?: string;
      }

      /**
       * Namespace provides a scope for Names. Use of multiple namespaces is optional.
       */
      interface IoK8sApiCoreV1Namespace {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * NamespaceSpec describes the attributes on a Namespace.
         */
        spec?: $schemas.IoK8sApiCoreV1NamespaceSpec;
        /**
         * NamespaceStatus is information about the current status of a Namespace.
         */
        status?: $schemas.IoK8sApiCoreV1NamespaceStatus;
      }

      /**
       * NamespaceCondition contains details about state of namespace.
       */
      interface IoK8sApiCoreV1NamespaceCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        message?: string;
        reason?: string;
        /**
         * Status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * Type of namespace controller condition.
         */
        type: string;
      }

      /**
       * NamespaceList is a list of Namespaces.
       */
      interface IoK8sApiCoreV1NamespaceList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
         */
        items: $schemas.IoK8sApiCoreV1Namespace[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * NamespaceSpec describes the attributes on a Namespace.
       */
      interface IoK8sApiCoreV1NamespaceSpec {
        /**
         * Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
         */
        finalizers?: string[];
      }

      /**
       * NamespaceStatus is information about the current status of a Namespace.
       */
      interface IoK8sApiCoreV1NamespaceStatus {
        /**
         * Represents the latest available observations of a namespace's current state.
         */
        conditions?: $schemas.IoK8sApiCoreV1NamespaceCondition[];
        /**
         * Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
         */
        phase?: string;
      }

      /**
       * Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
       */
      interface IoK8sApiCoreV1NfsVolumeSource {
        /**
         * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        path: string;
        /**
         * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        readOnly?: boolean;
        /**
         * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        server: string;
      }

      /**
       * Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
       */
      interface IoK8sApiCoreV1Node {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * NodeSpec describes the attributes that a node is created with.
         */
        spec?: $schemas.IoK8sApiCoreV1NodeSpec;
        /**
         * NodeStatus is information about the current status of a node.
         */
        status?: $schemas.IoK8sApiCoreV1NodeStatus;
      }

      /**
       * NodeAddress contains information for the node's address.
       */
      interface IoK8sApiCoreV1NodeAddress {
        /**
         * The node address.
         */
        address: string;
        /**
         * Node address type, one of Hostname, ExternalIP or InternalIP.
         */
        type: string;
      }

      /**
       * Node affinity is a group of node affinity scheduling rules.
       */
      interface IoK8sApiCoreV1NodeAffinity {
        /**
         * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
         */
        preferredDuringSchedulingIgnoredDuringExecution?: $schemas.IoK8sApiCoreV1PreferredSchedulingTerm[];
        /**
         * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
         */
        requiredDuringSchedulingIgnoredDuringExecution?: $schemas.IoK8sApiCoreV1NodeSelector;
      }

      /**
       * NodeCondition contains condition information for a node.
       */
      interface IoK8sApiCoreV1NodeCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastHeartbeatTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Human readable message indicating details about last transition.
         */
        message?: string;
        /**
         * (brief) reason for the condition's last transition.
         */
        reason?: string;
        /**
         * Status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * Type of node condition.
         */
        type: string;
      }

      /**
       * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
       */
      interface IoK8sApiCoreV1NodeConfigSource {
        /**
         * ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
         */
        configMap?: $schemas.IoK8sApiCoreV1ConfigMapNodeConfigSource;
      }

      /**
       * NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
       */
      interface IoK8sApiCoreV1NodeConfigStatus {
        /**
         * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
         */
        active?: $schemas.IoK8sApiCoreV1NodeConfigSource;
        /**
         * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
         */
        assigned?: $schemas.IoK8sApiCoreV1NodeConfigSource;
        /**
         * Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
         */
        error?: string;
        /**
         * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
         */
        lastKnownGood?: $schemas.IoK8sApiCoreV1NodeConfigSource;
      }

      /**
       * NodeDaemonEndpoints lists ports opened by daemons running on the Node.
       */
      interface IoK8sApiCoreV1NodeDaemonEndpoints {
        /**
         * DaemonEndpoint contains information about a single Daemon endpoint.
         */
        kubeletEndpoint?: $schemas.IoK8sApiCoreV1DaemonEndpoint;
      }

      /**
       * NodeFeatures describes the set of features implemented by the CRI implementation. The features contained in the NodeFeatures should depend only on the cri implementation independent of runtime handlers.
       */
      interface IoK8sApiCoreV1NodeFeatures {
        /**
         * SupplementalGroupsPolicy is set to true if the runtime supports SupplementalGroupsPolicy and ContainerUser.
         */
        supplementalGroupsPolicy?: boolean;
      }

      /**
       * NodeList is the whole list of all Nodes which have been registered with master.
       */
      interface IoK8sApiCoreV1NodeList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of nodes
         */
        items: $schemas.IoK8sApiCoreV1Node[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * NodeRuntimeHandler is a set of runtime handler information.
       */
      interface IoK8sApiCoreV1NodeRuntimeHandler {
        /**
         * NodeRuntimeHandlerFeatures is a set of features implemented by the runtime handler.
         */
        features?: $schemas.IoK8sApiCoreV1NodeRuntimeHandlerFeatures;
        /**
         * Runtime handler name. Empty for the default runtime handler.
         */
        name?: string;
      }

      /**
       * NodeRuntimeHandlerFeatures is a set of features implemented by the runtime handler.
       */
      interface IoK8sApiCoreV1NodeRuntimeHandlerFeatures {
        /**
         * RecursiveReadOnlyMounts is set to true if the runtime handler supports RecursiveReadOnlyMounts.
         */
        recursiveReadOnlyMounts?: boolean;
        /**
         * UserNamespaces is set to true if the runtime handler supports UserNamespaces, including for volumes.
         */
        userNamespaces?: boolean;
      }

      /**
       * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
       */
      interface IoK8sApiCoreV1NodeSelector {
        /**
         * Required. A list of node selector terms. The terms are ORed.
         */
        nodeSelectorTerms: $schemas.IoK8sApiCoreV1NodeSelectorTerm[];
      }

      /**
       * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
       */
      interface IoK8sApiCoreV1NodeSelectorRequirement {
        /**
         * The label key that the selector applies to.
         */
        key: string;
        /**
         * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
         */
        operator: string;
        /**
         * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
         */
        values?: string[];
      }

      /**
       * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
       */
      interface IoK8sApiCoreV1NodeSelectorTerm {
        /**
         * A list of node selector requirements by node's labels.
         */
        matchExpressions?: $schemas.IoK8sApiCoreV1NodeSelectorRequirement[];
        /**
         * A list of node selector requirements by node's fields.
         */
        matchFields?: $schemas.IoK8sApiCoreV1NodeSelectorRequirement[];
      }

      /**
       * NodeSpec describes the attributes that a node is created with.
       */
      interface IoK8sApiCoreV1NodeSpec {
        /**
         * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
         */
        configSource?: $schemas.IoK8sApiCoreV1NodeConfigSource;
        /**
         * Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
         */
        externalID?: string;
        /**
         * PodCIDR represents the pod IP range assigned to the node.
         */
        podCIDR?: string;
        /**
         * podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
         */
        podCIDRs?: string[];
        /**
         * ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
         */
        providerID?: string;
        /**
         * If specified, the node's taints.
         */
        taints?: $schemas.IoK8sApiCoreV1Taint[];
        /**
         * Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
         */
        unschedulable?: boolean;
      }

      /**
       * NodeStatus is information about the current status of a node.
       */
      interface IoK8sApiCoreV1NodeStatus {
        /**
         * List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
         */
        addresses?: $schemas.IoK8sApiCoreV1NodeAddress[];
        /**
         * Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
         */
        allocatable?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/reference/node/node-status/#capacity
         */
        capacity?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
         */
        conditions?: $schemas.IoK8sApiCoreV1NodeCondition[];
        /**
         * NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
         */
        config?: $schemas.IoK8sApiCoreV1NodeConfigStatus;
        /**
         * NodeDaemonEndpoints lists ports opened by daemons running on the Node.
         */
        daemonEndpoints?: $schemas.IoK8sApiCoreV1NodeDaemonEndpoints;
        /**
         * NodeFeatures describes the set of features implemented by the CRI implementation. The features contained in the NodeFeatures should depend only on the cri implementation independent of runtime handlers.
         */
        features?: $schemas.IoK8sApiCoreV1NodeFeatures;
        /**
         * List of container images on this node
         */
        images?: $schemas.IoK8sApiCoreV1ContainerImage[];
        /**
         * NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
         */
        nodeInfo?: $schemas.IoK8sApiCoreV1NodeSystemInfo;
        /**
         * NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
         */
        phase?: string;
        /**
         * The available runtime handlers.
         */
        runtimeHandlers?: $schemas.IoK8sApiCoreV1NodeRuntimeHandler[];
        /**
         * List of volumes that are attached to the node.
         */
        volumesAttached?: $schemas.IoK8sApiCoreV1AttachedVolume[];
        /**
         * List of attachable volumes in use (mounted) by the node.
         */
        volumesInUse?: string[];
      }

      /**
       * NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
       */
      interface IoK8sApiCoreV1NodeSystemInfo {
        /**
         * The Architecture reported by the node
         */
        architecture: string;
        /**
         * Boot ID reported by the node.
         */
        bootID: string;
        /**
         * ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
         */
        containerRuntimeVersion: string;
        /**
         * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
         */
        kernelVersion: string;
        /**
         * Deprecated: KubeProxy Version reported by the node.
         */
        kubeProxyVersion: string;
        /**
         * Kubelet Version reported by the node.
         */
        kubeletVersion: string;
        /**
         * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
         */
        machineID: string;
        /**
         * The Operating System reported by the node
         */
        operatingSystem: string;
        /**
         * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
         */
        osImage: string;
        /**
         * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
         */
        systemUUID: string;
      }

      /**
       * ObjectFieldSelector selects an APIVersioned field of an object.
       */
      interface IoK8sApiCoreV1ObjectFieldSelector {
        /**
         * Version of the schema the FieldPath is written in terms of, defaults to "v1".
         */
        apiVersion?: string;
        /**
         * Path of the field to select in the specified API version.
         */
        fieldPath: string;
      }

      /**
       * ObjectReference contains enough information to let you inspect or modify the referred object.
       */
      interface IoK8sApiCoreV1ObjectReference {
        /**
         * API version of the referent.
         */
        apiVersion?: string;
        /**
         * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
         */
        fieldPath?: string;
        /**
         * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name?: string;
        /**
         * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
         */
        namespace?: string;
        /**
         * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
         */
        resourceVersion?: string;
        /**
         * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
         */
        uid?: string;
      }

      /**
       * PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
       */
      interface IoK8sApiCoreV1PersistentVolume {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * PersistentVolumeSpec is the specification of a persistent volume.
         */
        spec?: $schemas.IoK8sApiCoreV1PersistentVolumeSpec;
        /**
         * PersistentVolumeStatus is the current status of a persistent volume.
         */
        status?: $schemas.IoK8sApiCoreV1PersistentVolumeStatus;
      }

      /**
       * PersistentVolumeClaim is a user's request for and claim to a persistent volume
       */
      interface IoK8sApiCoreV1PersistentVolumeClaim {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
         */
        spec?: $schemas.IoK8sApiCoreV1PersistentVolumeClaimSpec;
        /**
         * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
         */
        status?: $schemas.IoK8sApiCoreV1PersistentVolumeClaimStatus;
      }

      /**
       * PersistentVolumeClaimCondition contains details about state of pvc
       */
      interface IoK8sApiCoreV1PersistentVolumeClaimCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastProbeTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * message is the human-readable message indicating details about last transition.
         */
        message?: string;
        /**
         * reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "Resizing" that means the underlying persistent volume is being resized.
         */
        reason?: string;
        status: string;
        type: string;
      }

      /**
       * PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
       */
      interface IoK8sApiCoreV1PersistentVolumeClaimList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        items: $schemas.IoK8sApiCoreV1PersistentVolumeClaim[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
       */
      interface IoK8sApiCoreV1PersistentVolumeClaimSpec {
        /**
         * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
         */
        accessModes?: string[];
        /**
         * TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
         */
        dataSource?: $schemas.IoK8sApiCoreV1TypedLocalObjectReference;
        dataSourceRef?: $schemas.IoK8sApiCoreV1TypedObjectReference;
        /**
         * VolumeResourceRequirements describes the storage resource requirements for a volume.
         */
        resources?: $schemas.IoK8sApiCoreV1VolumeResourceRequirements;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
         */
        storageClassName?: string;
        /**
         * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
         */
        volumeAttributesClassName?: string;
        /**
         * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
         */
        volumeMode?: string;
        /**
         * volumeName is the binding reference to the PersistentVolume backing this claim.
         */
        volumeName?: string;
      }

      /**
       * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
       */
      interface IoK8sApiCoreV1PersistentVolumeClaimStatus {
        /**
         * accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
         */
        accessModes?: string[];
        /**
         * allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either:
         * Un-prefixed keys:
         * 		- storage - the capacity of the volume.
         * Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
         * Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
         *
         * ClaimResourceStatus can be in any of following states:
         * 	- ControllerResizeInProgress:
         * 		State set when resize controller starts resizing the volume in control-plane.
         * 	- ControllerResizeFailed:
         * 		State set when resize has failed in resize controller with a terminal error.
         * 	- NodeResizePending:
         * 		State set when resize controller has finished resizing the volume but further resizing of
         * 		volume is needed on the node.
         * 	- NodeResizeInProgress:
         * 		State set when kubelet starts resizing the volume.
         * 	- NodeResizeFailed:
         * 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
         * 		NodeResizeFailed.
         * For example: if expanding a PVC for more capacity - this field can be one of the following states:
         * 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
         *      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
         *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
         *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
         *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
         * When this field is not set, it means that no resize operation is in progress for the given PVC.
         *
         * A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
         *
         * This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
         */
        allocatedResourceStatuses?: {
          [P: string]: string;
        };
        /**
         * allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:
         * Un-prefixed keys:
         * 		- storage - the capacity of the volume.
         * Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
         * Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
         *
         * Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.
         *
         * A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
         *
         * This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
         */
        allocatedResources?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * capacity represents the actual resources of the underlying volume.
         */
        capacity?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'Resizing'.
         */
        conditions?: $schemas.IoK8sApiCoreV1PersistentVolumeClaimCondition[];
        /**
         * currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using. When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
         */
        currentVolumeAttributesClassName?: string;
        /**
         * ModifyVolumeStatus represents the status object of ControllerModifyVolume operation
         */
        modifyVolumeStatus?: $schemas.IoK8sApiCoreV1ModifyVolumeStatus;
        /**
         * phase represents the current phase of PersistentVolumeClaim.
         */
        phase?: string;
      }

      /**
       * PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
       */
      interface IoK8sApiCoreV1PersistentVolumeClaimTemplate {
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
         */
        spec: $schemas.IoK8sApiCoreV1PersistentVolumeClaimSpec;
      }

      /**
       * PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
       */
      interface IoK8sApiCoreV1PersistentVolumeClaimVolumeSource {
        /**
         * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        claimName: string;
        /**
         * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
         */
        readOnly?: boolean;
      }

      /**
       * PersistentVolumeList is a list of PersistentVolume items.
       */
      interface IoK8sApiCoreV1PersistentVolumeList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
         */
        items: $schemas.IoK8sApiCoreV1PersistentVolume[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * PersistentVolumeSpec is the specification of a persistent volume.
       */
      interface IoK8sApiCoreV1PersistentVolumeSpec {
        /**
         * accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
         */
        accessModes?: string[];
        /**
         * Represents a Persistent Disk resource in AWS.
         *
         * An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
         */
        awsElasticBlockStore?: $schemas.IoK8sApiCoreV1AwsElasticBlockStoreVolumeSource;
        /**
         * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        azureDisk?: $schemas.IoK8sApiCoreV1AzureDiskVolumeSource;
        /**
         * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        azureFile?: $schemas.IoK8sApiCoreV1AzureFilePersistentVolumeSource;
        /**
         * capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
         */
        capacity?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
         */
        cephfs?: $schemas.IoK8sApiCoreV1CephFsPersistentVolumeSource;
        /**
         * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
         */
        cinder?: $schemas.IoK8sApiCoreV1CinderPersistentVolumeSource;
        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        claimRef?: $schemas.IoK8sApiCoreV1ObjectReference;
        /**
         * Represents storage that is managed by an external CSI volume driver (Beta feature)
         */
        csi?: $schemas.IoK8sApiCoreV1CsiPersistentVolumeSource;
        /**
         * Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
         */
        fc?: $schemas.IoK8sApiCoreV1FcVolumeSource;
        /**
         * FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
         */
        flexVolume?: $schemas.IoK8sApiCoreV1FlexPersistentVolumeSource;
        /**
         * Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
         */
        flocker?: $schemas.IoK8sApiCoreV1FlockerVolumeSource;
        /**
         * Represents a Persistent Disk resource in Google Compute Engine.
         *
         * A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
         */
        gcePersistentDisk?: $schemas.IoK8sApiCoreV1GcePersistentDiskVolumeSource;
        /**
         * Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
         */
        glusterfs?: $schemas.IoK8sApiCoreV1GlusterfsPersistentVolumeSource;
        /**
         * Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
         */
        hostPath?: $schemas.IoK8sApiCoreV1HostPathVolumeSource;
        /**
         * ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
         */
        iscsi?: $schemas.IoK8sApiCoreV1IscsiPersistentVolumeSource;
        /**
         * Local represents directly-attached storage with node affinity (Beta feature)
         */
        local?: $schemas.IoK8sApiCoreV1LocalVolumeSource;
        /**
         * mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
         */
        mountOptions?: string[];
        /**
         * Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
         */
        nfs?: $schemas.IoK8sApiCoreV1NfsVolumeSource;
        /**
         * VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
         */
        nodeAffinity?: $schemas.IoK8sApiCoreV1VolumeNodeAffinity;
        /**
         * persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
         */
        persistentVolumeReclaimPolicy?: string;
        /**
         * Represents a Photon Controller persistent disk resource.
         */
        photonPersistentDisk?: $schemas.IoK8sApiCoreV1PhotonPersistentDiskVolumeSource;
        /**
         * PortworxVolumeSource represents a Portworx volume resource.
         */
        portworxVolume?: $schemas.IoK8sApiCoreV1PortworxVolumeSource;
        /**
         * Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
         */
        quobyte?: $schemas.IoK8sApiCoreV1QuobyteVolumeSource;
        /**
         * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
         */
        rbd?: $schemas.IoK8sApiCoreV1RbdPersistentVolumeSource;
        /**
         * ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
         */
        scaleIO?: $schemas.IoK8sApiCoreV1ScaleIoPersistentVolumeSource;
        /**
         * storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
         */
        storageClassName?: string;
        /**
         * Represents a StorageOS persistent volume resource.
         */
        storageos?: $schemas.IoK8sApiCoreV1StorageOsPersistentVolumeSource;
        /**
         * Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
         */
        volumeAttributesClassName?: string;
        /**
         * volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
         */
        volumeMode?: string;
        /**
         * Represents a vSphere volume resource.
         */
        vsphereVolume?: $schemas.IoK8sApiCoreV1VsphereVirtualDiskVolumeSource;
      }

      /**
       * PersistentVolumeStatus is the current status of a persistent volume.
       */
      interface IoK8sApiCoreV1PersistentVolumeStatus {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastPhaseTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * message is a human-readable message indicating details about why the volume is in this state.
         */
        message?: string;
        /**
         * phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
         */
        phase?: string;
        /**
         * reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
         */
        reason?: string;
      }

      /**
       * Represents a Photon Controller persistent disk resource.
       */
      interface IoK8sApiCoreV1PhotonPersistentDiskVolumeSource {
        /**
         * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
         */
        fsType?: string;
        /**
         * pdID is the ID that identifies Photon Controller persistent disk
         */
        pdID: string;
      }

      /**
       * Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
       */
      interface IoK8sApiCoreV1Pod {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * PodSpec is a description of a pod.
         */
        spec?: $schemas.IoK8sApiCoreV1PodSpec;
        /**
         * PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
         */
        status?: $schemas.IoK8sApiCoreV1PodStatus;
      }

      /**
       * Pod affinity is a group of inter pod affinity scheduling rules.
       */
      interface IoK8sApiCoreV1PodAffinity {
        /**
         * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
         */
        preferredDuringSchedulingIgnoredDuringExecution?: $schemas.IoK8sApiCoreV1WeightedPodAffinityTerm[];
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
         */
        requiredDuringSchedulingIgnoredDuringExecution?: $schemas.IoK8sApiCoreV1PodAffinityTerm[];
      }

      /**
       * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
       */
      interface IoK8sApiCoreV1PodAffinityTerm {
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        labelSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set. This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
         */
        matchLabelKeys?: string[];
        /**
         * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set. This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
         */
        mismatchLabelKeys?: string[];
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        namespaceSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
         */
        namespaces?: string[];
        /**
         * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
         */
        topologyKey: string;
      }

      /**
       * Pod anti affinity is a group of inter pod anti affinity scheduling rules.
       */
      interface IoK8sApiCoreV1PodAntiAffinity {
        /**
         * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
         */
        preferredDuringSchedulingIgnoredDuringExecution?: $schemas.IoK8sApiCoreV1WeightedPodAffinityTerm[];
        /**
         * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
         */
        requiredDuringSchedulingIgnoredDuringExecution?: $schemas.IoK8sApiCoreV1PodAffinityTerm[];
      }

      /**
       * PodCondition contains details for the current condition of this pod.
       */
      interface IoK8sApiCoreV1PodCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastProbeTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Human-readable message indicating details about last transition.
         */
        message?: string;
        /**
         * Unique, one-word, CamelCase reason for the condition's last transition.
         */
        reason?: string;
        /**
         * Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
         */
        status: string;
        /**
         * Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
         */
        type: string;
      }

      /**
       * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
       */
      interface IoK8sApiCoreV1PodDnsConfig {
        /**
         * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
         */
        nameservers?: string[];
        /**
         * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
         */
        options?: $schemas.IoK8sApiCoreV1PodDnsConfigOption[];
        /**
         * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
         */
        searches?: string[];
      }

      /**
       * PodDNSConfigOption defines DNS resolver options of a pod.
       */
      interface IoK8sApiCoreV1PodDnsConfigOption {
        /**
         * Required.
         */
        name?: string;
        value?: string;
      }

      /**
       * PodIP represents a single IP address allocated to the pod.
       */
      interface IoK8sApiCoreV1PodIp {
        /**
         * IP is the IP address assigned to the pod
         */
        ip: string;
      }

      /**
       * PodList is a list of Pods.
       */
      interface IoK8sApiCoreV1PodList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
         */
        items: $schemas.IoK8sApiCoreV1Pod[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * PodOS defines the OS parameters of a pod.
       */
      interface IoK8sApiCoreV1PodOs {
        /**
         * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
         */
        name: string;
      }

      /**
       * PodReadinessGate contains the reference to a pod condition
       */
      interface IoK8sApiCoreV1PodReadinessGate {
        /**
         * ConditionType refers to a condition in the pod's condition list with matching type.
         */
        conditionType: string;
      }

      /**
       * PodResourceClaim references exactly one ResourceClaim, either directly or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim for the pod.
       *
       * It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
       */
      interface IoK8sApiCoreV1PodResourceClaim {
        /**
         * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
         */
        name: string;
        /**
         * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
         *
         * Exactly one of ResourceClaimName and ResourceClaimTemplateName must be set.
         */
        resourceClaimName?: string;
        /**
         * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
         *
         * The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
         *
         * This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
         *
         * Exactly one of ResourceClaimName and ResourceClaimTemplateName must be set.
         */
        resourceClaimTemplateName?: string;
      }

      /**
       * PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim which references a ResourceClaimTemplate. It stores the generated name for the corresponding ResourceClaim.
       */
      interface IoK8sApiCoreV1PodResourceClaimStatus {
        /**
         * Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL.
         */
        name: string;
        /**
         * ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. If this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case.
         */
        resourceClaimName?: string;
      }

      /**
       * PodSchedulingGate is associated to a Pod to guard its scheduling.
       */
      interface IoK8sApiCoreV1PodSchedulingGate {
        /**
         * Name of the scheduling gate. Each scheduling gate must have a unique name field.
         */
        name: string;
      }

      /**
       * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
       */
      interface IoK8sApiCoreV1PodSecurityContext {
        /**
         * AppArmorProfile defines a pod or container's AppArmor settings.
         */
        appArmorProfile?: $schemas.IoK8sApiCoreV1AppArmorProfile;
        /**
         * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
         *
         * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
         *
         * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
         * @format int64
         */
        fsGroup?: number | string;
        /**
         * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
         */
        fsGroupChangePolicy?: string;
        /**
         * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         * @format int64
         */
        runAsGroup?: number | string;
        /**
         * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        runAsNonRoot?: boolean;
        /**
         * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         * @format int64
         */
        runAsUser?: number | string;
        /**
         * SELinuxOptions are the labels to be applied to the container
         */
        seLinuxOptions?: $schemas.IoK8sApiCoreV1SeLinuxOptions;
        /**
         * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
         */
        seccompProfile?: $schemas.IoK8sApiCoreV1SeccompProfile;
        /**
         * A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field. Note that this field cannot be set when spec.os.name is windows.
         */
        supplementalGroups?: Array<number | string>;
        /**
         * Defines how supplemental groups of the first container processes are calculated. Valid values are "Merge" and "Strict". If not specified, "Merge" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature. Note that this field cannot be set when spec.os.name is windows.
         */
        supplementalGroupsPolicy?: string;
        /**
         * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
         */
        sysctls?: $schemas.IoK8sApiCoreV1Sysctl[];
        /**
         * WindowsSecurityContextOptions contain Windows-specific options and credentials.
         */
        windowsOptions?: $schemas.IoK8sApiCoreV1WindowsSecurityContextOptions;
      }

      /**
       * PodSpec is a description of a pod.
       */
      interface IoK8sApiCoreV1PodSpec {
        /**
         * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
         * @format int64
         */
        activeDeadlineSeconds?: number | string;
        /**
         * Affinity is a group of affinity scheduling rules.
         */
        affinity?: $schemas.IoK8sApiCoreV1Affinity;
        /**
         * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
         */
        automountServiceAccountToken?: boolean;
        /**
         * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
         */
        containers: $schemas.IoK8sApiCoreV1Container[];
        /**
         * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
         */
        dnsConfig?: $schemas.IoK8sApiCoreV1PodDnsConfig;
        /**
         * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
         */
        dnsPolicy?: string;
        /**
         * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
         */
        enableServiceLinks?: boolean;
        /**
         * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
         */
        ephemeralContainers?: $schemas.IoK8sApiCoreV1EphemeralContainer[];
        /**
         * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.
         */
        hostAliases?: $schemas.IoK8sApiCoreV1HostAlias[];
        /**
         * Use the host's ipc namespace. Optional: Default to false.
         */
        hostIPC?: boolean;
        /**
         * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
         */
        hostNetwork?: boolean;
        /**
         * Use the host's pid namespace. Optional: Default to false.
         */
        hostPID?: boolean;
        /**
         * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
         */
        hostUsers?: boolean;
        /**
         * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
         */
        hostname?: string;
        /**
         * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
         */
        imagePullSecrets?: $schemas.IoK8sApiCoreV1LocalObjectReference[];
        /**
         * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
         */
        initContainers?: $schemas.IoK8sApiCoreV1Container[];
        /**
         * NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename
         */
        nodeName?: string;
        /**
         * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
         */
        nodeSelector?: {
          [P: string]: string;
        };
        /**
         * PodOS defines the OS parameters of a pod.
         */
        os?: $schemas.IoK8sApiCoreV1PodOs;
        /**
         * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
         */
        overhead?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
         */
        preemptionPolicy?: string;
        /**
         * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
         * @format int32
         */
        priority?: number;
        /**
         * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
         */
        priorityClassName?: string;
        /**
         * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
         */
        readinessGates?: $schemas.IoK8sApiCoreV1PodReadinessGate[];
        /**
         * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
         *
         * This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
         *
         * This field is immutable.
         */
        resourceClaims?: $schemas.IoK8sApiCoreV1PodResourceClaim[];
        /**
         * Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
         */
        restartPolicy?: string;
        /**
         * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
         */
        runtimeClassName?: string;
        /**
         * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
         */
        schedulerName?: string;
        /**
         * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
         *
         * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
         */
        schedulingGates?: $schemas.IoK8sApiCoreV1PodSchedulingGate[];
        /**
         * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
         */
        securityContext?: $schemas.IoK8sApiCoreV1PodSecurityContext;
        /**
         * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
         */
        serviceAccount?: string;
        /**
         * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
         */
        serviceAccountName?: string;
        /**
         * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
         */
        setHostnameAsFQDN?: boolean;
        /**
         * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
         */
        shareProcessNamespace?: boolean;
        /**
         * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
         */
        subdomain?: string;
        /**
         * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
         * @format int64
         */
        terminationGracePeriodSeconds?: number | string;
        /**
         * If specified, the pod's tolerations.
         */
        tolerations?: $schemas.IoK8sApiCoreV1Toleration[];
        /**
         * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
         */
        topologySpreadConstraints?: $schemas.IoK8sApiCoreV1TopologySpreadConstraint[];
        /**
         * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
         */
        volumes?: $schemas.IoK8sApiCoreV1Volume[];
      }

      /**
       * PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
       */
      interface IoK8sApiCoreV1PodStatus {
        /**
         * Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
         */
        conditions?: $schemas.IoK8sApiCoreV1PodCondition[];
        /**
         * The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
         */
        containerStatuses?: $schemas.IoK8sApiCoreV1ContainerStatus[];
        /**
         * Status for any ephemeral containers that have run in this pod.
         */
        ephemeralContainerStatuses?: $schemas.IoK8sApiCoreV1ContainerStatus[];
        /**
         * hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod
         */
        hostIP?: string;
        /**
         * hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.
         */
        hostIPs?: $schemas.IoK8sApiCoreV1HostIp[];
        /**
         * The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
         */
        initContainerStatuses?: $schemas.IoK8sApiCoreV1ContainerStatus[];
        /**
         * A human readable message indicating details about why the pod is in this condition.
         */
        message?: string;
        /**
         * nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
         */
        nominatedNodeName?: string;
        /**
         * The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
         *
         * Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
         *
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
         */
        phase?: string;
        /**
         * podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
         */
        podIP?: string;
        /**
         * podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
         */
        podIPs?: $schemas.IoK8sApiCoreV1PodIp[];
        /**
         * The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
         */
        qosClass?: string;
        /**
         * A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
         */
        reason?: string;
        /**
         * Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed"
         */
        resize?: string;
        /**
         * Status of resource claims.
         */
        resourceClaimStatuses?: $schemas.IoK8sApiCoreV1PodResourceClaimStatus[];
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        startTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
      }

      /**
       * PodTemplate describes a template for creating copies of a predefined pod.
       */
      interface IoK8sApiCoreV1PodTemplate {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        template?: $schemas.IoK8sApiCoreV1PodTemplateSpec;
      }

      /**
       * PodTemplateList is a list of PodTemplates.
       */
      interface IoK8sApiCoreV1PodTemplateList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of pod templates
         */
        items: $schemas.IoK8sApiCoreV1PodTemplate[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * PodTemplateSpec describes the data a pod should have when created from a template
       */
      interface IoK8sApiCoreV1PodTemplateSpec {
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * PodSpec is a description of a pod.
         */
        spec?: $schemas.IoK8sApiCoreV1PodSpec;
      }

      interface IoK8sApiCoreV1PortStatus {
        /**
         * Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
         *   CamelCase names
         * - cloud provider specific error values must have names that comply with the
         *   format foo.example.com/CamelCase.
         */
        error?: string;
        /**
         * Port is the port number of the service port of which status is recorded here
         * @format int32
         */
        port: number;
        /**
         * Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
         */
        protocol: string;
      }

      /**
       * PortworxVolumeSource represents a Portworx volume resource.
       */
      interface IoK8sApiCoreV1PortworxVolumeSource {
        /**
         * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
         */
        fsType?: string;
        /**
         * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
        /**
         * volumeID uniquely identifies a Portworx volume
         */
        volumeID: string;
      }

      /**
       * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
       */
      interface IoK8sApiCoreV1PreferredSchedulingTerm {
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        preference: $schemas.IoK8sApiCoreV1NodeSelectorTerm;
        /**
         * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
         * @format int32
         */
        weight: number;
      }

      /**
       * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
       */
      interface IoK8sApiCoreV1Probe {
        /**
         * ExecAction describes a "run in container" action.
         */
        exec?: $schemas.IoK8sApiCoreV1ExecAction;
        /**
         * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
         * @format int32
         */
        failureThreshold?: number;
        grpc?: $schemas.IoK8sApiCoreV1GrpcAction;
        /**
         * HTTPGetAction describes an action based on HTTP Get requests.
         */
        httpGet?: $schemas.IoK8sApiCoreV1HttpGetAction;
        /**
         * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         * @format int32
         */
        initialDelaySeconds?: number;
        /**
         * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
         * @format int32
         */
        periodSeconds?: number;
        /**
         * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
         * @format int32
         */
        successThreshold?: number;
        /**
         * TCPSocketAction describes an action based on opening a socket
         */
        tcpSocket?: $schemas.IoK8sApiCoreV1TcpSocketAction;
        /**
         * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
         * @format int64
         */
        terminationGracePeriodSeconds?: number | string;
        /**
         * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         * @format int32
         */
        timeoutSeconds?: number;
      }

      /**
       * Represents a projected volume source
       */
      interface IoK8sApiCoreV1ProjectedVolumeSource {
        /**
         * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
         * @format int32
         */
        defaultMode?: number;
        /**
         * sources is the list of volume projections. Each entry in this list handles one source.
         */
        sources?: $schemas.IoK8sApiCoreV1VolumeProjection[];
      }

      /**
       * Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
       */
      interface IoK8sApiCoreV1QuobyteVolumeSource {
        /**
         * group to map volume access to Default is no group
         */
        group?: string;
        /**
         * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
         */
        readOnly?: boolean;
        /**
         * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
         */
        registry: string;
        /**
         * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
         */
        tenant?: string;
        /**
         * user to map volume access to Defaults to serivceaccount user
         */
        user?: string;
        /**
         * volume is a string that references an already created Quobyte volume by name.
         */
        volume: string;
      }

      /**
       * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1RbdPersistentVolumeSource {
        /**
         * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
         */
        fsType?: string;
        /**
         * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        image: string;
        /**
         * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        keyring?: string;
        /**
         * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        monitors: string[];
        /**
         * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        pool?: string;
        /**
         * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        readOnly?: boolean;
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        secretRef?: $schemas.IoK8sApiCoreV1SecretReference;
        /**
         * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        user?: string;
      }

      /**
       * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1RbdVolumeSource {
        /**
         * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
         */
        fsType?: string;
        /**
         * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        image: string;
        /**
         * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        keyring?: string;
        /**
         * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        monitors: string[];
        /**
         * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        pool?: string;
        /**
         * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        readOnly?: boolean;
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        secretRef?: $schemas.IoK8sApiCoreV1LocalObjectReference;
        /**
         * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        user?: string;
      }

      /**
       * ReplicationController represents the configuration of a replication controller.
       */
      interface IoK8sApiCoreV1ReplicationController {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ReplicationControllerSpec is the specification of a replication controller.
         */
        spec?: $schemas.IoK8sApiCoreV1ReplicationControllerSpec;
        /**
         * ReplicationControllerStatus represents the current status of a replication controller.
         */
        status?: $schemas.IoK8sApiCoreV1ReplicationControllerStatus;
      }

      /**
       * ReplicationControllerCondition describes the state of a replication controller at a certain point.
       */
      interface IoK8sApiCoreV1ReplicationControllerCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * A human readable message indicating details about the transition.
         */
        message?: string;
        /**
         * The reason for the condition's last transition.
         */
        reason?: string;
        /**
         * Status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * Type of replication controller condition.
         */
        type: string;
      }

      /**
       * ReplicationControllerList is a collection of replication controllers.
       */
      interface IoK8sApiCoreV1ReplicationControllerList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
         */
        items: $schemas.IoK8sApiCoreV1ReplicationController[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ReplicationControllerSpec is the specification of a replication controller.
       */
      interface IoK8sApiCoreV1ReplicationControllerSpec {
        /**
         * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
         * @format int32
         */
        minReadySeconds?: number;
        /**
         * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
         * @format int32
         */
        replicas?: number;
        /**
         * Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        selector?: {
          [P: string]: string;
        };
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        template?: $schemas.IoK8sApiCoreV1PodTemplateSpec;
      }

      /**
       * ReplicationControllerStatus represents the current status of a replication controller.
       */
      interface IoK8sApiCoreV1ReplicationControllerStatus {
        /**
         * The number of available replicas (ready for at least minReadySeconds) for this replication controller.
         * @format int32
         */
        availableReplicas?: number;
        /**
         * Represents the latest available observations of a replication controller's current state.
         */
        conditions?: $schemas.IoK8sApiCoreV1ReplicationControllerCondition[];
        /**
         * The number of pods that have labels matching the labels of the pod template of the replication controller.
         * @format int32
         */
        fullyLabeledReplicas?: number;
        /**
         * ObservedGeneration reflects the generation of the most recently observed replication controller.
         * @format int64
         */
        observedGeneration?: number | string;
        /**
         * The number of ready replicas for this replication controller.
         * @format int32
         */
        readyReplicas?: number;
        /**
         * Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
         * @format int32
         */
        replicas: number;
      }

      /**
       * ResourceClaim references one entry in PodSpec.ResourceClaims.
       */
      interface IoK8sApiCoreV1ResourceClaim {
        /**
         * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
         */
        name: string;
        /**
         * Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.
         */
        request?: string;
      }

      /**
       * ResourceFieldSelector represents container resources (cpu, memory) and their output format
       */
      interface IoK8sApiCoreV1ResourceFieldSelector {
        /**
         * Container name: required for volumes, optional for env vars
         */
        containerName?: string;
        /**
         * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
         *
         * The serialization format is:
         *
         * ``` <quantity>        ::= <signedNumber><suffix>
         *
         * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
         *
         * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
         *
         * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
         *
         * <decimalSI>       ::= m | "" | k | M | G | T | P | E
         *
         * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
         *
         * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
         *
         * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
         *
         * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
         *
         * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
         *
         * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
         *
         * The sign will be omitted unless the number is negative.
         *
         * Examples:
         *
         * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
         *
         * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
         *
         * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
         *
         * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
         */
        divisor?: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        /**
         * Required: resource to select
         */
        resource: string;
      }

      /**
       * ResourceHealth represents the health of a resource. It has the latest device health information. This is a part of KEP https://kep.k8s.io/4680 and historical health changes are planned to be added in future iterations of a KEP.
       */
      interface IoK8sApiCoreV1ResourceHealth {
        /**
         * Health of the resource. can be one of:
         *  - Healthy: operates as normal
         *  - Unhealthy: reported unhealthy. We consider this a temporary health issue
         *               since we do not have a mechanism today to distinguish
         *               temporary and permanent issues.
         *  - Unknown: The status cannot be determined.
         *             For example, Device Plugin got unregistered and hasn't been re-registered since.
         *
         * In future we may want to introduce the PermanentlyUnhealthy Status.
         */
        health?: string;
        /**
         * ResourceID is the unique identifier of the resource. See the ResourceID type for more information.
         */
        resourceID: string;
      }

      /**
       * ResourceQuota sets aggregate quota restrictions enforced per namespace
       */
      interface IoK8sApiCoreV1ResourceQuota {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
         */
        spec?: $schemas.IoK8sApiCoreV1ResourceQuotaSpec;
        /**
         * ResourceQuotaStatus defines the enforced hard limits and observed use.
         */
        status?: $schemas.IoK8sApiCoreV1ResourceQuotaStatus;
      }

      /**
       * ResourceQuotaList is a list of ResourceQuota items.
       */
      interface IoK8sApiCoreV1ResourceQuotaList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
         */
        items: $schemas.IoK8sApiCoreV1ResourceQuota[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
       */
      interface IoK8sApiCoreV1ResourceQuotaSpec {
        /**
         * hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
         */
        hard?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
         */
        scopeSelector?: $schemas.IoK8sApiCoreV1ScopeSelector;
        /**
         * A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
         */
        scopes?: string[];
      }

      /**
       * ResourceQuotaStatus defines the enforced hard limits and observed use.
       */
      interface IoK8sApiCoreV1ResourceQuotaStatus {
        /**
         * Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
         */
        hard?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * Used is the current observed total usage of the resource in the namespace.
         */
        used?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
      }

      /**
       * ResourceRequirements describes the compute resource requirements.
       */
      interface IoK8sApiCoreV1ResourceRequirements {
        /**
         * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
         *
         * This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
         *
         * This field is immutable. It can only be set for containers.
         */
        claims?: $schemas.IoK8sApiCoreV1ResourceClaim[];
        /**
         * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        limits?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        requests?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
      }

      interface IoK8sApiCoreV1ResourceStatus {
        /**
         * Name of the resource. Must be unique within the pod and match one of the resources from the pod spec.
         */
        name: string;
        /**
         * List of unique Resources health. Each element in the list contains an unique resource ID and resource health. At a minimum, ResourceID must uniquely identify the Resource allocated to the Pod on the Node for the lifetime of a Pod. See ResourceID type for it's definition.
         */
        resources?: $schemas.IoK8sApiCoreV1ResourceHealth[];
      }

      /**
       * ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
       */
      interface IoK8sApiCoreV1ScaleIoPersistentVolumeSource {
        /**
         * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
         */
        fsType?: string;
        /**
         * gateway is the host address of the ScaleIO API Gateway.
         */
        gateway: string;
        /**
         * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
         */
        protectionDomain?: string;
        /**
         * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
         */
        secretRef: $schemas.IoK8sApiCoreV1SecretReference;
        /**
         * sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
         */
        sslEnabled?: boolean;
        /**
         * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
         */
        storageMode?: string;
        /**
         * storagePool is the ScaleIO Storage Pool associated with the protection domain.
         */
        storagePool?: string;
        /**
         * system is the name of the storage system as configured in ScaleIO.
         */
        system: string;
        /**
         * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
         */
        volumeName?: string;
      }

      /**
       * ScaleIOVolumeSource represents a persistent ScaleIO volume
       */
      interface IoK8sApiCoreV1ScaleIoVolumeSource {
        /**
         * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
         */
        fsType?: string;
        /**
         * gateway is the host address of the ScaleIO API Gateway.
         */
        gateway: string;
        /**
         * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
         */
        protectionDomain?: string;
        /**
         * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        secretRef: $schemas.IoK8sApiCoreV1LocalObjectReference;
        /**
         * sslEnabled Flag enable/disable SSL communication with Gateway, default false
         */
        sslEnabled?: boolean;
        /**
         * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
         */
        storageMode?: string;
        /**
         * storagePool is the ScaleIO Storage Pool associated with the protection domain.
         */
        storagePool?: string;
        /**
         * system is the name of the storage system as configured in ScaleIO.
         */
        system: string;
        /**
         * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
         */
        volumeName?: string;
      }

      /**
       * A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
       */
      interface IoK8sApiCoreV1ScopeSelector {
        /**
         * A list of scope selector requirements by scope of the resources.
         */
        matchExpressions?: $schemas.IoK8sApiCoreV1ScopedResourceSelectorRequirement[];
      }

      /**
       * A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
       */
      interface IoK8sApiCoreV1ScopedResourceSelectorRequirement {
        /**
         * Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
         */
        operator: string;
        /**
         * The name of the scope that the selector applies to.
         */
        scopeName: string;
        /**
         * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
         */
        values?: string[];
      }

      /**
       * SELinuxOptions are the labels to be applied to the container
       */
      interface IoK8sApiCoreV1SeLinuxOptions {
        /**
         * Level is SELinux level label that applies to the container.
         */
        level?: string;
        /**
         * Role is a SELinux role label that applies to the container.
         */
        role?: string;
        /**
         * Type is a SELinux type label that applies to the container.
         */
        type?: string;
        /**
         * User is a SELinux user label that applies to the container.
         */
        user?: string;
      }

      /**
       * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
       */
      interface IoK8sApiCoreV1SeccompProfile {
        /**
         * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
         */
        localhostProfile?: string;
        /**
         * type indicates which kind of seccomp profile will be applied. Valid options are:
         *
         * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
         */
        type: string;
      }

      /**
       * Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
       */
      interface IoK8sApiCoreV1Secret {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
         */
        data?: {
          [P: string]: string;
        };
        /**
         * Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
         */
        immutable?: boolean;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
         */
        stringData?: {
          [P: string]: string;
        };
        /**
         * Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
         */
        type?: string;
      }

      /**
       * SecretEnvSource selects a Secret to populate the environment variables with.
       *
       * The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
       */
      interface IoK8sApiCoreV1SecretEnvSource {
        /**
         * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name?: string;
        /**
         * Specify whether the Secret must be defined
         */
        optional?: boolean;
      }

      /**
       * SecretKeySelector selects a key of a Secret.
       */
      interface IoK8sApiCoreV1SecretKeySelector {
        /**
         * The key of the secret to select from.  Must be a valid secret key.
         */
        key: string;
        /**
         * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name?: string;
        /**
         * Specify whether the Secret or its key must be defined
         */
        optional?: boolean;
      }

      /**
       * SecretList is a list of Secret.
       */
      interface IoK8sApiCoreV1SecretList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret
         */
        items: $schemas.IoK8sApiCoreV1Secret[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * Adapts a secret into a projected volume.
       *
       * The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
       */
      interface IoK8sApiCoreV1SecretProjection {
        /**
         * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
         */
        items?: $schemas.IoK8sApiCoreV1KeyToPath[];
        /**
         * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name?: string;
        /**
         * optional field specify whether the Secret or its key must be defined
         */
        optional?: boolean;
      }

      /**
       * SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
       */
      interface IoK8sApiCoreV1SecretReference {
        /**
         * name is unique within a namespace to reference a secret resource.
         */
        name?: string;
        /**
         * namespace defines the space within which the secret name must be unique.
         */
        namespace?: string;
      }

      /**
       * Adapts a Secret into a volume.
       *
       * The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
       */
      interface IoK8sApiCoreV1SecretVolumeSource {
        /**
         * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
         * @format int32
         */
        defaultMode?: number;
        /**
         * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
         */
        items?: $schemas.IoK8sApiCoreV1KeyToPath[];
        /**
         * optional field specify whether the Secret or its keys must be defined
         */
        optional?: boolean;
        /**
         * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        secretName?: string;
      }

      /**
       * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
       */
      interface IoK8sApiCoreV1SecurityContext {
        /**
         * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
         */
        allowPrivilegeEscalation?: boolean;
        /**
         * AppArmorProfile defines a pod or container's AppArmor settings.
         */
        appArmorProfile?: $schemas.IoK8sApiCoreV1AppArmorProfile;
        /**
         * Adds and removes POSIX capabilities from running containers.
         */
        capabilities?: $schemas.IoK8sApiCoreV1Capabilities;
        /**
         * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
         */
        privileged?: boolean;
        /**
         * procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
         */
        procMount?: string;
        /**
         * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
         */
        readOnlyRootFilesystem?: boolean;
        /**
         * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         * @format int64
         */
        runAsGroup?: number | string;
        /**
         * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        runAsNonRoot?: boolean;
        /**
         * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         * @format int64
         */
        runAsUser?: number | string;
        /**
         * SELinuxOptions are the labels to be applied to the container
         */
        seLinuxOptions?: $schemas.IoK8sApiCoreV1SeLinuxOptions;
        /**
         * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
         */
        seccompProfile?: $schemas.IoK8sApiCoreV1SeccompProfile;
        /**
         * WindowsSecurityContextOptions contain Windows-specific options and credentials.
         */
        windowsOptions?: $schemas.IoK8sApiCoreV1WindowsSecurityContextOptions;
      }

      /**
       * Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
       */
      interface IoK8sApiCoreV1Service {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ServiceSpec describes the attributes that a user creates on a service.
         */
        spec?: $schemas.IoK8sApiCoreV1ServiceSpec;
        /**
         * ServiceStatus represents the current status of a service.
         */
        status?: $schemas.IoK8sApiCoreV1ServiceStatus;
      }

      /**
       * ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
       */
      interface IoK8sApiCoreV1ServiceAccount {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
         */
        automountServiceAccountToken?: boolean;
        /**
         * ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
         */
        imagePullSecrets?: $schemas.IoK8sApiCoreV1LocalObjectReference[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret
         */
        secrets?: $schemas.IoK8sApiCoreV1ObjectReference[];
      }

      /**
       * ServiceAccountList is a list of ServiceAccount objects
       */
      interface IoK8sApiCoreV1ServiceAccountList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
         */
        items: $schemas.IoK8sApiCoreV1ServiceAccount[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
       */
      interface IoK8sApiCoreV1ServiceAccountTokenProjection {
        /**
         * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
         */
        audience?: string;
        /**
         * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
         * @format int64
         */
        expirationSeconds?: number | string;
        /**
         * path is the path relative to the mount point of the file to project the token into.
         */
        path: string;
      }

      /**
       * ServiceList holds a list of services.
       */
      interface IoK8sApiCoreV1ServiceList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * List of services
         */
        items: $schemas.IoK8sApiCoreV1Service[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ServicePort contains information on service's port.
       */
      interface IoK8sApiCoreV1ServicePort {
        /**
         * The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
         * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
         * Kubernetes-defined prefixed names:
         * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
         * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
         * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
         * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
         */
        appProtocol?: string;
        /**
         * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
         */
        name?: string;
        /**
         * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
         * @format int32
         */
        nodePort?: number;
        /**
         * The port that will be exposed by this service.
         * @format int32
         */
        port: number;
        /**
         * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
         */
        protocol?: string;
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        targetPort?: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
      }

      /**
       * ServiceSpec describes the attributes that a user creates on a service.
       */
      interface IoK8sApiCoreV1ServiceSpec {
        /**
         * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
         */
        allocateLoadBalancerNodePorts?: boolean;
        /**
         * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
         */
        clusterIP?: string;
        /**
         * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
         *
         * This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
         */
        clusterIPs?: string[];
        /**
         * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
         */
        externalIPs?: string[];
        /**
         * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
         */
        externalName?: string;
        /**
         * externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get "Cluster" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.
         */
        externalTrafficPolicy?: string;
        /**
         * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.
         * @format int32
         */
        healthCheckNodePort?: number;
        /**
         * InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to "Local", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, "Cluster", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).
         */
        internalTrafficPolicy?: string;
        /**
         * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
         *
         * This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
         */
        ipFamilies?: string[];
        /**
         * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
         */
        ipFamilyPolicy?: string;
        /**
         * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
         */
        loadBalancerClass?: string;
        /**
         * Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations. Using it is non-portable and it may not support dual-stack. Users are encouraged to use implementation-specific annotations when available.
         */
        loadBalancerIP?: string;
        /**
         * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
         */
        loadBalancerSourceRanges?: string[];
        /**
         * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
         */
        ports?: $schemas.IoK8sApiCoreV1ServicePort[];
        /**
         * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
         */
        publishNotReadyAddresses?: boolean;
        /**
         * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
         */
        selector?: {
          [P: string]: string;
        };
        /**
         * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
         */
        sessionAffinity?: string;
        /**
         * SessionAffinityConfig represents the configurations of session affinity.
         */
        sessionAffinityConfig?: $schemas.IoK8sApiCoreV1SessionAffinityConfig;
        /**
         * TrafficDistribution offers a way to express preferences for how traffic is distributed to Service endpoints. Implementations can use this field as a hint, but are not required to guarantee strict adherence. If the field is not set, the implementation will apply its default routing strategy. If set to "PreferClose", implementations should prioritize endpoints that are topologically close (e.g., same zone). This is a beta field and requires enabling ServiceTrafficDistribution feature.
         */
        trafficDistribution?: string;
        /**
         * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
         */
        type?: string;
      }

      /**
       * ServiceStatus represents the current status of a service.
       */
      interface IoK8sApiCoreV1ServiceStatus {
        /**
         * Current service state
         */
        conditions?: $schemas.IoK8sApimachineryPkgApisMetaV1Condition[];
        /**
         * LoadBalancerStatus represents the status of a load-balancer.
         */
        loadBalancer?: $schemas.IoK8sApiCoreV1LoadBalancerStatus;
      }

      /**
       * SessionAffinityConfig represents the configurations of session affinity.
       */
      interface IoK8sApiCoreV1SessionAffinityConfig {
        /**
         * ClientIPConfig represents the configurations of Client IP based session affinity.
         */
        clientIP?: $schemas.IoK8sApiCoreV1ClientIpConfig;
      }

      /**
       * SleepAction describes a "sleep" action.
       */
      interface IoK8sApiCoreV1SleepAction {
        /**
         * Seconds is the number of seconds to sleep.
         * @format int64
         */
        seconds: number | string;
      }

      /**
       * Represents a StorageOS persistent volume resource.
       */
      interface IoK8sApiCoreV1StorageOsPersistentVolumeSource {
        /**
         * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
         */
        fsType?: string;
        /**
         * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        secretRef?: $schemas.IoK8sApiCoreV1ObjectReference;
        /**
         * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
         */
        volumeName?: string;
        /**
         * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
         */
        volumeNamespace?: string;
      }

      /**
       * Represents a StorageOS persistent volume resource.
       */
      interface IoK8sApiCoreV1StorageOsVolumeSource {
        /**
         * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
         */
        fsType?: string;
        /**
         * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         */
        readOnly?: boolean;
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        secretRef?: $schemas.IoK8sApiCoreV1LocalObjectReference;
        /**
         * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
         */
        volumeName?: string;
        /**
         * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
         */
        volumeNamespace?: string;
      }

      /**
       * Sysctl defines a kernel parameter to be set
       */
      interface IoK8sApiCoreV1Sysctl {
        /**
         * Name of a property to set
         */
        name: string;
        /**
         * Value of a property to set
         */
        value: string;
      }

      /**
       * The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
       */
      interface IoK8sApiCoreV1Taint {
        /**
         * Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
         */
        effect: string;
        /**
         * Required. The taint key to be applied to a node.
         */
        key: string;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        timeAdded?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * The taint value corresponding to the taint key.
         */
        value?: string;
      }

      /**
       * TCPSocketAction describes an action based on opening a socket
       */
      interface IoK8sApiCoreV1TcpSocketAction {
        /**
         * Optional: Host name to connect to, defaults to the pod IP.
         */
        host?: string;
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        port: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
      }

      /**
       * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
       */
      interface IoK8sApiCoreV1Toleration {
        /**
         * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
         */
        effect?: string;
        /**
         * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
         */
        key?: string;
        /**
         * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
         */
        operator?: string;
        /**
         * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
         * @format int64
         */
        tolerationSeconds?: number | string;
        /**
         * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
         */
        value?: string;
      }

      /**
       * A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
       */
      interface IoK8sApiCoreV1TopologySelectorLabelRequirement {
        /**
         * The label key that the selector applies to.
         */
        key: string;
        /**
         * An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
         */
        values: string[];
      }

      /**
       * A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
       */
      interface IoK8sApiCoreV1TopologySelectorTerm {
        /**
         * A list of topology selector requirements by labels.
         */
        matchLabelExpressions?: $schemas.IoK8sApiCoreV1TopologySelectorLabelRequirement[];
      }

      /**
       * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
       */
      interface IoK8sApiCoreV1TopologySpreadConstraint {
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        labelSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
         *
         * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
         */
        matchLabelKeys?: string[];
        /**
         * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
         * @format int32
         */
        maxSkew: number;
        /**
         * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
         *
         * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
         * @format int32
         */
        minDomains?: number;
        /**
         * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
         *
         * If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
         */
        nodeAffinityPolicy?: string;
        /**
         * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
         *
         * If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
         */
        nodeTaintsPolicy?: string;
        /**
         * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
         */
        topologyKey: string;
        /**
         * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
         *   but giving higher precedence to topologies that would help reduce the
         *   skew.
         * A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
         */
        whenUnsatisfiable: string;
      }

      /**
       * TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
       */
      interface IoK8sApiCoreV1TypedLocalObjectReference {
        /**
         * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
         */
        apiGroup?: string;
        /**
         * Kind is the type of resource being referenced
         */
        kind: string;
        /**
         * Name is the name of resource being referenced
         */
        name: string;
      }

      interface IoK8sApiCoreV1TypedObjectReference {
        /**
         * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
         */
        apiGroup?: string;
        /**
         * Kind is the type of resource being referenced
         */
        kind: string;
        /**
         * Name is the name of resource being referenced
         */
        name: string;
        /**
         * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        namespace?: string;
      }

      /**
       * Volume represents a named volume in a pod that may be accessed by any container in the pod.
       */
      interface IoK8sApiCoreV1Volume {
        /**
         * Represents a Persistent Disk resource in AWS.
         *
         * An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
         */
        awsElasticBlockStore?: $schemas.IoK8sApiCoreV1AwsElasticBlockStoreVolumeSource;
        /**
         * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        azureDisk?: $schemas.IoK8sApiCoreV1AzureDiskVolumeSource;
        /**
         * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        azureFile?: $schemas.IoK8sApiCoreV1AzureFileVolumeSource;
        /**
         * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
         */
        cephfs?: $schemas.IoK8sApiCoreV1CephFsVolumeSource;
        /**
         * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
         */
        cinder?: $schemas.IoK8sApiCoreV1CinderVolumeSource;
        /**
         * Adapts a ConfigMap into a volume.
         *
         * The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
         */
        configMap?: $schemas.IoK8sApiCoreV1ConfigMapVolumeSource;
        /**
         * Represents a source location of a volume to mount, managed by an external CSI driver
         */
        csi?: $schemas.IoK8sApiCoreV1CsiVolumeSource;
        /**
         * DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
         */
        downwardAPI?: $schemas.IoK8sApiCoreV1DownwardApiVolumeSource;
        /**
         * Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
         */
        emptyDir?: $schemas.IoK8sApiCoreV1EmptyDirVolumeSource;
        /**
         * Represents an ephemeral volume that is handled by a normal storage driver.
         */
        ephemeral?: $schemas.IoK8sApiCoreV1EphemeralVolumeSource;
        /**
         * Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
         */
        fc?: $schemas.IoK8sApiCoreV1FcVolumeSource;
        /**
         * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        flexVolume?: $schemas.IoK8sApiCoreV1FlexVolumeSource;
        /**
         * Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
         */
        flocker?: $schemas.IoK8sApiCoreV1FlockerVolumeSource;
        /**
         * Represents a Persistent Disk resource in Google Compute Engine.
         *
         * A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
         */
        gcePersistentDisk?: $schemas.IoK8sApiCoreV1GcePersistentDiskVolumeSource;
        /**
         * Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
         *
         * DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        gitRepo?: $schemas.IoK8sApiCoreV1GitRepoVolumeSource;
        /**
         * Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
         */
        glusterfs?: $schemas.IoK8sApiCoreV1GlusterfsVolumeSource;
        /**
         * Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
         */
        hostPath?: $schemas.IoK8sApiCoreV1HostPathVolumeSource;
        /**
         * ImageVolumeSource represents a image volume resource.
         */
        image?: $schemas.IoK8sApiCoreV1ImageVolumeSource;
        /**
         * Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
         */
        iscsi?: $schemas.IoK8sApiCoreV1IscsiVolumeSource;
        /**
         * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name: string;
        /**
         * Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
         */
        nfs?: $schemas.IoK8sApiCoreV1NfsVolumeSource;
        /**
         * PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
         */
        persistentVolumeClaim?: $schemas.IoK8sApiCoreV1PersistentVolumeClaimVolumeSource;
        /**
         * Represents a Photon Controller persistent disk resource.
         */
        photonPersistentDisk?: $schemas.IoK8sApiCoreV1PhotonPersistentDiskVolumeSource;
        /**
         * PortworxVolumeSource represents a Portworx volume resource.
         */
        portworxVolume?: $schemas.IoK8sApiCoreV1PortworxVolumeSource;
        /**
         * Represents a projected volume source
         */
        projected?: $schemas.IoK8sApiCoreV1ProjectedVolumeSource;
        /**
         * Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
         */
        quobyte?: $schemas.IoK8sApiCoreV1QuobyteVolumeSource;
        /**
         * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
         */
        rbd?: $schemas.IoK8sApiCoreV1RbdVolumeSource;
        /**
         * ScaleIOVolumeSource represents a persistent ScaleIO volume
         */
        scaleIO?: $schemas.IoK8sApiCoreV1ScaleIoVolumeSource;
        /**
         * Adapts a Secret into a volume.
         *
         * The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
         */
        secret?: $schemas.IoK8sApiCoreV1SecretVolumeSource;
        /**
         * Represents a StorageOS persistent volume resource.
         */
        storageos?: $schemas.IoK8sApiCoreV1StorageOsVolumeSource;
        /**
         * Represents a vSphere volume resource.
         */
        vsphereVolume?: $schemas.IoK8sApiCoreV1VsphereVirtualDiskVolumeSource;
      }

      /**
       * volumeDevice describes a mapping of a raw block device within a container.
       */
      interface IoK8sApiCoreV1VolumeDevice {
        /**
         * devicePath is the path inside of the container that the device will be mapped to.
         */
        devicePath: string;
        /**
         * name must match the name of a persistentVolumeClaim in the pod
         */
        name: string;
      }

      /**
       * VolumeMount describes a mounting of a Volume within a container.
       */
      interface IoK8sApiCoreV1VolumeMount {
        /**
         * Path within the container at which the volume should be mounted.  Must not contain ':'.
         */
        mountPath: string;
        /**
         * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
         */
        mountPropagation?: string;
        /**
         * This must match the Name of a Volume.
         */
        name: string;
        /**
         * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
         */
        readOnly?: boolean;
        /**
         * RecursiveReadOnly specifies whether read-only mounts should be handled recursively.
         *
         * If ReadOnly is false, this field has no meaning and must be unspecified.
         *
         * If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.
         *
         * If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).
         *
         * If this field is not specified, it is treated as an equivalent of Disabled.
         */
        recursiveReadOnly?: string;
        /**
         * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
         */
        subPath?: string;
        /**
         * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
         */
        subPathExpr?: string;
      }

      /**
       * VolumeMountStatus shows status of volume mounts.
       */
      interface IoK8sApiCoreV1VolumeMountStatus {
        /**
         * MountPath corresponds to the original VolumeMount.
         */
        mountPath: string;
        /**
         * Name corresponds to the name of the original VolumeMount.
         */
        name: string;
        /**
         * ReadOnly corresponds to the original VolumeMount.
         */
        readOnly?: boolean;
        /**
         * RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.
         */
        recursiveReadOnly?: string;
      }

      /**
       * VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
       */
      interface IoK8sApiCoreV1VolumeNodeAffinity {
        /**
         * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
         */
        required?: $schemas.IoK8sApiCoreV1NodeSelector;
      }

      /**
       * Projection that may be projected along with other supported volume types. Exactly one of these fields must be set.
       */
      interface IoK8sApiCoreV1VolumeProjection {
        /**
         * ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
         */
        clusterTrustBundle?: $schemas.IoK8sApiCoreV1ClusterTrustBundleProjection;
        /**
         * Adapts a ConfigMap into a projected volume.
         *
         * The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
         */
        configMap?: $schemas.IoK8sApiCoreV1ConfigMapProjection;
        /**
         * Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
         */
        downwardAPI?: $schemas.IoK8sApiCoreV1DownwardApiProjection;
        /**
         * Adapts a secret into a projected volume.
         *
         * The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
         */
        secret?: $schemas.IoK8sApiCoreV1SecretProjection;
        /**
         * ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
         */
        serviceAccountToken?: $schemas.IoK8sApiCoreV1ServiceAccountTokenProjection;
      }

      /**
       * VolumeResourceRequirements describes the storage resource requirements for a volume.
       */
      interface IoK8sApiCoreV1VolumeResourceRequirements {
        /**
         * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        limits?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
        /**
         * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        requests?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
      }

      /**
       * Represents a vSphere volume resource.
       */
      interface IoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
        /**
         * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
         */
        fsType?: string;
        /**
         * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
         */
        storagePolicyID?: string;
        /**
         * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
         */
        storagePolicyName?: string;
        /**
         * volumePath is the path that identifies vSphere volume vmdk
         */
        volumePath: string;
      }

      /**
       * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
       */
      interface IoK8sApiCoreV1WeightedPodAffinityTerm {
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        podAffinityTerm: $schemas.IoK8sApiCoreV1PodAffinityTerm;
        /**
         * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
         * @format int32
         */
        weight: number;
      }

      /**
       * WindowsSecurityContextOptions contain Windows-specific options and credentials.
       */
      interface IoK8sApiCoreV1WindowsSecurityContextOptions {
        /**
         * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
         */
        gmsaCredentialSpec?: string;
        /**
         * GMSACredentialSpecName is the name of the GMSA credential spec to use.
         */
        gmsaCredentialSpecName?: string;
        /**
         * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
         */
        hostProcess?: boolean;
        /**
         * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         */
        runAsUserName?: string;
      }

      /**
       * Endpoint represents a single logical "backend" implementing a service.
       */
      interface IoK8sApiDiscoveryV1Endpoint {
        /**
         * addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. These are all assumed to be fungible and clients may choose to only use the first element. Refer to: https://issue.k8s.io/106267
         */
        addresses: string[];
        /**
         * EndpointConditions represents the current condition of an endpoint.
         */
        conditions?: $schemas.IoK8sApiDiscoveryV1EndpointConditions;
        /**
         * deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.
         */
        deprecatedTopology?: {
          [P: string]: string;
        };
        /**
         * EndpointHints provides hints describing how an endpoint should be consumed.
         */
        hints?: $schemas.IoK8sApiDiscoveryV1EndpointHints;
        /**
         * hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
         */
        hostname?: string;
        /**
         * nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
         */
        nodeName?: string;
        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        targetRef?: $schemas.IoK8sApiCoreV1ObjectReference;
        /**
         * zone is the name of the Zone this endpoint exists in.
         */
        zone?: string;
      }

      /**
       * EndpointConditions represents the current condition of an endpoint.
       */
      interface IoK8sApiDiscoveryV1EndpointConditions {
        /**
         * ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints, except when the normal readiness behavior is being explicitly overridden, for example when the associated Service has set the publishNotReadyAddresses flag.
         */
        ready?: boolean;
        /**
         * serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition.
         */
        serving?: boolean;
        /**
         * terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating.
         */
        terminating?: boolean;
      }

      /**
       * EndpointHints provides hints describing how an endpoint should be consumed.
       */
      interface IoK8sApiDiscoveryV1EndpointHints {
        /**
         * forZones indicates the zone(s) this endpoint should be consumed by to enable topology aware routing.
         */
        forZones?: $schemas.IoK8sApiDiscoveryV1ForZone[];
      }

      /**
       * EndpointPort represents a Port used by an EndpointSlice
       */
      interface IoK8sApiDiscoveryV1EndpointPort {
        /**
         * The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:
         * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
         * Kubernetes-defined prefixed names:
         * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
         * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
         * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
         * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
         */
        appProtocol?: string;
        /**
         * name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is derived from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
         */
        name?: string;
        /**
         * port represents the port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
         * @format int32
         */
        port?: number;
        /**
         * protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
         */
        protocol?: string;
      }

      /**
       * EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
       */
      interface IoK8sApiDiscoveryV1EndpointSlice {
        /**
         * addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
         */
        addressType: string;
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.
         */
        endpoints: $schemas.IoK8sApiDiscoveryV1Endpoint[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of 100 ports.
         */
        ports?: $schemas.IoK8sApiDiscoveryV1EndpointPort[];
      }

      /**
       * EndpointSliceList represents a list of endpoint slices
       */
      interface IoK8sApiDiscoveryV1EndpointSliceList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of endpoint slices
         */
        items: $schemas.IoK8sApiDiscoveryV1EndpointSlice[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ForZone provides information about which zones should consume this endpoint.
       */
      interface IoK8sApiDiscoveryV1ForZone {
        /**
         * name represents the name of the zone.
         */
        name: string;
      }

      /**
       * Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
       */
      interface IoK8sApiEventsV1Event {
        /**
         * action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.
         */
        action?: string;
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
         * @format int32
         */
        deprecatedCount?: number;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        deprecatedFirstTimestamp?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        deprecatedLastTimestamp?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * EventSource contains information for an event.
         */
        deprecatedSource?: $schemas.IoK8sApiCoreV1EventSource;
        /**
         * MicroTime is version of Time with microsecond level precision.
         * @format date-time
         */
        eventTime: $schemas.IoK8sApimachineryPkgApisMetaV1MicroTime;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
         */
        note?: string;
        /**
         * reason is why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.
         */
        reason?: string;
        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        regarding?: $schemas.IoK8sApiCoreV1ObjectReference;
        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        related?: $schemas.IoK8sApiCoreV1ObjectReference;
        /**
         * reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.
         */
        reportingController?: string;
        /**
         * reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.
         */
        reportingInstance?: string;
        /**
         * EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
         */
        series?: $schemas.IoK8sApiEventsV1EventSeries;
        /**
         * type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.
         */
        type?: string;
      }

      /**
       * EventList is a list of Event objects.
       */
      interface IoK8sApiEventsV1EventList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is a list of schema objects.
         */
        items: $schemas.IoK8sApiEventsV1Event[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
       */
      interface IoK8sApiEventsV1EventSeries {
        /**
         * count is the number of occurrences in this series up to the last heartbeat time.
         * @format int32
         */
        count: number;
        /**
         * MicroTime is version of Time with microsecond level precision.
         * @format date-time
         */
        lastObservedTime: $schemas.IoK8sApimachineryPkgApisMetaV1MicroTime;
      }

      /**
       * ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.
       */
      interface IoK8sApiFlowcontrolV1ExemptPriorityLevelConfiguration {
        /**
         * `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels.  This value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.
         *
         * LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
         * @format int32
         */
        lendablePercent?: number;
        /**
         * `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats nominally reserved for this priority level. This DOES NOT limit the dispatching from this priority level but affects the other priority levels through the borrowing mechanism. The server's concurrency limit (ServerCL) is divided among all the priority levels in proportion to their NCS values:
         *
         * NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)
         *
         * Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of zero.
         * @format int32
         */
        nominalConcurrencyShares?: number;
      }

      /**
       * FlowDistinguisherMethod specifies the method of a flow distinguisher.
       */
      interface IoK8sApiFlowcontrolV1FlowDistinguisherMethod {
        /**
         * `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
         */
        type: string;
      }

      /**
       * FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
       */
      interface IoK8sApiFlowcontrolV1FlowSchema {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * FlowSchemaSpec describes how the FlowSchema's specification looks like.
         */
        spec?: $schemas.IoK8sApiFlowcontrolV1FlowSchemaSpec;
        /**
         * FlowSchemaStatus represents the current state of a FlowSchema.
         */
        status?: $schemas.IoK8sApiFlowcontrolV1FlowSchemaStatus;
      }

      /**
       * FlowSchemaCondition describes conditions for a FlowSchema.
       */
      interface IoK8sApiFlowcontrolV1FlowSchemaCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * `message` is a human-readable message indicating details about last transition.
         */
        message?: string;
        /**
         * `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
         */
        reason?: string;
        /**
         * `status` is the status of the condition. Can be True, False, Unknown. Required.
         */
        status?: string;
        /**
         * `type` is the type of the condition. Required.
         */
        type?: string;
      }

      /**
       * FlowSchemaList is a list of FlowSchema objects.
       */
      interface IoK8sApiFlowcontrolV1FlowSchemaList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * `items` is a list of FlowSchemas.
         */
        items: $schemas.IoK8sApiFlowcontrolV1FlowSchema[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * FlowSchemaSpec describes how the FlowSchema's specification looks like.
       */
      interface IoK8sApiFlowcontrolV1FlowSchemaSpec {
        /**
         * FlowDistinguisherMethod specifies the method of a flow distinguisher.
         */
        distinguisherMethod?: $schemas.IoK8sApiFlowcontrolV1FlowDistinguisherMethod;
        /**
         * `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
         * @format int32
         */
        matchingPrecedence?: number;
        /**
         * PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
         */
        priorityLevelConfiguration: $schemas.IoK8sApiFlowcontrolV1PriorityLevelConfigurationReference;
        /**
         * `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
         */
        rules?: $schemas.IoK8sApiFlowcontrolV1PolicyRulesWithSubjects[];
      }

      /**
       * FlowSchemaStatus represents the current state of a FlowSchema.
       */
      interface IoK8sApiFlowcontrolV1FlowSchemaStatus {
        /**
         * `conditions` is a list of the current states of FlowSchema.
         */
        conditions?: $schemas.IoK8sApiFlowcontrolV1FlowSchemaCondition[];
      }

      /**
       * GroupSubject holds detailed information for group-kind subject.
       */
      interface IoK8sApiFlowcontrolV1GroupSubject {
        /**
         * name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
         */
        name: string;
      }

      /**
       * LimitResponse defines how to handle requests that can not be executed right now.
       */
      interface IoK8sApiFlowcontrolV1LimitResponse {
        /**
         * QueuingConfiguration holds the configuration parameters for queuing
         */
        queuing?: $schemas.IoK8sApiFlowcontrolV1QueuingConfiguration;
        /**
         * `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
         */
        type: string;
      }

      /**
       * LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
       *   - How are requests for this priority level limited?
       *   - What should be done with requests that exceed the limit?
       */
      interface IoK8sApiFlowcontrolV1LimitedPriorityLevelConfiguration {
        /**
         * `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.
         *
         * BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
         *
         * The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.
         * @format int32
         */
        borrowingLimitPercent?: number;
        /**
         * `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.
         *
         * LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
         * @format int32
         */
        lendablePercent?: number;
        /**
         * LimitResponse defines how to handle requests that can not be executed right now.
         */
        limitResponse?: $schemas.IoK8sApiFlowcontrolV1LimitResponse;
        /**
         * `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:
         *
         * NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)
         *
         * Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level.
         *
         * If not specified, this field defaults to a value of 30.
         *
         * Setting this field to zero supports the construction of a "jail" for this priority level that is used to hold some request(s)
         * @format int32
         */
        nominalConcurrencyShares?: number;
      }

      /**
       * NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
       */
      interface IoK8sApiFlowcontrolV1NonResourcePolicyRule {
        /**
         * `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
         *   - "/healthz" is legal
         *   - "/hea*" is illegal
         *   - "/hea" is legal but matches nothing
         *   - "/hea/*" also matches nothing
         *   - "/healthz/*" matches all per-component health checks.
         * "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
         */
        nonResourceURLs: string[];
        /**
         * `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
         */
        verbs: string[];
      }

      /**
       * PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
       */
      interface IoK8sApiFlowcontrolV1PolicyRulesWithSubjects {
        /**
         * `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
         */
        nonResourceRules?: $schemas.IoK8sApiFlowcontrolV1NonResourcePolicyRule[];
        /**
         * `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
         */
        resourceRules?: $schemas.IoK8sApiFlowcontrolV1ResourcePolicyRule[];
        /**
         * subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
         */
        subjects: $schemas.IoK8sApiFlowcontrolV1Subject[];
      }

      /**
       * PriorityLevelConfiguration represents the configuration of a priority level.
       */
      interface IoK8sApiFlowcontrolV1PriorityLevelConfiguration {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * PriorityLevelConfigurationSpec specifies the configuration of a priority level.
         */
        spec?: $schemas.IoK8sApiFlowcontrolV1PriorityLevelConfigurationSpec;
        /**
         * PriorityLevelConfigurationStatus represents the current state of a "request-priority".
         */
        status?: $schemas.IoK8sApiFlowcontrolV1PriorityLevelConfigurationStatus;
      }

      /**
       * PriorityLevelConfigurationCondition defines the condition of priority level.
       */
      interface IoK8sApiFlowcontrolV1PriorityLevelConfigurationCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * `message` is a human-readable message indicating details about last transition.
         */
        message?: string;
        /**
         * `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
         */
        reason?: string;
        /**
         * `status` is the status of the condition. Can be True, False, Unknown. Required.
         */
        status?: string;
        /**
         * `type` is the type of the condition. Required.
         */
        type?: string;
      }

      /**
       * PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
       */
      interface IoK8sApiFlowcontrolV1PriorityLevelConfigurationList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * `items` is a list of request-priorities.
         */
        items: $schemas.IoK8sApiFlowcontrolV1PriorityLevelConfiguration[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
       */
      interface IoK8sApiFlowcontrolV1PriorityLevelConfigurationReference {
        /**
         * `name` is the name of the priority level configuration being referenced Required.
         */
        name: string;
      }

      /**
       * PriorityLevelConfigurationSpec specifies the configuration of a priority level.
       */
      interface IoK8sApiFlowcontrolV1PriorityLevelConfigurationSpec {
        /**
         * ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.
         */
        exempt?: $schemas.IoK8sApiFlowcontrolV1ExemptPriorityLevelConfiguration;
        /**
         * LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
         *   - How are requests for this priority level limited?
         *   - What should be done with requests that exceed the limit?
         */
        limited?: $schemas.IoK8sApiFlowcontrolV1LimitedPriorityLevelConfiguration;
        /**
         * `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
         */
        type: string;
      }

      /**
       * PriorityLevelConfigurationStatus represents the current state of a "request-priority".
       */
      interface IoK8sApiFlowcontrolV1PriorityLevelConfigurationStatus {
        /**
         * `conditions` is the current state of "request-priority".
         */
        conditions?: $schemas.IoK8sApiFlowcontrolV1PriorityLevelConfigurationCondition[];
      }

      /**
       * QueuingConfiguration holds the configuration parameters for queuing
       */
      interface IoK8sApiFlowcontrolV1QueuingConfiguration {
        /**
         * `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
         * @format int32
         */
        handSize?: number;
        /**
         * `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
         * @format int32
         */
        queueLengthLimit?: number;
        /**
         * `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
         * @format int32
         */
        queues?: number;
      }

      /**
       * ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.
       */
      interface IoK8sApiFlowcontrolV1ResourcePolicyRule {
        /**
         * `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
         */
        apiGroups: string[];
        /**
         * `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
         */
        clusterScope?: boolean;
        /**
         * `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
         */
        namespaces?: string[];
        /**
         * `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
         */
        resources: string[];
        /**
         * `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
         */
        verbs: string[];
      }

      /**
       * ServiceAccountSubject holds detailed information for service-account-kind subject.
       */
      interface IoK8sApiFlowcontrolV1ServiceAccountSubject {
        /**
         * `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
         */
        name: string;
        /**
         * `namespace` is the namespace of matching ServiceAccount objects. Required.
         */
        namespace: string;
      }

      /**
       * Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
       */
      interface IoK8sApiFlowcontrolV1Subject {
        /**
         * GroupSubject holds detailed information for group-kind subject.
         */
        group?: $schemas.IoK8sApiFlowcontrolV1GroupSubject;
        /**
         * `kind` indicates which one of the other fields is non-empty. Required
         */
        kind: string;
        /**
         * ServiceAccountSubject holds detailed information for service-account-kind subject.
         */
        serviceAccount?: $schemas.IoK8sApiFlowcontrolV1ServiceAccountSubject;
        /**
         * UserSubject holds detailed information for user-kind subject.
         */
        user?: $schemas.IoK8sApiFlowcontrolV1UserSubject;
      }

      /**
       * UserSubject holds detailed information for user-kind subject.
       */
      interface IoK8sApiFlowcontrolV1UserSubject {
        /**
         * `name` is the username that matches, or "*" to match all usernames. Required.
         */
        name: string;
      }

      /**
       * ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.
       */
      interface IoK8sApiFlowcontrolV1beta3ExemptPriorityLevelConfiguration {
        /**
         * `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels.  This value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.
         *
         * LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
         * @format int32
         */
        lendablePercent?: number;
        /**
         * `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats nominally reserved for this priority level. This DOES NOT limit the dispatching from this priority level but affects the other priority levels through the borrowing mechanism. The server's concurrency limit (ServerCL) is divided among all the priority levels in proportion to their NCS values:
         *
         * NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)
         *
         * Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of zero.
         * @format int32
         */
        nominalConcurrencyShares?: number;
      }

      /**
       * FlowDistinguisherMethod specifies the method of a flow distinguisher.
       */
      interface IoK8sApiFlowcontrolV1beta3FlowDistinguisherMethod {
        /**
         * `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
         */
        type: string;
      }

      /**
       * FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
       */
      interface IoK8sApiFlowcontrolV1beta3FlowSchema {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * FlowSchemaSpec describes how the FlowSchema's specification looks like.
         */
        spec?: $schemas.IoK8sApiFlowcontrolV1beta3FlowSchemaSpec;
        /**
         * FlowSchemaStatus represents the current state of a FlowSchema.
         */
        status?: $schemas.IoK8sApiFlowcontrolV1beta3FlowSchemaStatus;
      }

      /**
       * FlowSchemaCondition describes conditions for a FlowSchema.
       */
      interface IoK8sApiFlowcontrolV1beta3FlowSchemaCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * `message` is a human-readable message indicating details about last transition.
         */
        message?: string;
        /**
         * `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
         */
        reason?: string;
        /**
         * `status` is the status of the condition. Can be True, False, Unknown. Required.
         */
        status?: string;
        /**
         * `type` is the type of the condition. Required.
         */
        type?: string;
      }

      /**
       * FlowSchemaList is a list of FlowSchema objects.
       */
      interface IoK8sApiFlowcontrolV1beta3FlowSchemaList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * `items` is a list of FlowSchemas.
         */
        items: $schemas.IoK8sApiFlowcontrolV1beta3FlowSchema[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * FlowSchemaSpec describes how the FlowSchema's specification looks like.
       */
      interface IoK8sApiFlowcontrolV1beta3FlowSchemaSpec {
        /**
         * FlowDistinguisherMethod specifies the method of a flow distinguisher.
         */
        distinguisherMethod?: $schemas.IoK8sApiFlowcontrolV1beta3FlowDistinguisherMethod;
        /**
         * `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
         * @format int32
         */
        matchingPrecedence?: number;
        /**
         * PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
         */
        priorityLevelConfiguration: $schemas.IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationReference;
        /**
         * `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
         */
        rules?: $schemas.IoK8sApiFlowcontrolV1beta3PolicyRulesWithSubjects[];
      }

      /**
       * FlowSchemaStatus represents the current state of a FlowSchema.
       */
      interface IoK8sApiFlowcontrolV1beta3FlowSchemaStatus {
        /**
         * `conditions` is a list of the current states of FlowSchema.
         */
        conditions?: $schemas.IoK8sApiFlowcontrolV1beta3FlowSchemaCondition[];
      }

      /**
       * GroupSubject holds detailed information for group-kind subject.
       */
      interface IoK8sApiFlowcontrolV1beta3GroupSubject {
        /**
         * name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
         */
        name: string;
      }

      /**
       * LimitResponse defines how to handle requests that can not be executed right now.
       */
      interface IoK8sApiFlowcontrolV1beta3LimitResponse {
        /**
         * QueuingConfiguration holds the configuration parameters for queuing
         */
        queuing?: $schemas.IoK8sApiFlowcontrolV1beta3QueuingConfiguration;
        /**
         * `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
         */
        type: string;
      }

      /**
       * LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
       *   - How are requests for this priority level limited?
       *   - What should be done with requests that exceed the limit?
       */
      interface IoK8sApiFlowcontrolV1beta3LimitedPriorityLevelConfiguration {
        /**
         * `borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.
         *
         * BorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )
         *
         * The value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.
         * @format int32
         */
        borrowingLimitPercent?: number;
        /**
         * `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.
         *
         * LendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )
         * @format int32
         */
        lendablePercent?: number;
        /**
         * LimitResponse defines how to handle requests that can not be executed right now.
         */
        limitResponse?: $schemas.IoK8sApiFlowcontrolV1beta3LimitResponse;
        /**
         * `nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:
         *
         * NominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)
         *
         * Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of 30.
         * @format int32
         */
        nominalConcurrencyShares?: number;
      }

      /**
       * NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
       */
      interface IoK8sApiFlowcontrolV1beta3NonResourcePolicyRule {
        /**
         * `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
         *   - "/healthz" is legal
         *   - "/hea*" is illegal
         *   - "/hea" is legal but matches nothing
         *   - "/hea/*" also matches nothing
         *   - "/healthz/*" matches all per-component health checks.
         * "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
         */
        nonResourceURLs: string[];
        /**
         * `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
         */
        verbs: string[];
      }

      /**
       * PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
       */
      interface IoK8sApiFlowcontrolV1beta3PolicyRulesWithSubjects {
        /**
         * `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
         */
        nonResourceRules?: $schemas.IoK8sApiFlowcontrolV1beta3NonResourcePolicyRule[];
        /**
         * `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
         */
        resourceRules?: $schemas.IoK8sApiFlowcontrolV1beta3ResourcePolicyRule[];
        /**
         * subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
         */
        subjects: $schemas.IoK8sApiFlowcontrolV1beta3Subject[];
      }

      /**
       * PriorityLevelConfiguration represents the configuration of a priority level.
       */
      interface IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * PriorityLevelConfigurationSpec specifies the configuration of a priority level.
         */
        spec?: $schemas.IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationSpec;
        /**
         * PriorityLevelConfigurationStatus represents the current state of a "request-priority".
         */
        status?: $schemas.IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationStatus;
      }

      /**
       * PriorityLevelConfigurationCondition defines the condition of priority level.
       */
      interface IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * `message` is a human-readable message indicating details about last transition.
         */
        message?: string;
        /**
         * `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
         */
        reason?: string;
        /**
         * `status` is the status of the condition. Can be True, False, Unknown. Required.
         */
        status?: string;
        /**
         * `type` is the type of the condition. Required.
         */
        type?: string;
      }

      /**
       * PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
       */
      interface IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * `items` is a list of request-priorities.
         */
        items: $schemas.IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
       */
      interface IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationReference {
        /**
         * `name` is the name of the priority level configuration being referenced Required.
         */
        name: string;
      }

      /**
       * PriorityLevelConfigurationSpec specifies the configuration of a priority level.
       */
      interface IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationSpec {
        /**
         * ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.
         */
        exempt?: $schemas.IoK8sApiFlowcontrolV1beta3ExemptPriorityLevelConfiguration;
        /**
         * LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
         *   - How are requests for this priority level limited?
         *   - What should be done with requests that exceed the limit?
         */
        limited?: $schemas.IoK8sApiFlowcontrolV1beta3LimitedPriorityLevelConfiguration;
        /**
         * `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
         */
        type: string;
      }

      /**
       * PriorityLevelConfigurationStatus represents the current state of a "request-priority".
       */
      interface IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationStatus {
        /**
         * `conditions` is the current state of "request-priority".
         */
        conditions?: $schemas.IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationCondition[];
      }

      /**
       * QueuingConfiguration holds the configuration parameters for queuing
       */
      interface IoK8sApiFlowcontrolV1beta3QueuingConfiguration {
        /**
         * `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
         * @format int32
         */
        handSize?: number;
        /**
         * `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
         * @format int32
         */
        queueLengthLimit?: number;
        /**
         * `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
         * @format int32
         */
        queues?: number;
      }

      /**
       * ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.
       */
      interface IoK8sApiFlowcontrolV1beta3ResourcePolicyRule {
        /**
         * `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
         */
        apiGroups: string[];
        /**
         * `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
         */
        clusterScope?: boolean;
        /**
         * `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
         */
        namespaces?: string[];
        /**
         * `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
         */
        resources: string[];
        /**
         * `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
         */
        verbs: string[];
      }

      /**
       * ServiceAccountSubject holds detailed information for service-account-kind subject.
       */
      interface IoK8sApiFlowcontrolV1beta3ServiceAccountSubject {
        /**
         * `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
         */
        name: string;
        /**
         * `namespace` is the namespace of matching ServiceAccount objects. Required.
         */
        namespace: string;
      }

      /**
       * Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
       */
      interface IoK8sApiFlowcontrolV1beta3Subject {
        /**
         * GroupSubject holds detailed information for group-kind subject.
         */
        group?: $schemas.IoK8sApiFlowcontrolV1beta3GroupSubject;
        /**
         * `kind` indicates which one of the other fields is non-empty. Required
         */
        kind: string;
        /**
         * ServiceAccountSubject holds detailed information for service-account-kind subject.
         */
        serviceAccount?: $schemas.IoK8sApiFlowcontrolV1beta3ServiceAccountSubject;
        /**
         * UserSubject holds detailed information for user-kind subject.
         */
        user?: $schemas.IoK8sApiFlowcontrolV1beta3UserSubject;
      }

      /**
       * UserSubject holds detailed information for user-kind subject.
       */
      interface IoK8sApiFlowcontrolV1beta3UserSubject {
        /**
         * `name` is the username that matches, or "*" to match all usernames. Required.
         */
        name: string;
      }

      /**
       * HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
       */
      interface IoK8sApiNetworkingV1HttpIngressPath {
        /**
         * IngressBackend describes all endpoints for a given service and port.
         */
        backend: $schemas.IoK8sApiNetworkingV1IngressBackend;
        /**
         * path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
         */
        path?: string;
        /**
         * pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
         *   done on a path element by element basis. A path element refers is the
         *   list of labels in the path split by the '/' separator. A request is a
         *   match for path p if every p is an element-wise prefix of p of the
         *   request path. Note that if the last element of the path is a substring
         *   of the last element in request path, it is not a match (e.g. /foo/bar
         *   matches /foo/bar/baz, but does not match /foo/barbaz).
         * ImplementationSpecific: Interpretation of the Path matching is up to
         *   the IngressClass. Implementations can treat this as a separate PathType
         *   or treat it identically to Prefix or Exact path types.
         * Implementations are required to support all path types.
         */
        pathType: string;
      }

      /**
       * HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
       */
      interface IoK8sApiNetworkingV1HttpIngressRuleValue {
        /**
         * paths is a collection of paths that map requests to backends.
         */
        paths: $schemas.IoK8sApiNetworkingV1HttpIngressPath[];
      }

      /**
       * Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
       */
      interface IoK8sApiNetworkingV1Ingress {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * IngressSpec describes the Ingress the user wishes to exist.
         */
        spec?: $schemas.IoK8sApiNetworkingV1IngressSpec;
        /**
         * IngressStatus describe the current state of the Ingress.
         */
        status?: $schemas.IoK8sApiNetworkingV1IngressStatus;
      }

      /**
       * IngressBackend describes all endpoints for a given service and port.
       */
      interface IoK8sApiNetworkingV1IngressBackend {
        /**
         * TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
         */
        resource?: $schemas.IoK8sApiCoreV1TypedLocalObjectReference;
        /**
         * IngressServiceBackend references a Kubernetes Service as a Backend.
         */
        service?: $schemas.IoK8sApiNetworkingV1IngressServiceBackend;
      }

      /**
       * IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
       */
      interface IoK8sApiNetworkingV1IngressClass {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * IngressClassSpec provides information about the class of an Ingress.
         */
        spec?: $schemas.IoK8sApiNetworkingV1IngressClassSpec;
      }

      /**
       * IngressClassList is a collection of IngressClasses.
       */
      interface IoK8sApiNetworkingV1IngressClassList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of IngressClasses.
         */
        items: $schemas.IoK8sApiNetworkingV1IngressClass[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
       */
      interface IoK8sApiNetworkingV1IngressClassParametersReference {
        /**
         * apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
         */
        apiGroup?: string;
        /**
         * kind is the type of resource being referenced.
         */
        kind: string;
        /**
         * name is the name of resource being referenced.
         */
        name: string;
        /**
         * namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
         */
        namespace?: string;
        /**
         * scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace".
         */
        scope?: string;
      }

      /**
       * IngressClassSpec provides information about the class of an Ingress.
       */
      interface IoK8sApiNetworkingV1IngressClassSpec {
        /**
         * controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
         */
        controller?: string;
        /**
         * IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.
         */
        parameters?: $schemas.IoK8sApiNetworkingV1IngressClassParametersReference;
      }

      /**
       * IngressList is a collection of Ingress.
       */
      interface IoK8sApiNetworkingV1IngressList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of Ingress.
         */
        items: $schemas.IoK8sApiNetworkingV1Ingress[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * IngressLoadBalancerIngress represents the status of a load-balancer ingress point.
       */
      interface IoK8sApiNetworkingV1IngressLoadBalancerIngress {
        /**
         * hostname is set for load-balancer ingress points that are DNS based.
         */
        hostname?: string;
        /**
         * ip is set for load-balancer ingress points that are IP based.
         */
        ip?: string;
        /**
         * ports provides information about the ports exposed by this LoadBalancer.
         */
        ports?: $schemas.IoK8sApiNetworkingV1IngressPortStatus[];
      }

      /**
       * IngressLoadBalancerStatus represents the status of a load-balancer.
       */
      interface IoK8sApiNetworkingV1IngressLoadBalancerStatus {
        /**
         * ingress is a list containing ingress points for the load-balancer.
         */
        ingress?: $schemas.IoK8sApiNetworkingV1IngressLoadBalancerIngress[];
      }

      /**
       * IngressPortStatus represents the error condition of a service port
       */
      interface IoK8sApiNetworkingV1IngressPortStatus {
        /**
         * error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
         *   CamelCase names
         * - cloud provider specific error values must have names that comply with the
         *   format foo.example.com/CamelCase.
         */
        error?: string;
        /**
         * port is the port number of the ingress port.
         * @format int32
         */
        port: number;
        /**
         * protocol is the protocol of the ingress port. The supported values are: "TCP", "UDP", "SCTP"
         */
        protocol: string;
      }

      /**
       * IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
       */
      interface IoK8sApiNetworkingV1IngressRule {
        /**
         * host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
         *    the IP in the Spec of the parent Ingress.
         * 2. The `:` delimiter is not respected because ports are not allowed.
         * 	  Currently the port of an Ingress is implicitly :80 for http and
         * 	  :443 for https.
         * Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
         *
         * host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
         */
        host?: string;
        /**
         * HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
         */
        http?: $schemas.IoK8sApiNetworkingV1HttpIngressRuleValue;
      }

      /**
       * IngressServiceBackend references a Kubernetes Service as a Backend.
       */
      interface IoK8sApiNetworkingV1IngressServiceBackend {
        /**
         * name is the referenced service. The service must exist in the same namespace as the Ingress object.
         */
        name: string;
        /**
         * ServiceBackendPort is the service port being referenced.
         */
        port?: $schemas.IoK8sApiNetworkingV1ServiceBackendPort;
      }

      /**
       * IngressSpec describes the Ingress the user wishes to exist.
       */
      interface IoK8sApiNetworkingV1IngressSpec {
        /**
         * IngressBackend describes all endpoints for a given service and port.
         */
        defaultBackend?: $schemas.IoK8sApiNetworkingV1IngressBackend;
        /**
         * ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
         */
        ingressClassName?: string;
        /**
         * rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
         */
        rules?: $schemas.IoK8sApiNetworkingV1IngressRule[];
        /**
         * tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
         */
        tls?: $schemas.IoK8sApiNetworkingV1IngressTls[];
      }

      /**
       * IngressStatus describe the current state of the Ingress.
       */
      interface IoK8sApiNetworkingV1IngressStatus {
        /**
         * IngressLoadBalancerStatus represents the status of a load-balancer.
         */
        loadBalancer?: $schemas.IoK8sApiNetworkingV1IngressLoadBalancerStatus;
      }

      /**
       * IngressTLS describes the transport layer security associated with an ingress.
       */
      interface IoK8sApiNetworkingV1IngressTls {
        /**
         * hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
         */
        hosts?: string[];
        /**
         * secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.
         */
        secretName?: string;
      }

      /**
       * IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
       */
      interface IoK8sApiNetworkingV1IpBlock {
        /**
         * cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"
         */
        cidr: string;
        /**
         * except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range
         */
        except?: string[];
      }

      /**
       * NetworkPolicy describes what network traffic is allowed for a set of Pods
       */
      interface IoK8sApiNetworkingV1NetworkPolicy {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * NetworkPolicySpec provides the specification of a NetworkPolicy
         */
        spec?: $schemas.IoK8sApiNetworkingV1NetworkPolicySpec;
      }

      /**
       * NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
       */
      interface IoK8sApiNetworkingV1NetworkPolicyEgressRule {
        /**
         * ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
         */
        ports?: $schemas.IoK8sApiNetworkingV1NetworkPolicyPort[];
        /**
         * to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
         */
        to?: $schemas.IoK8sApiNetworkingV1NetworkPolicyPeer[];
      }

      /**
       * NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
       */
      interface IoK8sApiNetworkingV1NetworkPolicyIngressRule {
        /**
         * from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
         */
        from?: $schemas.IoK8sApiNetworkingV1NetworkPolicyPeer[];
        /**
         * ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
         */
        ports?: $schemas.IoK8sApiNetworkingV1NetworkPolicyPort[];
      }

      /**
       * NetworkPolicyList is a list of NetworkPolicy objects.
       */
      interface IoK8sApiNetworkingV1NetworkPolicyList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is a list of schema objects.
         */
        items: $schemas.IoK8sApiNetworkingV1NetworkPolicy[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
       */
      interface IoK8sApiNetworkingV1NetworkPolicyPeer {
        /**
         * IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
         */
        ipBlock?: $schemas.IoK8sApiNetworkingV1IpBlock;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        namespaceSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        podSelector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
      }

      /**
       * NetworkPolicyPort describes a port to allow traffic on
       */
      interface IoK8sApiNetworkingV1NetworkPolicyPort {
        /**
         * endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
         * @format int32
         */
        endPort?: number;
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        port?: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
        /**
         * protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
         */
        protocol?: string;
      }

      /**
       * NetworkPolicySpec provides the specification of a NetworkPolicy
       */
      interface IoK8sApiNetworkingV1NetworkPolicySpec {
        /**
         * egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
         */
        egress?: $schemas.IoK8sApiNetworkingV1NetworkPolicyEgressRule[];
        /**
         * ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
         */
        ingress?: $schemas.IoK8sApiNetworkingV1NetworkPolicyIngressRule[];
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        podSelector: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
         */
        policyTypes?: string[];
      }

      /**
       * ServiceBackendPort is the service port being referenced.
       */
      interface IoK8sApiNetworkingV1ServiceBackendPort {
        /**
         * name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
         */
        name?: string;
        /**
         * number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
         * @format int32
         */
        number?: number;
      }

      /**
       * IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1
       */
      interface IoK8sApiNetworkingV1beta1IpAddress {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * IPAddressSpec describe the attributes in an IP Address.
         */
        spec?: $schemas.IoK8sApiNetworkingV1beta1IpAddressSpec;
      }

      /**
       * IPAddressList contains a list of IPAddress.
       */
      interface IoK8sApiNetworkingV1beta1IpAddressList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of IPAddresses.
         */
        items: $schemas.IoK8sApiNetworkingV1beta1IpAddress[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * IPAddressSpec describe the attributes in an IP Address.
       */
      interface IoK8sApiNetworkingV1beta1IpAddressSpec {
        /**
         * ParentReference describes a reference to a parent object.
         */
        parentRef: $schemas.IoK8sApiNetworkingV1beta1ParentReference;
      }

      /**
       * ParentReference describes a reference to a parent object.
       */
      interface IoK8sApiNetworkingV1beta1ParentReference {
        /**
         * Group is the group of the object being referenced.
         */
        group?: string;
        /**
         * Name is the name of the object being referenced.
         */
        name: string;
        /**
         * Namespace is the namespace of the object being referenced.
         */
        namespace?: string;
        /**
         * Resource is the resource of the object being referenced.
         */
        resource: string;
      }

      /**
       * ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.
       */
      interface IoK8sApiNetworkingV1beta1ServiceCidr {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
         */
        spec?: $schemas.IoK8sApiNetworkingV1beta1ServiceCidrSpec;
        /**
         * ServiceCIDRStatus describes the current state of the ServiceCIDR.
         */
        status?: $schemas.IoK8sApiNetworkingV1beta1ServiceCidrStatus;
      }

      /**
       * ServiceCIDRList contains a list of ServiceCIDR objects.
       */
      interface IoK8sApiNetworkingV1beta1ServiceCidrList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of ServiceCIDRs.
         */
        items: $schemas.IoK8sApiNetworkingV1beta1ServiceCidr[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.
       */
      interface IoK8sApiNetworkingV1beta1ServiceCidrSpec {
        /**
         * CIDRs defines the IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.
         */
        cidrs?: string[];
      }

      /**
       * ServiceCIDRStatus describes the current state of the ServiceCIDR.
       */
      interface IoK8sApiNetworkingV1beta1ServiceCidrStatus {
        /**
         * conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state
         */
        conditions?: $schemas.IoK8sApimachineryPkgApisMetaV1Condition[];
      }

      /**
       * Overhead structure represents the resource overhead associated with running a pod.
       */
      interface IoK8sApiNodeV1Overhead {
        /**
         * podFixed represents the fixed resource overhead associated with running a pod.
         */
        podFixed?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
      }

      /**
       * RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/
       */
      interface IoK8sApiNodeV1RuntimeClass {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.
         */
        handler: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * Overhead structure represents the resource overhead associated with running a pod.
         */
        overhead?: $schemas.IoK8sApiNodeV1Overhead;
        /**
         * Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
         */
        scheduling?: $schemas.IoK8sApiNodeV1Scheduling;
      }

      /**
       * RuntimeClassList is a list of RuntimeClass objects.
       */
      interface IoK8sApiNodeV1RuntimeClassList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is a list of schema objects.
         */
        items: $schemas.IoK8sApiNodeV1RuntimeClass[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
       */
      interface IoK8sApiNodeV1Scheduling {
        /**
         * nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
         */
        nodeSelector?: {
          [P: string]: string;
        };
        /**
         * tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
         */
        tolerations?: $schemas.IoK8sApiCoreV1Toleration[];
      }

      /**
       * Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
       */
      interface IoK8sApiPolicyV1Eviction {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * DeleteOptions may be provided when deleting an API object.
         */
        deleteOptions?: $schemas.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
      }

      /**
       * PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
       */
      interface IoK8sApiPolicyV1PodDisruptionBudget {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
         */
        spec?: $schemas.IoK8sApiPolicyV1PodDisruptionBudgetSpec;
        /**
         * PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
         */
        status?: $schemas.IoK8sApiPolicyV1PodDisruptionBudgetStatus;
      }

      /**
       * PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
       */
      interface IoK8sApiPolicyV1PodDisruptionBudgetList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is a list of PodDisruptionBudgets
         */
        items: $schemas.IoK8sApiPolicyV1PodDisruptionBudget[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
       */
      interface IoK8sApiPolicyV1PodDisruptionBudgetSpec {
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        maxUnavailable?: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
        /**
         * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
         * @format int-or-string
         */
        minAvailable?: $schemas.IoK8sApimachineryPkgUtilIntstrIntOrString;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        selector?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type="Ready",status="True".
         *
         * Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.
         *
         * IfHealthyBudget policy means that running pods (status.phase="Running"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.
         *
         * AlwaysAllow policy means that all running pods (status.phase="Running"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.
         *
         * Additional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.
         *
         * This field is beta-level. The eviction API uses this field when the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
         */
        unhealthyPodEvictionPolicy?: string;
      }

      /**
       * PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
       */
      interface IoK8sApiPolicyV1PodDisruptionBudgetStatus {
        /**
         * Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute
         *               the number of allowed disruptions. Therefore no disruptions are
         *               allowed and the status of the condition will be False.
         * - InsufficientPods: The number of pods are either at or below the number
         *                     required by the PodDisruptionBudget. No disruptions are
         *                     allowed and the status of the condition will be False.
         * - SufficientPods: There are more pods than required by the PodDisruptionBudget.
         *                   The condition will be True, and the number of allowed
         *                   disruptions are provided by the disruptionsAllowed property.
         */
        conditions?: $schemas.IoK8sApimachineryPkgApisMetaV1Condition[];
        /**
         * current number of healthy pods
         * @format int32
         */
        currentHealthy: number;
        /**
         * minimum desired number of healthy pods
         * @format int32
         */
        desiredHealthy: number;
        /**
         * DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
         */
        disruptedPods?: {
          /**
           * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        };
        /**
         * Number of pod disruptions that are currently allowed.
         * @format int32
         */
        disruptionsAllowed: number;
        /**
         * total number of pods counted by this disruption budget
         * @format int32
         */
        expectedPods: number;
        /**
         * Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
         * @format int64
         */
        observedGeneration?: number | string;
      }

      /**
       * AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
       */
      interface IoK8sApiRbacV1AggregationRule {
        /**
         * ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
         */
        clusterRoleSelectors?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector[];
      }

      /**
       * ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
       */
      interface IoK8sApiRbacV1ClusterRole {
        /**
         * AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
         */
        aggregationRule?: $schemas.IoK8sApiRbacV1AggregationRule;
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * Rules holds all the PolicyRules for this ClusterRole
         */
        rules?: $schemas.IoK8sApiRbacV1PolicyRule[];
      }

      /**
       * ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
       */
      interface IoK8sApiRbacV1ClusterRoleBinding {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * RoleRef contains information that points to the role being used
         */
        roleRef: $schemas.IoK8sApiRbacV1RoleRef;
        /**
         * Subjects holds references to the objects the role applies to.
         */
        subjects?: $schemas.IoK8sApiRbacV1Subject[];
      }

      /**
       * ClusterRoleBindingList is a collection of ClusterRoleBindings
       */
      interface IoK8sApiRbacV1ClusterRoleBindingList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is a list of ClusterRoleBindings
         */
        items: $schemas.IoK8sApiRbacV1ClusterRoleBinding[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ClusterRoleList is a collection of ClusterRoles
       */
      interface IoK8sApiRbacV1ClusterRoleList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is a list of ClusterRoles
         */
        items: $schemas.IoK8sApiRbacV1ClusterRole[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
       */
      interface IoK8sApiRbacV1PolicyRule {
        /**
         * APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. "" represents the core API group and "*" represents all API groups.
         */
        apiGroups?: string[];
        /**
         * NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
         */
        nonResourceURLs?: string[];
        /**
         * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
         */
        resourceNames?: string[];
        /**
         * Resources is a list of resources this rule applies to. '*' represents all resources.
         */
        resources?: string[];
        /**
         * Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.
         */
        verbs: string[];
      }

      /**
       * Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
       */
      interface IoK8sApiRbacV1Role {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * Rules holds all the PolicyRules for this Role
         */
        rules?: $schemas.IoK8sApiRbacV1PolicyRule[];
      }

      /**
       * RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
       */
      interface IoK8sApiRbacV1RoleBinding {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * RoleRef contains information that points to the role being used
         */
        roleRef: $schemas.IoK8sApiRbacV1RoleRef;
        /**
         * Subjects holds references to the objects the role applies to.
         */
        subjects?: $schemas.IoK8sApiRbacV1Subject[];
      }

      /**
       * RoleBindingList is a collection of RoleBindings
       */
      interface IoK8sApiRbacV1RoleBindingList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is a list of RoleBindings
         */
        items: $schemas.IoK8sApiRbacV1RoleBinding[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * RoleList is a collection of Roles
       */
      interface IoK8sApiRbacV1RoleList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is a list of Roles
         */
        items: $schemas.IoK8sApiRbacV1Role[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * RoleRef contains information that points to the role being used
       */
      interface IoK8sApiRbacV1RoleRef {
        /**
         * APIGroup is the group for the resource being referenced
         */
        apiGroup: string;
        /**
         * Kind is the type of resource being referenced
         */
        kind: string;
        /**
         * Name is the name of resource being referenced
         */
        name: string;
      }

      /**
       * Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
       */
      interface IoK8sApiRbacV1Subject {
        /**
         * APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
         */
        apiGroup?: string;
        /**
         * Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
         */
        kind: string;
        /**
         * Name of the object being referenced.
         */
        name: string;
        /**
         * Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
         */
        namespace?: string;
      }

      /**
       * AllocationResult contains attributes of an allocated resource.
       */
      interface IoK8sApiResourceV1alpha3AllocationResult {
        /**
         * Controller is the name of the DRA driver which handled the allocation. That driver is also responsible for deallocating the claim. It is empty when the claim can be deallocated without involving a driver.
         *
         * A driver may allocate devices provided by other drivers, so this driver name here can be different from the driver names listed for the results.
         *
         * This is an alpha field and requires enabling the DRAControlPlaneController feature gate.
         */
        controller?: string;
        /**
         * DeviceAllocationResult is the result of allocating devices.
         */
        devices?: $schemas.IoK8sApiResourceV1alpha3DeviceAllocationResult;
        /**
         * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
         */
        nodeSelector?: $schemas.IoK8sApiCoreV1NodeSelector;
      }

      /**
       * BasicDevice defines one device instance.
       */
      interface IoK8sApiResourceV1alpha3BasicDevice {
        /**
         * Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.
         *
         * The maximum number of attributes and capacities combined is 32.
         */
        attributes?: {
          /**
           * DeviceAttribute must have exactly one field set.
           */
          [P: string]: $schemas.IoK8sApiResourceV1alpha3DeviceAttribute;
        };
        /**
         * Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.
         *
         * The maximum number of attributes and capacities combined is 32.
         */
        capacity?: {
          /**
           * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
           *
           * The serialization format is:
           *
           * ``` <quantity>        ::= <signedNumber><suffix>
           *
           * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
           *
           * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
           *
           * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
           *
           * <decimalSI>       ::= m | "" | k | M | G | T | P | E
           *
           * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
           *
           * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
           *
           * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
           *
           * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
           *
           * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
           *
           * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
           *
           * The sign will be omitted unless the number is negative.
           *
           * Examples:
           *
           * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
           *
           * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
           *
           * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
           *
           * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
           */
          [P: string]: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        };
      }

      /**
       * CELDeviceSelector contains a CEL expression for selecting a device.
       */
      interface IoK8sApiResourceV1alpha3CelDeviceSelector {
        /**
         * Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.
         *
         * The expression's input is an object named "device", which carries the following properties:
         *  - driver (string): the name of the driver which defines this device.
         *  - attributes (map[string]object): the device's attributes, grouped by prefix
         *    (e.g. device.attributes["dra.example.com"] evaluates to an object with all
         *    of the attributes which were prefixed by "dra.example.com".
         *  - capacity (map[string]object): the device's capacities, grouped by prefix.
         *
         * Example: Consider a device with driver="dra.example.com", which exposes two attributes named "model" and "ext.example.com/family" and which exposes one capacity named "modules". This input to this expression would have the following fields:
         *
         *     device.driver
         *     device.attributes["dra.example.com"].model
         *     device.attributes["ext.example.com"].family
         *     device.capacity["dra.example.com"].modules
         *
         * The device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.
         *
         * The value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.
         *
         * If an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.
         *
         * A robust expression should check for the existence of attributes before referencing them.
         *
         * For ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:
         *
         *     cel.bind(dra, device.attributes["dra.example.com"], dra.someBool && dra.anotherBool)
         */
        expression: string;
      }

      /**
       * Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.
       */
      interface IoK8sApiResourceV1alpha3Device {
        /**
         * BasicDevice defines one device instance.
         */
        basic?: $schemas.IoK8sApiResourceV1alpha3BasicDevice;
        /**
         * Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.
         */
        name: string;
      }

      /**
       * DeviceAllocationConfiguration gets embedded in an AllocationResult.
       */
      interface IoK8sApiResourceV1alpha3DeviceAllocationConfiguration {
        /**
         * OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.
         */
        opaque?: $schemas.IoK8sApiResourceV1alpha3OpaqueDeviceConfiguration;
        /**
         * Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.
         */
        requests?: string[];
        /**
         * Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim.
         */
        source: string;
      }

      /**
       * DeviceAllocationResult is the result of allocating devices.
       */
      interface IoK8sApiResourceV1alpha3DeviceAllocationResult {
        /**
         * This field is a combination of all the claim and class configuration parameters. Drivers can distinguish between those based on a flag.
         *
         * This includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support. They can silently ignore unknown configuration parameters.
         */
        config?: $schemas.IoK8sApiResourceV1alpha3DeviceAllocationConfiguration[];
        /**
         * Results lists all allocated devices.
         */
        results?: $schemas.IoK8sApiResourceV1alpha3DeviceRequestAllocationResult[];
      }

      /**
       * DeviceAttribute must have exactly one field set.
       */
      interface IoK8sApiResourceV1alpha3DeviceAttribute {
        /**
         * BoolValue is a true/false value.
         */
        bool?: boolean;
        /**
         * IntValue is a number.
         * @format int64
         */
        int?: number | string;
        /**
         * StringValue is a string. Must not be longer than 64 characters.
         */
        string?: string;
        /**
         * VersionValue is a semantic version according to semver.org spec 2.0.0. Must not be longer than 64 characters.
         */
        version?: string;
      }

      /**
       * DeviceClaim defines how to request devices with a ResourceClaim.
       */
      interface IoK8sApiResourceV1alpha3DeviceClaim {
        /**
         * This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
         */
        config?: $schemas.IoK8sApiResourceV1alpha3DeviceClaimConfiguration[];
        /**
         * These constraints must be satisfied by the set of devices that get allocated for the claim.
         */
        constraints?: $schemas.IoK8sApiResourceV1alpha3DeviceConstraint[];
        /**
         * Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
         */
        requests?: $schemas.IoK8sApiResourceV1alpha3DeviceRequest[];
      }

      /**
       * DeviceClaimConfiguration is used for configuration parameters in DeviceClaim.
       */
      interface IoK8sApiResourceV1alpha3DeviceClaimConfiguration {
        /**
         * OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.
         */
        opaque?: $schemas.IoK8sApiResourceV1alpha3OpaqueDeviceConfiguration;
        /**
         * Requests lists the names of requests where the configuration applies. If empty, it applies to all requests.
         */
        requests?: string[];
      }

      /**
       * DeviceClass is a vendor- or admin-provided resource that contains device configuration and selectors. It can be referenced in the device requests of a claim to apply these presets. Cluster scoped.
       *
       * This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
       */
      interface IoK8sApiResourceV1alpha3DeviceClass {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.
         */
        spec: $schemas.IoK8sApiResourceV1alpha3DeviceClassSpec;
      }

      /**
       * DeviceClassConfiguration is used in DeviceClass.
       */
      interface IoK8sApiResourceV1alpha3DeviceClassConfiguration {
        /**
         * OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.
         */
        opaque?: $schemas.IoK8sApiResourceV1alpha3OpaqueDeviceConfiguration;
      }

      /**
       * DeviceClassList is a collection of classes.
       */
      interface IoK8sApiResourceV1alpha3DeviceClassList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of resource classes.
         */
        items: $schemas.IoK8sApiResourceV1alpha3DeviceClass[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.
       */
      interface IoK8sApiResourceV1alpha3DeviceClassSpec {
        /**
         * Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.
         *
         * They are passed to the driver, but are not considered while allocating the claim.
         */
        config?: $schemas.IoK8sApiResourceV1alpha3DeviceClassConfiguration[];
        /**
         * Each selector must be satisfied by a device which is claimed via this class.
         */
        selectors?: $schemas.IoK8sApiResourceV1alpha3DeviceSelector[];
        /**
         * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
         */
        suitableNodes?: $schemas.IoK8sApiCoreV1NodeSelector;
      }

      /**
       * DeviceConstraint must have exactly one field set besides Requests.
       */
      interface IoK8sApiResourceV1alpha3DeviceConstraint {
        /**
         * MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.
         *
         * For example, if you specified "dra.example.com/numa" (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn't, then it also will not be chosen.
         *
         * Must include the domain qualifier.
         */
        matchAttribute?: string;
        /**
         * Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.
         */
        requests?: string[];
      }

      /**
       * DeviceRequest is a request for devices required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices.
       *
       * A DeviceClassName is currently required. Clients must check that it is indeed set. It's absence indicates that something changed in a way that is not supported by the client yet, in which case it must refuse to handle the request.
       */
      interface IoK8sApiResourceV1alpha3DeviceRequest {
        /**
         * AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.
         */
        adminAccess?: boolean;
        /**
         * AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:
         *
         * - ExactCount: This request is for a specific number of devices.
         *   This is the default. The exact number is provided in the
         *   count field.
         *
         * - All: This request is for all of the matching devices in a pool.
         *   Allocation will fail if some devices are already allocated,
         *   unless adminAccess is requested.
         *
         * If AlloctionMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.
         *
         * More modes may get added in the future. Clients must refuse to handle requests with unknown modes.
         */
        allocationMode?: string;
        /**
         * Count is used only when the count mode is "ExactCount". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.
         * @format int64
         */
        count?: number | string;
        /**
         * DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.
         *
         * A class is required. Which classes are available depends on the cluster.
         *
         * Administrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.
         */
        deviceClassName: string;
        /**
         * Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.
         *
         * Must be a DNS label.
         */
        name: string;
        /**
         * Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.
         */
        selectors?: $schemas.IoK8sApiResourceV1alpha3DeviceSelector[];
      }

      /**
       * DeviceRequestAllocationResult contains the allocation result for one request.
       */
      interface IoK8sApiResourceV1alpha3DeviceRequestAllocationResult {
        /**
         * Device references one device instance via its name in the driver's resource pool. It must be a DNS label.
         */
        device: string;
        /**
         * Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.
         *
         * Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
         */
        driver: string;
        /**
         * This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).
         *
         * Must not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.
         */
        pool: string;
        /**
         * Request is the name of the request in the claim which caused this device to be allocated. Multiple devices may have been allocated per request.
         */
        request: string;
      }

      /**
       * DeviceSelector must have exactly one field set.
       */
      interface IoK8sApiResourceV1alpha3DeviceSelector {
        /**
         * CELDeviceSelector contains a CEL expression for selecting a device.
         */
        cel?: $schemas.IoK8sApiResourceV1alpha3CelDeviceSelector;
      }

      /**
       * OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.
       */
      interface IoK8sApiResourceV1alpha3OpaqueDeviceConfiguration {
        /**
         * Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.
         *
         * An admission policy provided by the driver developer could use this to decide whether it needs to validate them.
         *
         * Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
         */
        driver: string;
        /**
         * RawExtension is used to hold extensions in external versions.
         *
         * To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
         *
         * // Internal package:
         *
         * 	type MyAPIObject struct {
         * 		runtime.TypeMeta `json:",inline"`
         * 		MyPlugin runtime.Object `json:"myPlugin"`
         * 	}
         *
         * 	type PluginA struct {
         * 		AOption string `json:"aOption"`
         * 	}
         *
         * // External package:
         *
         * 	type MyAPIObject struct {
         * 		runtime.TypeMeta `json:",inline"`
         * 		MyPlugin runtime.RawExtension `json:"myPlugin"`
         * 	}
         *
         * 	type PluginA struct {
         * 		AOption string `json:"aOption"`
         * 	}
         *
         * // On the wire, the JSON will look something like this:
         *
         * 	{
         * 		"kind":"MyAPIObject",
         * 		"apiVersion":"v1",
         * 		"myPlugin": {
         * 			"kind":"PluginA",
         * 			"aOption":"foo",
         * 		},
         * 	}
         *
         * So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
         */
        parameters: $schemas.IoK8sApimachineryPkgRuntimeRawExtension;
      }

      /**
       * PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation mode.
       *
       * This is an alpha type and requires enabling the DRAControlPlaneController feature gate.
       */
      interface IoK8sApiResourceV1alpha3PodSchedulingContext {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * PodSchedulingContextSpec describes where resources for the Pod are needed.
         */
        spec: $schemas.IoK8sApiResourceV1alpha3PodSchedulingContextSpec;
        /**
         * PodSchedulingContextStatus describes where resources for the Pod can be allocated.
         */
        status?: $schemas.IoK8sApiResourceV1alpha3PodSchedulingContextStatus;
      }

      /**
       * PodSchedulingContextList is a collection of Pod scheduling objects.
       */
      interface IoK8sApiResourceV1alpha3PodSchedulingContextList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of PodSchedulingContext objects.
         */
        items: $schemas.IoK8sApiResourceV1alpha3PodSchedulingContext[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * PodSchedulingContextSpec describes where resources for the Pod are needed.
       */
      interface IoK8sApiResourceV1alpha3PodSchedulingContextSpec {
        /**
         * PotentialNodes lists nodes where the Pod might be able to run.
         *
         * The size of this field is limited to 128. This is large enough for many clusters. Larger clusters may need more attempts to find a node that suits all pending resources. This may get increased in the future, but not reduced.
         */
        potentialNodes?: string[];
        /**
         * SelectedNode is the node for which allocation of ResourceClaims that are referenced by the Pod and that use "WaitForFirstConsumer" allocation is to be attempted.
         */
        selectedNode?: string;
      }

      /**
       * PodSchedulingContextStatus describes where resources for the Pod can be allocated.
       */
      interface IoK8sApiResourceV1alpha3PodSchedulingContextStatus {
        /**
         * ResourceClaims describes resource availability for each pod.spec.resourceClaim entry where the corresponding ResourceClaim uses "WaitForFirstConsumer" allocation mode.
         */
        resourceClaims?: $schemas.IoK8sApiResourceV1alpha3ResourceClaimSchedulingStatus[];
      }

      /**
       * ResourceClaim describes a request for access to resources in the cluster, for use by workloads. For example, if a workload needs an accelerator device with specific properties, this is how that request is expressed. The status stanza tracks whether this claim has been satisfied and what specific resources have been allocated.
       *
       * This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
       */
      interface IoK8sApiResourceV1alpha3ResourceClaim {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.
         */
        spec: $schemas.IoK8sApiResourceV1alpha3ResourceClaimSpec;
        /**
         * ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.
         */
        status?: $schemas.IoK8sApiResourceV1alpha3ResourceClaimStatus;
      }

      /**
       * ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
       */
      interface IoK8sApiResourceV1alpha3ResourceClaimConsumerReference {
        /**
         * APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
         */
        apiGroup?: string;
        /**
         * Name is the name of resource being referenced.
         */
        name: string;
        /**
         * Resource is the type of resource being referenced, for example "pods".
         */
        resource: string;
        /**
         * UID identifies exactly one incarnation of the resource.
         */
        uid: string;
      }

      /**
       * ResourceClaimList is a collection of claims.
       */
      interface IoK8sApiResourceV1alpha3ResourceClaimList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of resource claims.
         */
        items: $schemas.IoK8sApiResourceV1alpha3ResourceClaim[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ResourceClaimSchedulingStatus contains information about one particular ResourceClaim with "WaitForFirstConsumer" allocation mode.
       */
      interface IoK8sApiResourceV1alpha3ResourceClaimSchedulingStatus {
        /**
         * Name matches the pod.spec.resourceClaims[*].Name field.
         */
        name: string;
        /**
         * UnsuitableNodes lists nodes that the ResourceClaim cannot be allocated for.
         *
         * The size of this field is limited to 128, the same as for PodSchedulingSpec.PotentialNodes. This may get increased in the future, but not reduced.
         */
        unsuitableNodes?: string[];
      }

      /**
       * ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.
       */
      interface IoK8sApiResourceV1alpha3ResourceClaimSpec {
        /**
         * Controller is the name of the DRA driver that is meant to handle allocation of this claim. If empty, allocation is handled by the scheduler while scheduling a pod.
         *
         * Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
         *
         * This is an alpha field and requires enabling the DRAControlPlaneController feature gate.
         */
        controller?: string;
        /**
         * DeviceClaim defines how to request devices with a ResourceClaim.
         */
        devices?: $schemas.IoK8sApiResourceV1alpha3DeviceClaim;
      }

      /**
       * ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.
       */
      interface IoK8sApiResourceV1alpha3ResourceClaimStatus {
        /**
         * AllocationResult contains attributes of an allocated resource.
         */
        allocation?: $schemas.IoK8sApiResourceV1alpha3AllocationResult;
        /**
         * Indicates that a claim is to be deallocated. While this is set, no new consumers may be added to ReservedFor.
         *
         * This is only used if the claim needs to be deallocated by a DRA driver. That driver then must deallocate this claim and reset the field together with clearing the Allocation field.
         *
         * This is an alpha field and requires enabling the DRAControlPlaneController feature gate.
         */
        deallocationRequested?: boolean;
        /**
         * ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started. A claim that is in use or might be in use because it has been reserved must not get deallocated.
         *
         * In a cluster with multiple scheduler instances, two pods might get scheduled concurrently by different schedulers. When they reference the same ResourceClaim which already has reached its maximum number of consumers, only one pod can be scheduled.
         *
         * Both schedulers try to add their pod to the claim.status.reservedFor field, but only the update that reaches the API server first gets stored. The other one fails with an error and the scheduler which issued it knows that it must put the pod back into the queue, waiting for the ResourceClaim to become usable again.
         *
         * There can be at most 32 such reservations. This may get increased in the future, but not reduced.
         */
        reservedFor?: $schemas.IoK8sApiResourceV1alpha3ResourceClaimConsumerReference[];
      }

      /**
       * ResourceClaimTemplate is used to produce ResourceClaim objects.
       *
       * This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
       */
      interface IoK8sApiResourceV1alpha3ResourceClaimTemplate {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
         */
        spec: $schemas.IoK8sApiResourceV1alpha3ResourceClaimTemplateSpec;
      }

      /**
       * ResourceClaimTemplateList is a collection of claim templates.
       */
      interface IoK8sApiResourceV1alpha3ResourceClaimTemplateList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of resource claim templates.
         */
        items: $schemas.IoK8sApiResourceV1alpha3ResourceClaimTemplate[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
       */
      interface IoK8sApiResourceV1alpha3ResourceClaimTemplateSpec {
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.
         */
        spec: $schemas.IoK8sApiResourceV1alpha3ResourceClaimSpec;
      }

      /**
       * ResourcePool describes the pool that ResourceSlices belong to.
       */
      interface IoK8sApiResourceV1alpha3ResourcePool {
        /**
         * Generation tracks the change in a pool over time. Whenever a driver changes something about one or more of the resources in a pool, it must change the generation in all ResourceSlices which are part of that pool. Consumers of ResourceSlices should only consider resources from the pool with the highest generation number. The generation may be reset by drivers, which should be fine for consumers, assuming that all ResourceSlices in a pool are updated to match or deleted.
         *
         * Combined with ResourceSliceCount, this mechanism enables consumers to detect pools which are comprised of multiple ResourceSlices and are in an incomplete state.
         * @format int64
         */
        generation: number | string;
        /**
         * Name is used to identify the pool. For node-local devices, this is often the node name, but this is not required.
         *
         * It must not be longer than 253 characters and must consist of one or more DNS sub-domains separated by slashes. This field is immutable.
         */
        name: string;
        /**
         * ResourceSliceCount is the total number of ResourceSlices in the pool at this generation number. Must be greater than zero.
         *
         * Consumers can use this to check whether they have seen all ResourceSlices belonging to the same pool.
         * @format int64
         */
        resourceSliceCount: number | string;
      }

      /**
       * ResourceSlice represents one or more resources in a pool of similar resources, managed by a common driver. A pool may span more than one ResourceSlice, and exactly how many ResourceSlices comprise a pool is determined by the driver.
       *
       * At the moment, the only supported resources are devices with attributes and capacities. Each device in a given pool, regardless of how many ResourceSlices, must have a unique name. The ResourceSlice in which a device gets published may change over time. The unique identifier for a device is the tuple <driver name>, <pool name>, <device name>.
       *
       * Whenever a driver needs to update a pool, it increments the pool.Spec.Pool.Generation number and updates all ResourceSlices with that new number and new resource definitions. A consumer must only use ResourceSlices with the highest generation number and ignore all others.
       *
       * When allocating all resources in a pool matching certain criteria or when looking for the best solution among several different alternatives, a consumer should check the number of ResourceSlices in a pool (included in each ResourceSlice) to determine whether its view of a pool is complete and if not, should wait until the driver has completed updating the pool.
       *
       * For resources that are not local to a node, the node name is not set. Instead, the driver may use a node selector to specify where the devices are available.
       *
       * This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.
       */
      interface IoK8sApiResourceV1alpha3ResourceSlice {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * ResourceSliceSpec contains the information published by the driver in one ResourceSlice.
         */
        spec: $schemas.IoK8sApiResourceV1alpha3ResourceSliceSpec;
      }

      /**
       * ResourceSliceList is a collection of ResourceSlices.
       */
      interface IoK8sApiResourceV1alpha3ResourceSliceList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of resource ResourceSlices.
         */
        items: $schemas.IoK8sApiResourceV1alpha3ResourceSlice[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * ResourceSliceSpec contains the information published by the driver in one ResourceSlice.
       */
      interface IoK8sApiResourceV1alpha3ResourceSliceSpec {
        /**
         * AllNodes indicates that all nodes have access to the resources in the pool.
         *
         * Exactly one of NodeName, NodeSelector and AllNodes must be set.
         */
        allNodes?: boolean;
        /**
         * Devices lists some or all of the devices in this pool.
         *
         * Must not have more than 128 entries.
         */
        devices?: $schemas.IoK8sApiResourceV1alpha3Device[];
        /**
         * Driver identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.
         *
         * Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver. This field is immutable.
         */
        driver: string;
        /**
         * NodeName identifies the node which provides the resources in this pool. A field selector can be used to list only ResourceSlice objects belonging to a certain node.
         *
         * This field can be used to limit access from nodes to ResourceSlices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new resources available.
         *
         * Exactly one of NodeName, NodeSelector and AllNodes must be set. This field is immutable.
         */
        nodeName?: string;
        /**
         * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
         */
        nodeSelector?: $schemas.IoK8sApiCoreV1NodeSelector;
        /**
         * ResourcePool describes the pool that ResourceSlices belong to.
         */
        pool: $schemas.IoK8sApiResourceV1alpha3ResourcePool;
      }

      /**
       * PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
       */
      interface IoK8sApiSchedulingV1PriorityClass {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * description is an arbitrary string that usually provides guidelines on when this priority class should be used.
         */
        description?: string;
        /**
         * globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.
         */
        globalDefault?: boolean;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * preemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
         */
        preemptionPolicy?: string;
        /**
         * value represents the integer value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.
         * @format int32
         */
        value: number;
      }

      /**
       * PriorityClassList is a collection of priority classes.
       */
      interface IoK8sApiSchedulingV1PriorityClassList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of PriorityClasses
         */
        items: $schemas.IoK8sApiSchedulingV1PriorityClass[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
       */
      interface IoK8sApiStorageV1CsiDriver {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * CSIDriverSpec is the specification of a CSIDriver.
         */
        spec: $schemas.IoK8sApiStorageV1CsiDriverSpec;
      }

      /**
       * CSIDriverList is a collection of CSIDriver objects.
       */
      interface IoK8sApiStorageV1CsiDriverList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of CSIDriver
         */
        items: $schemas.IoK8sApiStorageV1CsiDriver[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * CSIDriverSpec is the specification of a CSIDriver.
       */
      interface IoK8sApiStorageV1CsiDriverSpec {
        /**
         * attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
         *
         * This field is immutable.
         */
        attachRequired?: boolean;
        /**
         * fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
         *
         * This field was immutable in Kubernetes < 1.29 and now is mutable.
         *
         * Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
         */
        fsGroupPolicy?: string;
        /**
         * podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.
         *
         * The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.
         *
         * The following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume
         *                                 defined by a CSIVolumeSource, otherwise "false"
         *
         * "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
         *
         * This field was immutable in Kubernetes < 1.29 and now is mutable.
         */
        podInfoOnMount?: boolean;
        /**
         * requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
         *
         * Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
         */
        requiresRepublish?: boolean;
        /**
         * seLinuxMount specifies if the CSI driver supports "-o context" mount option.
         *
         * When "true", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with "-o context=xyz" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.
         *
         * When "false", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.
         *
         * Default is "false".
         */
        seLinuxMount?: boolean;
        /**
         * storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.
         *
         * The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
         *
         * Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
         *
         * This field was immutable in Kubernetes <= 1.22 and now is mutable.
         */
        storageCapacity?: boolean;
        /**
         * tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
         *   "<audience>": {
         *     "token": <token>,
         *     "expirationTimestamp": <expiration timestamp in RFC3339>,
         *   },
         *   ...
         * }
         *
         * Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
         */
        tokenRequests?: $schemas.IoK8sApiStorageV1TokenRequest[];
        /**
         * volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
         *
         * The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.
         *
         * For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
         *
         * This field is beta. This field is immutable.
         */
        volumeLifecycleModes?: string[];
      }

      /**
       * CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
       */
      interface IoK8sApiStorageV1CsiNode {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * CSINodeSpec holds information about the specification of all CSI drivers installed on a node
         */
        spec: $schemas.IoK8sApiStorageV1CsiNodeSpec;
      }

      /**
       * CSINodeDriver holds information about the specification of one CSI driver installed on a node
       */
      interface IoK8sApiStorageV1CsiNodeDriver {
        /**
         * VolumeNodeResources is a set of resource limits for scheduling of volumes.
         */
        allocatable?: $schemas.IoK8sApiStorageV1VolumeNodeResources;
        /**
         * name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
         */
        name: string;
        /**
         * nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
         */
        nodeID: string;
        /**
         * topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
         */
        topologyKeys?: string[];
      }

      /**
       * CSINodeList is a collection of CSINode objects.
       */
      interface IoK8sApiStorageV1CsiNodeList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of CSINode
         */
        items: $schemas.IoK8sApiStorageV1CsiNode[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * CSINodeSpec holds information about the specification of all CSI drivers installed on a node
       */
      interface IoK8sApiStorageV1CsiNodeSpec {
        /**
         * drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
         */
        drivers: $schemas.IoK8sApiStorageV1CsiNodeDriver[];
      }

      /**
       * CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.
       *
       * For example this can express things like: - StorageClass "standard" has "1234 GiB" available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
       *
       * The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero
       *
       * The producer of these objects can decide which approach is more suitable.
       *
       * They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
       */
      interface IoK8sApiStorageV1CsiStorageCapacity {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
         *
         * The serialization format is:
         *
         * ``` <quantity>        ::= <signedNumber><suffix>
         *
         * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
         *
         * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
         *
         * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
         *
         * <decimalSI>       ::= m | "" | k | M | G | T | P | E
         *
         * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
         *
         * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
         *
         * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
         *
         * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
         *
         * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
         *
         * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
         *
         * The sign will be omitted unless the number is negative.
         *
         * Examples:
         *
         * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
         *
         * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
         *
         * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
         *
         * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
         */
        capacity?: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
         *
         * The serialization format is:
         *
         * ``` <quantity>        ::= <signedNumber><suffix>
         *
         * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
         *
         * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
         *
         * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
         *
         * <decimalSI>       ::= m | "" | k | M | G | T | P | E
         *
         * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
         *
         * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
         *
         * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
         *
         * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
         *
         * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
         *
         * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
         *
         * The sign will be omitted unless the number is negative.
         *
         * Examples:
         *
         * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
         *
         * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
         *
         * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
         *
         * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
         */
        maximumVolumeSize?: $schemas.IoK8sApimachineryPkgApiResourceQuantity;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        nodeTopology?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelector;
        /**
         * storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.
         */
        storageClassName: string;
      }

      /**
       * CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
       */
      interface IoK8sApiStorageV1CsiStorageCapacityList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of CSIStorageCapacity objects.
         */
        items: $schemas.IoK8sApiStorageV1CsiStorageCapacity[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
       *
       * StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
       */
      interface IoK8sApiStorageV1StorageClass {
        /**
         * allowVolumeExpansion shows whether the storage class allow volume expand.
         */
        allowVolumeExpansion?: boolean;
        /**
         * allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
         */
        allowedTopologies?: $schemas.IoK8sApiCoreV1TopologySelectorTerm[];
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
         */
        mountOptions?: string[];
        /**
         * parameters holds the parameters for the provisioner that should create volumes of this storage class.
         */
        parameters?: {
          [P: string]: string;
        };
        /**
         * provisioner indicates the type of the provisioner.
         */
        provisioner: string;
        /**
         * reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
         */
        reclaimPolicy?: string;
        /**
         * volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
         */
        volumeBindingMode?: string;
      }

      /**
       * StorageClassList is a collection of storage classes.
       */
      interface IoK8sApiStorageV1StorageClassList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of StorageClasses
         */
        items: $schemas.IoK8sApiStorageV1StorageClass[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * TokenRequest contains parameters of a service account token.
       */
      interface IoK8sApiStorageV1TokenRequest {
        /**
         * audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
         */
        audience: string;
        /**
         * expirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
         * @format int64
         */
        expirationSeconds?: number | string;
      }

      /**
       * VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
       *
       * VolumeAttachment objects are non-namespaced.
       */
      interface IoK8sApiStorageV1VolumeAttachment {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * VolumeAttachmentSpec is the specification of a VolumeAttachment request.
         */
        spec: $schemas.IoK8sApiStorageV1VolumeAttachmentSpec;
        /**
         * VolumeAttachmentStatus is the status of a VolumeAttachment request.
         */
        status?: $schemas.IoK8sApiStorageV1VolumeAttachmentStatus;
      }

      /**
       * VolumeAttachmentList is a collection of VolumeAttachment objects.
       */
      interface IoK8sApiStorageV1VolumeAttachmentList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of VolumeAttachments
         */
        items: $schemas.IoK8sApiStorageV1VolumeAttachment[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * VolumeAttachmentSource represents a volume that should be attached. Right now only PersistentVolumes can be attached via external attacher, in the future we may allow also inline volumes in pods. Exactly one member can be set.
       */
      interface IoK8sApiStorageV1VolumeAttachmentSource {
        /**
         * PersistentVolumeSpec is the specification of a persistent volume.
         */
        inlineVolumeSpec?: $schemas.IoK8sApiCoreV1PersistentVolumeSpec;
        /**
         * persistentVolumeName represents the name of the persistent volume to attach.
         */
        persistentVolumeName?: string;
      }

      /**
       * VolumeAttachmentSpec is the specification of a VolumeAttachment request.
       */
      interface IoK8sApiStorageV1VolumeAttachmentSpec {
        /**
         * attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
         */
        attacher: string;
        /**
         * nodeName represents the node that the volume should be attached to.
         */
        nodeName: string;
        /**
         * VolumeAttachmentSource represents a volume that should be attached. Right now only PersistentVolumes can be attached via external attacher, in the future we may allow also inline volumes in pods. Exactly one member can be set.
         */
        source: $schemas.IoK8sApiStorageV1VolumeAttachmentSource;
      }

      /**
       * VolumeAttachmentStatus is the status of a VolumeAttachment request.
       */
      interface IoK8sApiStorageV1VolumeAttachmentStatus {
        /**
         * VolumeError captures an error encountered during a volume operation.
         */
        attachError?: $schemas.IoK8sApiStorageV1VolumeError;
        /**
         * attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
         */
        attached: boolean;
        /**
         * attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
         */
        attachmentMetadata?: {
          [P: string]: string;
        };
        /**
         * VolumeError captures an error encountered during a volume operation.
         */
        detachError?: $schemas.IoK8sApiStorageV1VolumeError;
      }

      /**
       * VolumeError captures an error encountered during a volume operation.
       */
      interface IoK8sApiStorageV1VolumeError {
        /**
         * message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
         */
        message?: string;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        time?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
      }

      /**
       * VolumeNodeResources is a set of resource limits for scheduling of volumes.
       */
      interface IoK8sApiStorageV1VolumeNodeResources {
        /**
         * count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
         * @format int32
         */
        count?: number;
      }

      /**
       * VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
       */
      interface IoK8sApiStorageV1alpha1VolumeAttributesClass {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Name of the CSI driver This field is immutable.
         */
        driverName: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
         *
         * This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
         */
        parameters?: {
          [P: string]: string;
        };
      }

      /**
       * VolumeAttributesClassList is a collection of VolumeAttributesClass objects.
       */
      interface IoK8sApiStorageV1alpha1VolumeAttributesClassList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of VolumeAttributesClass objects.
         */
        items: $schemas.IoK8sApiStorageV1alpha1VolumeAttributesClass[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.
       */
      interface IoK8sApiStorageV1beta1VolumeAttributesClass {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Name of the CSI driver This field is immutable.
         */
        driverName: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.
         *
         * This field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an "Infeasible" state in the modifyVolumeStatus field.
         */
        parameters?: {
          [P: string]: string;
        };
      }

      /**
       * VolumeAttributesClassList is a collection of VolumeAttributesClass objects.
       */
      interface IoK8sApiStorageV1beta1VolumeAttributesClassList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items is the list of VolumeAttributesClass objects.
         */
        items: $schemas.IoK8sApiStorageV1beta1VolumeAttributesClass[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * The names of the group, the version, and the resource.
       */
      interface IoK8sApiStoragemigrationV1alpha1GroupVersionResource {
        /**
         * The name of the group.
         */
        group?: string;
        /**
         * The name of the resource.
         */
        resource?: string;
        /**
         * The name of the version.
         */
        version?: string;
      }

      /**
       * Describes the state of a migration at a certain point.
       */
      interface IoK8sApiStoragemigrationV1alpha1MigrationCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastUpdateTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * A human readable message indicating details about the transition.
         */
        message?: string;
        /**
         * The reason for the condition's last transition.
         */
        reason?: string;
        /**
         * Status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * Type of the condition.
         */
        type: string;
      }

      /**
       * StorageVersionMigration represents a migration of stored data to the latest storage version.
       */
      interface IoK8sApiStoragemigrationV1alpha1StorageVersionMigration {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * Spec of the storage version migration.
         */
        spec?: $schemas.IoK8sApiStoragemigrationV1alpha1StorageVersionMigrationSpec;
        /**
         * Status of the storage version migration.
         */
        status?: $schemas.IoK8sApiStoragemigrationV1alpha1StorageVersionMigrationStatus;
      }

      /**
       * StorageVersionMigrationList is a collection of storage version migrations.
       */
      interface IoK8sApiStoragemigrationV1alpha1StorageVersionMigrationList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of StorageVersionMigration
         */
        items: $schemas.IoK8sApiStoragemigrationV1alpha1StorageVersionMigration[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * Spec of the storage version migration.
       */
      interface IoK8sApiStoragemigrationV1alpha1StorageVersionMigrationSpec {
        /**
         * The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is "Running", users can use this token to check the progress of the migration.
         */
        continueToken?: string;
        /**
         * The names of the group, the version, and the resource.
         */
        resource: $schemas.IoK8sApiStoragemigrationV1alpha1GroupVersionResource;
      }

      /**
       * Status of the storage version migration.
       */
      interface IoK8sApiStoragemigrationV1alpha1StorageVersionMigrationStatus {
        /**
         * The latest available observations of the migration's current state.
         */
        conditions?: $schemas.IoK8sApiStoragemigrationV1alpha1MigrationCondition[];
        /**
         * ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource.
         */
        resourceVersion?: string;
      }

      /**
       * CustomResourceColumnDefinition specifies a column for server side printing.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition {
        /**
         * description is a human readable description of this column.
         */
        description?: string;
        /**
         * format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
         */
        format?: string;
        /**
         * jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
         */
        jsonPath: string;
        /**
         * name is a human readable name for the column.
         */
        name: string;
        /**
         * priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
         * @format int32
         */
        priority?: number;
        /**
         * type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
         */
        type: string;
      }

      /**
       * CustomResourceConversion describes how to convert different versions of a CR.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion {
        /**
         * strategy specifies how custom resources are converted between versions. Allowed values are: - `"None"`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `"Webhook"`: API Server will call to an external webhook to do the conversion. Additional information
         *   is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.
         */
        strategy: string;
        /**
         * WebhookConversion describes how to call a conversion webhook
         */
        webhook?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion;
      }

      /**
       * CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * CustomResourceDefinitionSpec describes how a user wants their resource to appear
         */
        spec: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec;
        /**
         * CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
         */
        status?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus;
      }

      /**
       * CustomResourceDefinitionCondition contains details for the current condition of this pod.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * message is a human-readable message indicating details about last transition.
         */
        message?: string;
        /**
         * reason is a unique, one-word, CamelCase reason for the condition's last transition.
         */
        reason?: string;
        /**
         * status is the status of the condition. Can be True, False, Unknown.
         */
        status: string;
        /**
         * type is the type of the condition. Types include Established, NamesAccepted and Terminating.
         */
        type: string;
      }

      /**
       * CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * items list individual CustomResourceDefinition objects
         */
        items: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames {
        /**
         * categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
         */
        categories?: string[];
        /**
         * kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
         */
        kind: string;
        /**
         * listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
         */
        listKind?: string;
        /**
         * plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
         */
        plural: string;
        /**
         * shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
         */
        shortNames?: string[];
        /**
         * singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
         */
        singular?: string;
      }

      /**
       * CustomResourceDefinitionSpec describes how a user wants their resource to appear
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec {
        /**
         * CustomResourceConversion describes how to convert different versions of a CR.
         */
        conversion?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion;
        /**
         * group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
         */
        group: string;
        /**
         * CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
         */
        names: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames;
        /**
         * preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning for details.
         */
        preserveUnknownFields?: boolean;
        /**
         * scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
         */
        scope: string;
        /**
         * versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
         */
        versions: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion[];
      }

      /**
       * CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus {
        /**
         * CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
         */
        acceptedNames?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames;
        /**
         * conditions indicate state for particular aspects of a CustomResourceDefinition
         */
        conditions?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition[];
        /**
         * storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
         */
        storedVersions?: string[];
      }

      /**
       * CustomResourceDefinitionVersion describes a version for CRD.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion {
        /**
         * additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.
         */
        additionalPrinterColumns?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition[];
        /**
         * deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.
         */
        deprecated?: boolean;
        /**
         * deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.
         */
        deprecationWarning?: string;
        /**
         * name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
         */
        name: string;
        /**
         * CustomResourceValidation is a list of validation methods for CustomResources.
         */
        schema?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation;
        /**
         * selectableFields specifies paths to fields that may be used as field selectors. A maximum of 8 selectable fields are allowed. See https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors
         */
        selectableFields?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1SelectableField[];
        /**
         * served is a flag enabling/disabling this version from being served via REST APIs
         */
        served: boolean;
        /**
         * storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
         */
        storage: boolean;
        /**
         * CustomResourceSubresources defines the status and scale subresources for CustomResources.
         */
        subresources?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources;
      }

      /**
       * CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale {
        /**
         * labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
         */
        labelSelectorPath?: string;
        /**
         * specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
         */
        specReplicasPath: string;
        /**
         * statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
         */
        statusReplicasPath: string;
      }

      /**
       * CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus {}

      /**
       * CustomResourceSubresources defines the status and scale subresources for CustomResources.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources {
        /**
         * CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
         */
        scale?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale;
        /**
         * CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza
         */
        status?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus;
      }

      /**
       * CustomResourceValidation is a list of validation methods for CustomResources.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation {
        /**
         * JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
         */
        openAPIV3Schema?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaProps;
      }

      /**
       * ExternalDocumentation allows referencing an external resource for extended documentation.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation {
        description?: string;
        url?: string;
      }

      /**
       * JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
       */
      type IoK8sApiextensionsApiserverPkgApisApiextensionsV1Json = any;

      /**
       * JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaProps {
        $ref?: string;
        $schema?: string;
        /**
         * JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
         */
        additionalItems?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaPropsOrBool;
        /**
         * JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
         */
        additionalProperties?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaPropsOrBool;
        allOf?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaProps[];
        anyOf?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaProps[];
        /**
         * JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
         */
        default?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1Json;
        definitions?: {
          /**
           * JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
           */
          [
            P: string
          ]: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaProps;
        };
        dependencies?: {
          /**
           * JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
           */
          [
            P: string
          ]: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaPropsOrStringArray;
        };
        description?: string;
        enum?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1Json[];
        /**
         * JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
         */
        example?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1Json;
        exclusiveMaximum?: boolean;
        exclusiveMinimum?: boolean;
        /**
         * ExternalDocumentation allows referencing an external resource for extended documentation.
         */
        externalDocs?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation;
        /**
         * format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:
         *
         * - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
         */
        format?: string;
        id?: string;
        /**
         * JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
         */
        items?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaPropsOrArray;
        /**
         * @format int64
         */
        maxItems?: number | string;
        /**
         * @format int64
         */
        maxLength?: number | string;
        /**
         * @format int64
         */
        maxProperties?: number | string;
        /**
         * @format double
         */
        maximum?: number;
        /**
         * @format int64
         */
        minItems?: number | string;
        /**
         * @format int64
         */
        minLength?: number | string;
        /**
         * @format int64
         */
        minProperties?: number | string;
        /**
         * @format double
         */
        minimum?: number;
        /**
         * @format double
         */
        multipleOf?: number;
        /**
         * JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
         */
        not?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaProps;
        nullable?: boolean;
        oneOf?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaProps[];
        pattern?: string;
        patternProperties?: {
          /**
           * JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
           */
          [
            P: string
          ]: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaProps;
        };
        properties?: {
          /**
           * JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
           */
          [
            P: string
          ]: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaProps;
        };
        required?: string[];
        title?: string;
        type?: string;
        uniqueItems?: boolean;
        /**
         * x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
         */
        "x-kubernetes-embedded-resource"?: boolean;
        /**
         * x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:
         *
         * 1) anyOf:
         *    - type: integer
         *    - type: string
         * 2) allOf:
         *    - anyOf:
         *      - type: integer
         *      - type: string
         *    - ... zero or more
         */
        "x-kubernetes-int-or-string"?: boolean;
        /**
         * x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.
         *
         * This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).
         *
         * The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
         */
        "x-kubernetes-list-map-keys"?: string[];
        /**
         * x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:
         *
         * 1) `atomic`: the list is treated as a single entity, like a scalar.
         *      Atomic lists will be entirely replaced when updated. This extension
         *      may be used on any type of list (struct, scalar, ...).
         * 2) `set`:
         *      Sets are lists that must not have multiple items with the same value. Each
         *      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
         *      array with x-kubernetes-list-type `atomic`.
         * 3) `map`:
         *      These lists are like maps in that their elements have a non-index key
         *      used to identify them. Order is preserved upon merge. The map tag
         *      must only be used on a list with elements of type object.
         * Defaults to atomic for arrays.
         */
        "x-kubernetes-list-type"?: string;
        /**
         * x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:
         *
         * 1) `granular`:
         *      These maps are actual maps (key-value pairs) and each fields are independent
         *      from each other (they can each be manipulated by separate actors). This is
         *      the default behaviour for all maps.
         * 2) `atomic`: the list is treated as a single entity, like a scalar.
         *      Atomic maps will be entirely replaced when updated.
         */
        "x-kubernetes-map-type"?: string;
        /**
         * x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
         */
        "x-kubernetes-preserve-unknown-fields"?: boolean;
        /**
         * x-kubernetes-validations describes a list of validation rules written in the CEL expression language.
         */
        "x-kubernetes-validations"?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1ValidationRule[];
      }

      /**
       * JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
       */
      type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaPropsOrArray =
        any;

      /**
       * JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
       */
      type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaPropsOrBool =
        any;

      /**
       * JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
       */
      type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JsonSchemaPropsOrStringArray =
        any;

      /**
       * SelectableField specifies the JSON path of a field that may be used with field selectors.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1SelectableField {
        /**
         * jsonPath is a simple JSON path which is evaluated against each custom resource to produce a field selector value. Only JSON paths without the array notation are allowed. Must point to a field of type string, boolean or integer. Types with enum values and strings with formats are allowed. If jsonPath refers to absent field in a resource, the jsonPath evaluates to an empty string. Must not point to metdata fields. Required.
         */
        jsonPath: string;
      }

      /**
       * ServiceReference holds a reference to Service.legacy.k8s.io
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference {
        /**
         * name is the name of the service. Required
         */
        name: string;
        /**
         * namespace is the namespace of the service. Required
         */
        namespace: string;
        /**
         * path is an optional URL path at which the webhook will be contacted.
         */
        path?: string;
        /**
         * port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
         * @format int32
         */
        port?: number;
      }

      /**
       * ValidationRule describes a validation rule written in the CEL expression language.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1ValidationRule {
        /**
         * fieldPath represents the field path returned when the validation fails. It must be a relative JSON path (i.e. with array notation) scoped to the location of this x-kubernetes-validations extension in the schema and refer to an existing field. e.g. when validation checks if a specific attribute `foo` under a map `testMap`, the fieldPath could be set to `.testMap.foo` If the validation checks two lists must have unique attributes, the fieldPath could be set to either of the list: e.g. `.testList` It does not support list numeric index. It supports child operation to refer to an existing field currently. Refer to [JSONPath support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/) for more info. Numeric index of array is not supported. For field name which contains special characters, use `['specialName']` to refer the field name. e.g. for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set to `.testList['foo.34$']`
         */
        fieldPath?: string;
        /**
         * Message represents the message displayed when validation fails. The message is required if the Rule contains line breaks. The message must not contain line breaks. If unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host"
         */
        message?: string;
        /**
         * MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a rule, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the rule; the only difference is the return type. Example: "x must be less than max ("+string(self.max)+")"
         */
        messageExpression?: string;
        /**
         * optionalOldSelf is used to opt a transition rule into evaluation even when the object is first created, or if the old object is missing the value.
         *
         * When enabled `oldSelf` will be a CEL optional whose value will be `None` if there is no old value, or when the object is initially created.
         *
         * You may check for presence of oldSelf using `oldSelf.hasValue()` and unwrap it after checking using `oldSelf.value()`. Check the CEL documentation for Optional types for more information: https://pkg.go.dev/github.com/google/cel-go/cel#OptionalTypes
         *
         * May not be set unless `oldSelf` is used in `rule`.
         */
        optionalOldSelf?: boolean;
        /**
         * reason provides a machine-readable validation failure reason that is returned to the caller when a request fails this validation rule. The HTTP status code returned to the caller will match the reason of the reason of the first failed validation rule. The currently supported reasons are: "FieldValueInvalid", "FieldValueForbidden", "FieldValueRequired", "FieldValueDuplicate". If not set, default to use "FieldValueInvalid". All future added reasons must be accepted by clients when reading this value and unknown reasons should be treated as FieldValueInvalid.
         */
        reason?: string;
        /**
         * Rule represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec The Rule is scoped to the location of the x-kubernetes-validations extension in the schema. The `self` variable in the CEL expression is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status subresource: {"rule": "self.status.actual <= self.spec.maxDesired"}
         *
         * If the Rule is scoped to an object with properties, the accessible properties of the object are field selectable via `self.field` and field presence can be checked via `has(self.field)`. Null valued fields are treated as absent fields in CEL expressions. If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map are accessible via CEL macros and functions such as `self.all(...)`. If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and functions. If the Rule is scoped to a scalar, `self` is bound to the scalar value. Examples: - Rule scoped to a map of objects: {"rule": "self.components['Widget'].priority < 10"} - Rule scoped to a list of integers: {"rule": "self.values.all(value, value >= 0 && value < 100)"} - Rule scoped to a string value: {"rule": "self.startsWith('kube')"}
         *
         * The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object and from any x-kubernetes-embedded-resource annotated objects. No other metadata properties are accessible.
         *
         * Unknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This includes: - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the property schema is of an "unknown type". An "unknown type" is recursively defined as:
         *   - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
         *   - An array where the items schema is of an "unknown type"
         *   - An object where the additionalProperties schema is of an "unknown type"
         *
         * Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
         * 	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
         * 	  "import", "let", "loop", "package", "namespace", "return".
         * Examples:
         *   - Rule accessing a property named "namespace": {"rule": "self.__namespace__ > 0"}
         *   - Rule accessing a property named "x-prop": {"rule": "self.x__dash__prop > 0"}
         *   - Rule accessing a property named "redact__d": {"rule": "self.redact__underscores__d > 0"}
         *
         * Equality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:
         *   - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and
         *     non-intersecting elements in `Y` are appended, retaining their partial order.
         *   - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values
         *     are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with
         *     non-intersecting keys are appended, retaining their partial order.
         *
         * If `rule` makes use of the `oldSelf` variable it is implicitly a `transition rule`.
         *
         * By default, the `oldSelf` variable is the same type as `self`. When `optionalOldSelf` is true, the `oldSelf` variable is a CEL optional
         *  variable whose value() is the same type as `self`.
         * See the documentation for the `optionalOldSelf` field for details.
         *
         * Transition rules by default are applied only on UPDATE requests and are skipped if an old value could not be found. You can opt a transition rule into unconditional evaluation by setting `optionalOldSelf` to true.
         */
        rule: string;
      }

      /**
       * WebhookClientConfig contains the information to make a TLS connection with the webhook.
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig {
        /**
         * caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
         * @format byte
         */
        caBundle?: string;
        /**
         * ServiceReference holds a reference to Service.legacy.k8s.io
         */
        service?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference;
        /**
         * url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
         *
         * The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
         *
         * Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
         *
         * The scheme must be "https"; the URL must begin with "https://".
         *
         * A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
         *
         * Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
         */
        url?: string;
      }

      /**
       * WebhookConversion describes how to call a conversion webhook
       */
      interface IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion {
        /**
         * WebhookClientConfig contains the information to make a TLS connection with the webhook.
         */
        clientConfig?: $schemas.IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig;
        /**
         * conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.
         */
        conversionReviewVersions: string[];
      }

      /**
       * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
       *
       * The serialization format is:
       *
       * ``` <quantity>        ::= <signedNumber><suffix>
       *
       * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
       *
       * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
       *
       * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
       *
       * <decimalSI>       ::= m | "" | k | M | G | T | P | E
       *
       * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
       *
       * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
       *
       * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
       *
       * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
       *
       * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
       *
       * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
       *
       * The sign will be omitted unless the number is negative.
       *
       * Examples:
       *
       * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
       *
       * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
       *
       * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
       *
       * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
       */
      type IoK8sApimachineryPkgApiResourceQuantity = string;

      /**
       * APIGroup contains the name, the supported versions, and the preferred version of a group.
       */
      interface IoK8sApimachineryPkgApisMetaV1ApiGroup {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * name is the name of the group.
         */
        name: string;
        /**
         * GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
         */
        preferredVersion?: $schemas.IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery;
        /**
         * a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
         */
        serverAddressByClientCIDRs?: $schemas.IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr[];
        /**
         * versions are the versions supported in this group.
         */
        versions: $schemas.IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery[];
      }

      /**
       * APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
       */
      interface IoK8sApimachineryPkgApisMetaV1ApiGroupList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * groups is a list of APIGroup.
         */
        groups: $schemas.IoK8sApimachineryPkgApisMetaV1ApiGroup[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
      }

      /**
       * APIResource specifies the name of a resource and whether it is namespaced.
       */
      interface IoK8sApimachineryPkgApisMetaV1ApiResource {
        /**
         * categories is a list of the grouped resources this resource belongs to (e.g. 'all')
         */
        categories?: string[];
        /**
         * group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".
         */
        group?: string;
        /**
         * kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
         */
        kind: string;
        /**
         * name is the plural name of the resource.
         */
        name: string;
        /**
         * namespaced indicates if a resource is namespaced or not.
         */
        namespaced: boolean;
        /**
         * shortNames is a list of suggested short names of the resource.
         */
        shortNames?: string[];
        /**
         * singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
         */
        singularName: string;
        /**
         * The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
         */
        storageVersionHash?: string;
        /**
         * verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
         */
        verbs: string[];
        /**
         * version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
         */
        version?: string;
      }

      /**
       * APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
       */
      interface IoK8sApimachineryPkgApisMetaV1ApiResourceList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * groupVersion is the group and version this APIResourceList is for.
         */
        groupVersion: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * resources contains the name of the resources and if they are namespaced.
         */
        resources: $schemas.IoK8sApimachineryPkgApisMetaV1ApiResource[];
      }

      /**
       * APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
       */
      interface IoK8sApimachineryPkgApisMetaV1ApiVersions {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
         */
        serverAddressByClientCIDRs: $schemas.IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr[];
        /**
         * versions are the api versions that are available.
         */
        versions: string[];
      }

      /**
       * Condition contains details for one aspect of the current state of this API Resource.
       */
      interface IoK8sApimachineryPkgApisMetaV1Condition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * message is a human readable message indicating details about the transition. This may be an empty string.
         */
        message: string;
        /**
         * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
         * @format int64
         */
        observedGeneration?: number | string;
        /**
         * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
         */
        reason: string;
        /**
         * status of the condition, one of True, False, Unknown.
         */
        status: string;
        /**
         * type of condition in CamelCase or in foo.example.com/CamelCase.
         */
        type: string;
      }

      /**
       * DeleteOptions may be provided when deleting an API object.
       */
      interface IoK8sApimachineryPkgApisMetaV1DeleteOptions {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         */
        dryRun?: string[];
        /**
         * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
         * @format int64
         */
        gracePeriodSeconds?: number | string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
         */
        orphanDependents?: boolean;
        /**
         * Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
         */
        preconditions?: $schemas.IoK8sApimachineryPkgApisMetaV1Preconditions;
        /**
         * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
         */
        propagationPolicy?: string;
      }

      /**
       * FieldSelectorRequirement is a selector that contains values, a key, and an operator that relates the key and values.
       */
      interface IoK8sApimachineryPkgApisMetaV1FieldSelectorRequirement {
        /**
         * key is the field selector key that the requirement applies to.
         */
        key: string;
        /**
         * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. The list of operators may grow in the future.
         */
        operator: string;
        /**
         * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
         */
        values?: string[];
      }

      /**
       * FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
       *
       * Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
       *
       * The exact format is defined in sigs.k8s.io/structured-merge-diff
       */
      interface IoK8sApimachineryPkgApisMetaV1FieldsV1 {}

      /**
       * GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
       */
      interface IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery {
        /**
         * groupVersion specifies the API group and version in the form "group/version"
         */
        groupVersion: string;
        /**
         * version specifies the version in the form of "version". This is to save the clients the trouble of splitting the GroupVersion.
         */
        version: string;
      }

      /**
       * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
       */
      interface IoK8sApimachineryPkgApisMetaV1LabelSelector {
        /**
         * matchExpressions is a list of label selector requirements. The requirements are ANDed.
         */
        matchExpressions?: $schemas.IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement[];
        /**
         * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
         */
        matchLabels?: {
          [P: string]: string;
        };
      }

      /**
       * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
       */
      interface IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement {
        /**
         * key is the label key that the selector applies to.
         */
        key: string;
        /**
         * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
         */
        operator: string;
        /**
         * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
         */
        values?: string[];
      }

      /**
       * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
       */
      interface IoK8sApimachineryPkgApisMetaV1ListMeta {
        /**
         * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
         */
        continue?: string;
        /**
         * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
         * @format int64
         */
        remainingItemCount?: number | string;
        /**
         * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
         */
        resourceVersion?: string;
        /**
         * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
         */
        selfLink?: string;
      }

      /**
       * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
       */
      interface IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry {
        /**
         * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
         */
        apiVersion?: string;
        /**
         * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
         */
        fieldsType?: string;
        /**
         * FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
         *
         * Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
         *
         * The exact format is defined in sigs.k8s.io/structured-merge-diff
         */
        fieldsV1?: $schemas.IoK8sApimachineryPkgApisMetaV1FieldsV1;
        /**
         * Manager is an identifier of the workflow managing these fields.
         */
        manager?: string;
        /**
         * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
         */
        operation?: string;
        /**
         * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
         */
        subresource?: string;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        time?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
      }

      /**
       * MicroTime is version of Time with microsecond level precision.
       */
      type IoK8sApimachineryPkgApisMetaV1MicroTime = string;

      /**
       * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
       */
      interface IoK8sApimachineryPkgApisMetaV1ObjectMeta {
        /**
         * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
         */
        annotations?: {
          [P: string]: string;
        };
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        creationTimestamp?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
         * @format int64
         */
        deletionGracePeriodSeconds?: number | string;
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        deletionTimestamp?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
         */
        finalizers?: string[];
        /**
         * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
         *
         * If this field is specified and the generated name exists, the server will return a 409.
         *
         * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
         */
        generateName?: string;
        /**
         * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
         * @format int64
         */
        generation?: number | string;
        /**
         * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
         */
        labels?: {
          [P: string]: string;
        };
        /**
         * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
         */
        managedFields?: $schemas.IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry[];
        /**
         * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
         */
        name?: string;
        /**
         * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
         *
         * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
         */
        namespace?: string;
        /**
         * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
         */
        ownerReferences?: $schemas.IoK8sApimachineryPkgApisMetaV1OwnerReference[];
        /**
         * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
         *
         * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
         */
        resourceVersion?: string;
        /**
         * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
         */
        selfLink?: string;
        /**
         * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
         *
         * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
         */
        uid?: string;
      }

      /**
       * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
       */
      interface IoK8sApimachineryPkgApisMetaV1OwnerReference {
        /**
         * API version of the referent.
         */
        apiVersion: string;
        /**
         * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
         */
        blockOwnerDeletion?: boolean;
        /**
         * If true, this reference points to the managing controller.
         */
        controller?: boolean;
        /**
         * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind: string;
        /**
         * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
         */
        name: string;
        /**
         * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
         */
        uid: string;
      }

      /**
       * Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
       */
      interface IoK8sApimachineryPkgApisMetaV1Patch {}

      /**
       * Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
       */
      interface IoK8sApimachineryPkgApisMetaV1Preconditions {
        /**
         * Specifies the target ResourceVersion
         */
        resourceVersion?: string;
        /**
         * Specifies the target UID.
         */
        uid?: string;
      }

      /**
       * ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
       */
      interface IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr {
        /**
         * The CIDR with which clients can match their IP to figure out the server address that they should use.
         */
        clientCIDR: string;
        /**
         * Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
         */
        serverAddress: string;
      }

      /**
       * Status is a return value for calls that don't return other objects.
       */
      interface IoK8sApimachineryPkgApisMetaV1Status {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Suggested HTTP return code for this status, 0 if not set.
         * @format int32
         */
        code?: number;
        /**
         * StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
         */
        details?: $schemas.IoK8sApimachineryPkgApisMetaV1StatusDetails;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * A human-readable description of the status of this operation.
         */
        message?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
        /**
         * A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
         */
        reason?: string;
        /**
         * Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        status?: string;
      }

      /**
       * StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
       */
      interface IoK8sApimachineryPkgApisMetaV1StatusCause {
        /**
         * The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
         *
         * Examples:
         *   "name" - the field "name" on the current resource
         *   "items[0].name" - the field "name" on the first array entry in "items"
         */
        field?: string;
        /**
         * A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
         */
        message?: string;
        /**
         * A machine-readable description of the cause of the error. If this value is empty there is no information available.
         */
        reason?: string;
      }

      /**
       * StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
       */
      interface IoK8sApimachineryPkgApisMetaV1StatusDetails {
        /**
         * The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
         */
        causes?: $schemas.IoK8sApimachineryPkgApisMetaV1StatusCause[];
        /**
         * The group attribute of the resource associated with the status StatusReason.
         */
        group?: string;
        /**
         * The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
         */
        name?: string;
        /**
         * If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
         * @format int32
         */
        retryAfterSeconds?: number;
        /**
         * UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
         */
        uid?: string;
      }

      /**
       * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
       */
      type IoK8sApimachineryPkgApisMetaV1Time = string;

      /**
       * Event represents a single event to a watched resource.
       */
      interface IoK8sApimachineryPkgApisMetaV1WatchEvent {
        /**
         * RawExtension is used to hold extensions in external versions.
         *
         * To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
         *
         * // Internal package:
         *
         * 	type MyAPIObject struct {
         * 		runtime.TypeMeta `json:",inline"`
         * 		MyPlugin runtime.Object `json:"myPlugin"`
         * 	}
         *
         * 	type PluginA struct {
         * 		AOption string `json:"aOption"`
         * 	}
         *
         * // External package:
         *
         * 	type MyAPIObject struct {
         * 		runtime.TypeMeta `json:",inline"`
         * 		MyPlugin runtime.RawExtension `json:"myPlugin"`
         * 	}
         *
         * 	type PluginA struct {
         * 		AOption string `json:"aOption"`
         * 	}
         *
         * // On the wire, the JSON will look something like this:
         *
         * 	{
         * 		"kind":"MyAPIObject",
         * 		"apiVersion":"v1",
         * 		"myPlugin": {
         * 			"kind":"PluginA",
         * 			"aOption":"foo",
         * 		},
         * 	}
         *
         * So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
         */
        object: $schemas.IoK8sApimachineryPkgRuntimeRawExtension;
        type: string;
      }

      /**
       * RawExtension is used to hold extensions in external versions.
       *
       * To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
       *
       * // Internal package:
       *
       * 	type MyAPIObject struct {
       * 		runtime.TypeMeta `json:",inline"`
       * 		MyPlugin runtime.Object `json:"myPlugin"`
       * 	}
       *
       * 	type PluginA struct {
       * 		AOption string `json:"aOption"`
       * 	}
       *
       * // External package:
       *
       * 	type MyAPIObject struct {
       * 		runtime.TypeMeta `json:",inline"`
       * 		MyPlugin runtime.RawExtension `json:"myPlugin"`
       * 	}
       *
       * 	type PluginA struct {
       * 		AOption string `json:"aOption"`
       * 	}
       *
       * // On the wire, the JSON will look something like this:
       *
       * 	{
       * 		"kind":"MyAPIObject",
       * 		"apiVersion":"v1",
       * 		"myPlugin": {
       * 			"kind":"PluginA",
       * 			"aOption":"foo",
       * 		},
       * 	}
       *
       * So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
       */
      interface IoK8sApimachineryPkgRuntimeRawExtension {}

      /**
       * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
       */
      type IoK8sApimachineryPkgUtilIntstrIntOrString = string;

      /**
       * Info contains versioning information. how we'll want to distribute that information.
       */
      interface IoK8sApimachineryPkgVersionInfo {
        buildDate: string;
        compiler: string;
        gitCommit: string;
        gitTreeState: string;
        gitVersion: string;
        goVersion: string;
        major: string;
        minor: string;
        platform: string;
      }

      /**
       * APIService represents a server for a particular GroupVersion. Name must be "version.group".
       */
      interface IoK8sKubeAggregatorPkgApisApiregistrationV1ApiService {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
        /**
         * APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
         */
        spec?: $schemas.IoK8sKubeAggregatorPkgApisApiregistrationV1ApiServiceSpec;
        /**
         * APIServiceStatus contains derived information about an API server
         */
        status?: $schemas.IoK8sKubeAggregatorPkgApisApiregistrationV1ApiServiceStatus;
      }

      /**
       * APIServiceCondition describes the state of an APIService at a particular point
       */
      interface IoK8sKubeAggregatorPkgApisApiregistrationV1ApiServiceCondition {
        /**
         * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
         * @format date-time
         */
        lastTransitionTime?: $schemas.IoK8sApimachineryPkgApisMetaV1Time;
        /**
         * Human-readable message indicating details about last transition.
         */
        message?: string;
        /**
         * Unique, one-word, CamelCase reason for the condition's last transition.
         */
        reason?: string;
        /**
         * Status is the status of the condition. Can be True, False, Unknown.
         */
        status: string;
        /**
         * Type is the type of the condition.
         */
        type: string;
      }

      /**
       * APIServiceList is a list of APIService objects.
       */
      interface IoK8sKubeAggregatorPkgApisApiregistrationV1ApiServiceList {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * Items is the list of APIService
         */
        items: $schemas.IoK8sKubeAggregatorPkgApisApiregistrationV1ApiService[];
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        metadata?: $schemas.IoK8sApimachineryPkgApisMetaV1ListMeta;
      }

      /**
       * APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
       */
      interface IoK8sKubeAggregatorPkgApisApiregistrationV1ApiServiceSpec {
        /**
         * CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
         * @format byte
         */
        caBundle?: string;
        /**
         * Group is the API group name this server hosts
         */
        group?: string;
        /**
         * GroupPriorityMinimum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMinimum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
         * @format int32
         */
        groupPriorityMinimum: number;
        /**
         * InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
         */
        insecureSkipTLSVerify?: boolean;
        /**
         * ServiceReference holds a reference to Service.legacy.k8s.io
         */
        service?: $schemas.IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference;
        /**
         * Version is the API version this server hosts.  For example, "v1"
         */
        version?: string;
        /**
         * VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
         * @format int32
         */
        versionPriority: number;
      }

      /**
       * APIServiceStatus contains derived information about an API server
       */
      interface IoK8sKubeAggregatorPkgApisApiregistrationV1ApiServiceStatus {
        /**
         * Current service state of apiService.
         */
        conditions?: $schemas.IoK8sKubeAggregatorPkgApisApiregistrationV1ApiServiceCondition[];
      }

      /**
       * ServiceReference holds a reference to Service.legacy.k8s.io
       */
      interface IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference {
        /**
         * Name is the name of the service
         */
        name?: string;
        /**
         * Namespace is the namespace of the service
         */
        namespace?: string;
        /**
         * If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
         * @format int32
         */
        port?: number;
      }
    }
  }
}
